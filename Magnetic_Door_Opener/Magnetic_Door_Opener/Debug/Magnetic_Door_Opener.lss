
Magnetic_Door_Opener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000a1e  00000ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800102  00800102  00000ab4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd5  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a34  00000000  00000000  00001c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092e  00000000  00000000  00002665  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00002f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  0000326c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062b  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003f57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 04 03 	call	0x608	; 0x608 <main>
  9e:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
 *  in Atmega 328P
 */
void ADC_init(void)
{
	// Use connect AREF to ACCC (reference voltage select)
	ADMUX &= ~(1<<REFS1); ADMUX |= (1<<REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	
	// set prescale to 128 (125 kHz)
	ADCSRA |= (1<<ADPS1) | (1<< ADPS0); ADCSRA &= ~(1<<ADPS2);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	80 83       	st	Z, r24
	
	// enable ADC
	//TODO: This could be power hungry since the ADC is enabled when ADC isnt being used   
	ADCSRA |= (1<<ADEN);
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <ADC_convert>:
 */
uint16_t ADC_convert(uint8_t channel)
{	
	
	// Set the channel we wish to convert
	ADMUX |= channel;
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	89 2b       	or	r24, r25
  d6:	80 83       	st	Z, r24
	
	// Start the conversion
	ADCSRA |= (1 << ADSC);
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
	
	// Wait for the conversion to finsih
	while ((ADCSRA & (1 << ADIF)) == 0);
  e2:	80 81       	ld	r24, Z
  e4:	84 ff       	sbrs	r24, 4
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <ADC_convert+0x14>
	
	// Read out the ADC counts
	uint16_t adc_count = ADC;//(ADCL << 0) | (ADCH << 8);
  e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	return adc_count;
}
  f0:	08 95       	ret

000000f2 <get_doorstate>:
/*
 *  this function gets door state
 *  it returns 1 if door is open and return 0 if door is closed 
 */ 
int get_doorstate(uint16_t adc)
{
  f2:	cf 93       	push	r28
	float value = adc*5/ADC_REF;
  f4:	bc 01       	movw	r22, r24
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	86 0f       	add	r24, r22
 100:	97 1f       	adc	r25, r23
 102:	bc 01       	movw	r22, r24
 104:	67 2f       	mov	r22, r23
 106:	77 27       	eor	r23, r23
 108:	66 95       	lsr	r22
 10a:	66 95       	lsr	r22
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 b7 03 	call	0x76e	; 0x76e <__floatunsisf>
 114:	9b 01       	movw	r18, r22
 116:	ac 01       	movw	r20, r24
 118:	0e 94 17 03 	call	0x62e	; 0x62e <__addsf3>
 11c:	c1 e0       	ldi	r28, 0x01	; 1
 11e:	2d ec       	ldi	r18, 0xCD	; 205
 120:	3c ec       	ldi	r19, 0xCC	; 204
 122:	4c e4       	ldi	r20, 0x4C	; 76
 124:	5f e3       	ldi	r21, 0x3F	; 63
 126:	0e 94 83 03 	call	0x706	; 0x706 <__cmpsf2>
 12a:	18 16       	cp	r1, r24
 12c:	0c f4       	brge	.+2      	; 0x130 <get_doorstate+0x3e>
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	8c 27       	eor	r24, r28
	{	
		return Door_Closed; 
	}
	
	return Door_Opened;
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <FSM_start>:
 *  as
 */ 
void FSM_start(void)
{	
	uint8_t half_Duty_Produced = 0;
	Current_FSM_state = Initialisation_State; // Initialize current state to Initialization state
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Current_FSM_state>
	Door_State = Uknown; // Door state is unknown when programme just started
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Door_State>
	Sample_Coil_Current = 0;
 146:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Sample_Coil_Current>
	int flag_set = 0;
 14a:	00 e0       	ldi	r16, 0x00	; 0
 14c:	10 e0       	ldi	r17, 0x00	; 0
 *  This function represents the FSM that controls the current driver 
 *  as
 */ 
void FSM_start(void)
{	
	uint8_t half_Duty_Produced = 0;
 14e:	31 2c       	mov	r3, r1
			case Open_Door_State:
					
					if(!flag_set)
					{
					STOP_16bit_COUNTER(); // stops the pwm generator
					Coil_Current_Polarity_State = Closing_Force_Current;
 150:	22 24       	eor	r2, r2
 152:	23 94       	inc	r2
					// initialize duty cycle to 50% for sensing
					duty[0] = 0.5;duty[1] = 0.6;duty[2] = 0.7;duty[3] = 0.8;
 154:	cb e0       	ldi	r28, 0x0B	; 11
 156:	d1 e0       	ldi	r29, 0x01	; 1
 158:	0f 2e       	mov	r0, r31
 15a:	c1 2c       	mov	r12, r1
 15c:	d1 2c       	mov	r13, r1
 15e:	e1 2c       	mov	r14, r1
 160:	ff e3       	ldi	r31, 0x3F	; 63
 162:	ff 2e       	mov	r15, r31
 164:	f0 2d       	mov	r31, r0
 166:	0f 2e       	mov	r0, r31
 168:	fa e9       	ldi	r31, 0x9A	; 154
 16a:	8f 2e       	mov	r8, r31
 16c:	f9 e9       	ldi	r31, 0x99	; 153
 16e:	9f 2e       	mov	r9, r31
 170:	f9 e1       	ldi	r31, 0x19	; 25
 172:	af 2e       	mov	r10, r31
 174:	ff e3       	ldi	r31, 0x3F	; 63
 176:	bf 2e       	mov	r11, r31
 178:	f0 2d       	mov	r31, r0
 17a:	0f 2e       	mov	r0, r31
 17c:	f3 e3       	ldi	r31, 0x33	; 51
 17e:	4f 2e       	mov	r4, r31
 180:	54 2c       	mov	r5, r4
 182:	64 2c       	mov	r6, r4
 184:	ff e3       	ldi	r31, 0x3F	; 63
 186:	7f 2e       	mov	r7, r31
 188:	f0 2d       	mov	r31, r0
	while(1)
	{	
		
		//UART_transmit_number(Coil_Current_Polarity_State);
		
		switch(Current_FSM_state)
 18a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Current_FSM_state>
 18e:	88 23       	and	r24, r24
 190:	09 f4       	brne	.+2      	; 0x194 <FSM_start+0x5a>
 192:	46 c0       	rjmp	.+140    	; 0x220 <FSM_start+0xe6>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	d9 f7       	brne	.-10     	; 0x18e <FSM_start+0x54>
		{
			case Initialisation_State:
				
				
				if(!half_Duty_Produced)
 198:	31 10       	cpse	r3, r1
 19a:	29 c0       	rjmp	.+82     	; 0x1ee <FSM_start+0xb4>
				{	
					 // initialize duty cycle to 50% for sensing
					duty[0] = 0.5;duty[1] = 0.5;duty[2] = 0.5;duty[3] = 0.5;
 19c:	c8 82       	st	Y, r12
 19e:	d9 82       	std	Y+1, r13	; 0x01
 1a0:	ea 82       	std	Y+2, r14	; 0x02
 1a2:	fb 82       	std	Y+3, r15	; 0x03
 1a4:	cc 82       	std	Y+4, r12	; 0x04
 1a6:	dd 82       	std	Y+5, r13	; 0x05
 1a8:	ee 82       	std	Y+6, r14	; 0x06
 1aa:	ff 82       	std	Y+7, r15	; 0x07
 1ac:	c8 86       	std	Y+8, r12	; 0x08
 1ae:	d9 86       	std	Y+9, r13	; 0x09
 1b0:	ea 86       	std	Y+10, r14	; 0x0a
 1b2:	fb 86       	std	Y+11, r15	; 0x0b
 1b4:	cc 86       	std	Y+12, r12	; 0x0c
 1b6:	dd 86       	std	Y+13, r13	; 0x0d
 1b8:	ee 86       	std	Y+14, r14	; 0x0e
 1ba:	ff 86       	std	Y+15, r15	; 0x0f
					duty[4] = 0.5;duty[5] = 0.5;duty[6] = 0.5;duty[7] = 0.5;duty[8] = 0.5;
 1bc:	c8 8a       	std	Y+16, r12	; 0x10
 1be:	d9 8a       	std	Y+17, r13	; 0x11
 1c0:	ea 8a       	std	Y+18, r14	; 0x12
 1c2:	fb 8a       	std	Y+19, r15	; 0x13
 1c4:	cc 8a       	std	Y+20, r12	; 0x14
 1c6:	dd 8a       	std	Y+21, r13	; 0x15
 1c8:	ee 8a       	std	Y+22, r14	; 0x16
 1ca:	ff 8a       	std	Y+23, r15	; 0x17
 1cc:	c8 8e       	std	Y+24, r12	; 0x18
 1ce:	d9 8e       	std	Y+25, r13	; 0x19
 1d0:	ea 8e       	std	Y+26, r14	; 0x1a
 1d2:	fb 8e       	std	Y+27, r15	; 0x1b
 1d4:	cc 8e       	std	Y+28, r12	; 0x1c
 1d6:	dd 8e       	std	Y+29, r13	; 0x1d
 1d8:	ee 8e       	std	Y+30, r14	; 0x1e
 1da:	ff 8e       	std	Y+31, r15	; 0x1f
 1dc:	c8 a2       	std	Y+32, r12	; 0x20
 1de:	d9 a2       	std	Y+33, r13	; 0x21
 1e0:	ea a2       	std	Y+34, r14	; 0x22
 1e2:	fb a2       	std	Y+35, r15	; 0x23
					Coil_Current_Polarity_State = Opening_Force_Current; // generate a opening force
 1e4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Coil_Current_Polarity_State>
					START_16bit_COUNTER();
 1e8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <START_16bit_COUNTER>
					half_Duty_Produced = 1;
 1ec:	32 2c       	mov	r3, r2
				}
				
				if(Sample_Coil_Current) // some flag
 1ee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Sample_Coil_Current>
 1f2:	88 23       	and	r24, r24
 1f4:	51 f2       	breq	.-108    	; 0x18a <FSM_start+0x50>
				{	
					Sample_Coil_Current = 0;
 1f6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Sample_Coil_Current>
					uint16_t adc = ADC_convert(_PC0);
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
					Door_State = get_doorstate(adc); // decide if the door is open or not
 200:	0e 94 79 00 	call	0xf2	; 0xf2 <get_doorstate>
 204:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Door_State>
					
					if (Door_State==Door_Closed)
 208:	81 11       	cpse	r24, r1
 20a:	04 c0       	rjmp	.+8      	; 0x214 <FSM_start+0xda>
					{	
						//TODO: also stop pwm to stop checking
							
						Current_FSM_state= 	WaitTouch_State;					
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Current_FSM_state>
 212:	bb cf       	rjmp	.-138    	; 0x18a <FSM_start+0x50>
					}
					
					else if (Door_State==Door_Opened)
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	09 f0       	breq	.+2      	; 0x21a <FSM_start+0xe0>
 218:	b8 cf       	rjmp	.-144    	; 0x18a <FSM_start+0x50>
					{	
						Current_FSM_state = Open_Door_State;
 21a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Current_FSM_state>
 21e:	b5 cf       	rjmp	.-150    	; 0x18a <FSM_start+0x50>
				
				break;
			
			case Open_Door_State:
					
					if(!flag_set)
 220:	01 15       	cp	r16, r1
 222:	11 05       	cpc	r17, r1
 224:	09 f0       	breq	.+2      	; 0x228 <FSM_start+0xee>
 226:	b1 cf       	rjmp	.-158    	; 0x18a <FSM_start+0x50>
					{
					STOP_16bit_COUNTER(); // stops the pwm generator
 228:	0e 94 67 01 	call	0x2ce	; 0x2ce <STOP_16bit_COUNTER>
					Coil_Current_Polarity_State = Closing_Force_Current;
 22c:	20 92 06 01 	sts	0x0106, r2	; 0x800106 <Coil_Current_Polarity_State>
					// initialize duty cycle to 50% for sensing
					duty[0] = 0.5;duty[1] = 0.6;duty[2] = 0.7;duty[3] = 0.8;
 230:	c8 82       	st	Y, r12
 232:	d9 82       	std	Y+1, r13	; 0x01
 234:	ea 82       	std	Y+2, r14	; 0x02
 236:	fb 82       	std	Y+3, r15	; 0x03
 238:	8c 82       	std	Y+4, r8	; 0x04
 23a:	9d 82       	std	Y+5, r9	; 0x05
 23c:	ae 82       	std	Y+6, r10	; 0x06
 23e:	bf 82       	std	Y+7, r11	; 0x07
 240:	48 86       	std	Y+8, r4	; 0x08
 242:	59 86       	std	Y+9, r5	; 0x09
 244:	6a 86       	std	Y+10, r6	; 0x0a
 246:	7b 86       	std	Y+11, r7	; 0x0b
 248:	8d ec       	ldi	r24, 0xCD	; 205
 24a:	9c ec       	ldi	r25, 0xCC	; 204
 24c:	ac e4       	ldi	r26, 0x4C	; 76
 24e:	bf e3       	ldi	r27, 0x3F	; 63
 250:	8c 87       	std	Y+12, r24	; 0x0c
 252:	9d 87       	std	Y+13, r25	; 0x0d
 254:	ae 87       	std	Y+14, r26	; 0x0e
 256:	bf 87       	std	Y+15, r27	; 0x0f
					duty[4] = 0.9;duty[5] = 0.5;duty[6] = 0.5;duty[7] = 0.5;duty[8] = 0.5;	
 258:	86 e6       	ldi	r24, 0x66	; 102
 25a:	96 e6       	ldi	r25, 0x66	; 102
 25c:	a6 e6       	ldi	r26, 0x66	; 102
 25e:	bf e3       	ldi	r27, 0x3F	; 63
 260:	88 8b       	std	Y+16, r24	; 0x10
 262:	99 8b       	std	Y+17, r25	; 0x11
 264:	aa 8b       	std	Y+18, r26	; 0x12
 266:	bb 8b       	std	Y+19, r27	; 0x13
 268:	cc 8a       	std	Y+20, r12	; 0x14
 26a:	dd 8a       	std	Y+21, r13	; 0x15
 26c:	ee 8a       	std	Y+22, r14	; 0x16
 26e:	ff 8a       	std	Y+23, r15	; 0x17
 270:	c8 8e       	std	Y+24, r12	; 0x18
 272:	d9 8e       	std	Y+25, r13	; 0x19
 274:	ea 8e       	std	Y+26, r14	; 0x1a
 276:	fb 8e       	std	Y+27, r15	; 0x1b
 278:	cc 8e       	std	Y+28, r12	; 0x1c
 27a:	dd 8e       	std	Y+29, r13	; 0x1d
 27c:	ee 8e       	std	Y+30, r14	; 0x1e
 27e:	ff 8e       	std	Y+31, r15	; 0x1f
 280:	c8 a2       	std	Y+32, r12	; 0x20
 282:	d9 a2       	std	Y+33, r13	; 0x21
 284:	ea a2       	std	Y+34, r14	; 0x22
 286:	fb a2       	std	Y+35, r15	; 0x23
					// start a timer
					//while(1); // delay , whhile timer dint expire
					START_16bit_COUNTER(); // change polarity
 288:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <START_16bit_COUNTER>
					
					// cycle thru pwm 0.5 to 0.9
					//at 0.5 duty cycle set flag to get the door state
					flag_set = 1;
 28c:	01 e0       	ldi	r16, 0x01	; 1
 28e:	10 e0       	ldi	r17, 0x00	; 0
 290:	7c cf       	rjmp	.-264    	; 0x18a <FSM_start+0x50>

00000292 <COUNTER_16bit_init>:
 *
 */ 
void COUNTER_16bit_init(void)
{
	// Set to CTC mode
	TCCR1B |= (1<<WGM12);
 292:	e1 e8       	ldi	r30, 0x81	; 129
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	88 60       	ori	r24, 0x08	; 8
 29a:	80 83       	st	Z, r24
	
	//Enable ISR when count matches OCR1 value
	TIMSK1 |= (1<<OCIE1A);
 29c:	ef e6       	ldi	r30, 0x6F	; 111
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	82 60       	ori	r24, 0x02	; 2
 2a4:	80 83       	st	Z, r24
	
	// Initial Value to count to
	OCR1A = 1;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 2ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 2b2:	08 95       	ret

000002b4 <START_16bit_COUNTER>:
 */ 

void START_16bit_COUNTER(void)
{		
		// Resets counter value to zero
		TCNT1 = 0;
 2b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		// Set prescaller to 1024 and start counting
		TCCR1B |= (1<<CS12) | (1<<CS10); TCCR1B &= ~(1<<CS11);
 2bc:	e1 e8       	ldi	r30, 0x81	; 129
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	85 60       	ori	r24, 0x05	; 5
 2c4:	80 83       	st	Z, r24
 2c6:	80 81       	ld	r24, Z
 2c8:	8d 7f       	andi	r24, 0xFD	; 253
 2ca:	80 83       	st	Z, r24
 2cc:	08 95       	ret

000002ce <STOP_16bit_COUNTER>:
 * This function stops the 16 bit counter 
 */ 
void STOP_16bit_COUNTER(void)
{
		// Disconnect clk from timer (Stop the timer)
		TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
 2ce:	e1 e8       	ldi	r30, 0x81	; 129
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	88 7f       	andi	r24, 0xF8	; 248
 2d6:	80 83       	st	Z, r24
 2d8:	08 95       	ret

000002da <COUNTER_8bit_timer0_init>:
 * This function initializes the 8 bit timer (Timer0/Counter0)
 */ 
void COUNTER_8bit_timer0_init(void)
{
	// Set to CTC mode
	TCCR0A |= (1<<WGM01); TCCR0A &= ~(1<<WGM00);  TCCR0B &= (1<<WGM02);
 2da:	84 b5       	in	r24, 0x24	; 36
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	84 bd       	out	0x24, r24	; 36
 2e0:	84 b5       	in	r24, 0x24	; 36
 2e2:	8e 7f       	andi	r24, 0xFE	; 254
 2e4:	84 bd       	out	0x24, r24	; 36
 2e6:	85 b5       	in	r24, 0x25	; 37
 2e8:	88 70       	andi	r24, 0x08	; 8
 2ea:	85 bd       	out	0x25, r24	; 37

	
	//Enable ISR when count matches OCR1 value
	TIMSK0 |= (1<<OCIE0A);
 2ec:	ee e6       	ldi	r30, 0x6E	; 110
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	80 83       	st	Z, r24
	
	// Initial Value to count to
	OCR0A = 10;
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	87 bd       	out	0x27, r24	; 39
 2fa:	08 95       	ret

000002fc <START_8bit_COUNTER0>:
 */ 

void START_8bit_COUNTER0(void)
{		
		// Resets counter value to zero
		TCNT0 = 0;
 2fc:	16 bc       	out	0x26, r1	; 38
		// Set prescaller to 1024 and start counting
		TCCR0B |= (1<<CS12); TCCR0B &= ~((1<<CS10) |(1<<CS11));
 2fe:	85 b5       	in	r24, 0x25	; 37
 300:	84 60       	ori	r24, 0x04	; 4
 302:	85 bd       	out	0x25, r24	; 37
 304:	85 b5       	in	r24, 0x25	; 37
 306:	8c 7f       	andi	r24, 0xFC	; 252
 308:	85 bd       	out	0x25, r24	; 37
 30a:	08 95       	ret

0000030c <STOP_8bit_COUNTER0>:
 * This function stops the 16 bit counter 
 */ 
void STOP_8bit_COUNTER0(void)
{
		// Disconnect clk from timer (Stop the timer)
		TCCR0B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
 30c:	85 b5       	in	r24, 0x25	; 37
 30e:	88 7f       	andi	r24, 0xF8	; 248
 310:	85 bd       	out	0x25, r24	; 37
 312:	08 95       	ret

00000314 <GPIO_init>:
 * This function initializes all pins to Vcc
 */ 
void GPIO_init(void)
{
	// Set all pins to output
	DDRD = 0xFF; DDRC = 0xFF; DDRB = 0xFF;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	8a b9       	out	0x0a, r24	; 10
 318:	87 b9       	out	0x07, r24	; 7
 31a:	84 b9       	out	0x04, r24	; 4
	
	// Set all pins to High
	PORTD = 0xFF; PORTC = 0xFF; PORTB = 0xFF;
 31c:	8b b9       	out	0x0b, r24	; 11
 31e:	88 b9       	out	0x08, r24	; 8
 320:	85 b9       	out	0x05, r24	; 5
 322:	08 95       	ret

00000324 <UART_init>:
{
	int i;
	for(i = 0; i < strlen(str); i++) {
		UART_transmit_char(str[i]);
	}
}
 324:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 328:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 32c:	88 e1       	ldi	r24, 0x18	; 24
 32e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 332:	86 e0       	ldi	r24, 0x06	; 6
 334:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 338:	08 95       	ret

0000033a <uart_transmit_byte>:
 * This function transmits a byte serially via UART
 */
void uart_transmit_byte(uint8_t byte)
{
	// Wait for the UART data register empty flag
	while ((UCSR0A & 0x20) == 0) {
 33a:	e0 ec       	ldi	r30, 0xC0	; 192
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	90 81       	ld	r25, Z
 340:	95 ff       	sbrs	r25, 5
 342:	fd cf       	rjmp	.-6      	; 0x33e <uart_transmit_byte+0x4>
		;
	}
	
	// Put the byte to be sent into the data register
	UDR0 = byte;
 344:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 348:	08 95       	ret

0000034a <UART_transmit>:

/* 
 * This function transmits an array of byte serially via UART
 */
void UART_transmit(uint8_t* byte_array, uint32_t byte_array_length)
{
 34a:	8f 92       	push	r8
 34c:	9f 92       	push	r9
 34e:	af 92       	push	r10
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
	// Loop through each byte
	for (uint32_t i = 0; i < byte_array_length; i++) {
 35e:	41 15       	cp	r20, r1
 360:	51 05       	cpc	r21, r1
 362:	61 05       	cpc	r22, r1
 364:	71 05       	cpc	r23, r1
 366:	a1 f0       	breq	.+40     	; 0x390 <UART_transmit+0x46>
 368:	4a 01       	movw	r8, r20
 36a:	5b 01       	movw	r10, r22
 36c:	c8 2f       	mov	r28, r24
 36e:	d9 2f       	mov	r29, r25
 370:	c1 2c       	mov	r12, r1
 372:	d1 2c       	mov	r13, r1
 374:	76 01       	movw	r14, r12
		// Transmit it via the UART
		uart_transmit_byte(byte_array[i]);
 376:	89 91       	ld	r24, Y+
 378:	0e 94 9d 01 	call	0x33a	; 0x33a <uart_transmit_byte>
 * This function transmits an array of byte serially via UART
 */
void UART_transmit(uint8_t* byte_array, uint32_t byte_array_length)
{
	// Loop through each byte
	for (uint32_t i = 0; i < byte_array_length; i++) {
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	c8 1a       	sub	r12, r24
 380:	d8 0a       	sbc	r13, r24
 382:	e8 0a       	sbc	r14, r24
 384:	f8 0a       	sbc	r15, r24
 386:	8c 14       	cp	r8, r12
 388:	9d 04       	cpc	r9, r13
 38a:	ae 04       	cpc	r10, r14
 38c:	bf 04       	cpc	r11, r15
 38e:	99 f7       	brne	.-26     	; 0x376 <UART_transmit+0x2c>
		// Transmit it via the UART
		uart_transmit_byte(byte_array[i]);
	}
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	bf 90       	pop	r11
 39e:	af 90       	pop	r10
 3a0:	9f 90       	pop	r9
 3a2:	8f 90       	pop	r8
 3a4:	08 95       	ret

000003a6 <int2str>:
 * e.g int a = 123
 * becomes b[3] = {"1","2","3"} 
 */

uint32_t int2str(uint16_t number, uint8_t* buffer)
{
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	ac 01       	movw	r20, r24
	uint32_t i = 0;
	
	if(number == 0) buffer[0] = 0;
 3b0:	89 2b       	or	r24, r25
 3b2:	31 f4       	brne	.+12     	; 0x3c0 <int2str+0x1a>
 3b4:	fb 01       	movw	r30, r22
 3b6:	10 82       	st	Z, r1
 3b8:	c1 2c       	mov	r12, r1
 3ba:	d1 2c       	mov	r13, r1
 3bc:	76 01       	movw	r14, r12
 3be:	32 c0       	rjmp	.+100    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3c0:	fb 01       	movw	r30, r22
 3c2:	c1 2c       	mov	r12, r1
 3c4:	d1 2c       	mov	r13, r1
 3c6:	76 01       	movw	r14, r12
	while(number != 0)
	{
		buffer[i] = (number%10) + 48;
 3c8:	9a 01       	movw	r18, r20
 3ca:	ad ec       	ldi	r26, 0xCD	; 205
 3cc:	bc ec       	ldi	r27, 0xCC	; 204
 3ce:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__umulhisi3>
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	9c 01       	movw	r18, r24
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	82 0f       	add	r24, r18
 3f2:	93 1f       	adc	r25, r19
 3f4:	9a 01       	movw	r18, r20
 3f6:	28 1b       	sub	r18, r24
 3f8:	39 0b       	sbc	r19, r25
 3fa:	c9 01       	movw	r24, r18
 3fc:	80 5d       	subi	r24, 0xD0	; 208
 3fe:	81 93       	st	Z+, r24
		number = number/10;
 400:	9a 01       	movw	r18, r20
 402:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__umulhisi3>
 406:	ac 01       	movw	r20, r24
 408:	56 95       	lsr	r21
 40a:	47 95       	ror	r20
 40c:	56 95       	lsr	r21
 40e:	47 95       	ror	r20
 410:	56 95       	lsr	r21
 412:	47 95       	ror	r20
		i++;
 414:	3f ef       	ldi	r19, 0xFF	; 255
 416:	c3 1a       	sub	r12, r19
 418:	d3 0a       	sbc	r13, r19
 41a:	e3 0a       	sbc	r14, r19
 41c:	f3 0a       	sbc	r15, r19
uint32_t int2str(uint16_t number, uint8_t* buffer)
{
	uint32_t i = 0;
	
	if(number == 0) buffer[0] = 0;
	while(number != 0)
 41e:	41 15       	cp	r20, r1
 420:	51 05       	cpc	r21, r1
 422:	91 f6       	brne	.-92     	; 0x3c8 <int2str+0x22>
	}
	*/
	
	
	return i;
 424:	c7 01       	movw	r24, r14
 426:	b6 01       	movw	r22, r12
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	df 90       	pop	r13
 42e:	cf 90       	pop	r12
 430:	08 95       	ret

00000432 <UART_transmit_number>:

/* 
 * This function transmits a number via uart
 */
void UART_transmit_number(uint16_t data)
{
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	2a 97       	sbiw	r28, 0x0a	; 10
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte_array[10];
 	uint32_t byte_array_length = int2str(data,byte_array);
 446:	be 01       	movw	r22, r28
 448:	6f 5f       	subi	r22, 0xFF	; 255
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <int2str>
 450:	ab 01       	movw	r20, r22
 452:	bc 01       	movw	r22, r24
	UART_transmit(byte_array,byte_array_length);
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 a5 01 	call	0x34a	; 0x34a <UART_transmit>
}
 45c:	2a 96       	adiw	r28, 0x0a	; 10
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <__vector_11>:
/*
 * This ISR timer creates a PWM and starts the timer(3.2ms) used to measure coil current
 *
 */ 
ISR(TIMER1_COMPA_vect)
{	
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	4f 93       	push	r20
 47e:	5f 93       	push	r21
 480:	6f 93       	push	r22
 482:	7f 93       	push	r23
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	af 93       	push	r26
 48a:	bf 93       	push	r27
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
	UART_transmit_number(Coil_Current_Polarity_State);
 490:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Coil_Current_Polarity_State>
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 19 02 	call	0x432	; 0x432 <UART_transmit_number>
		
	if(pmw_arbiter == 0) // create a falling edge on pwm
 49a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 49e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4a2:	00 97       	sbiw	r24, 0x00	; 0
 4a4:	99 f5       	brne	.+102    	; 0x50c <__vector_11+0x9e>
	{			
		PORTD &= ~((1<<DDD2) | (1<<DDD3) | (1<<DDD4) | (1<<DDD5));
 4a6:	8b b1       	in	r24, 0x0b	; 11
 4a8:	83 7c       	andi	r24, 0xC3	; 195
 4aa:	8b b9       	out	0x0b, r24	; 11
		OCR1A = PERIOD_50ms*(1-duty[duty_index]); // changes duty cycle
 4ac:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 4b0:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
 4b4:	ee 0f       	add	r30, r30
 4b6:	ff 1f       	adc	r31, r31
 4b8:	ee 0f       	add	r30, r30
 4ba:	ff 1f       	adc	r31, r31
 4bc:	e5 5f       	subi	r30, 0xF5	; 245
 4be:	fe 4f       	sbci	r31, 0xFE	; 254
 4c0:	20 81       	ld	r18, Z
 4c2:	31 81       	ldd	r19, Z+1	; 0x01
 4c4:	42 81       	ldd	r20, Z+2	; 0x02
 4c6:	53 81       	ldd	r21, Z+3	; 0x03
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	80 e8       	ldi	r24, 0x80	; 128
 4ce:	9f e3       	ldi	r25, 0x3F	; 63
 4d0:	0e 94 16 03 	call	0x62c	; 0x62c <__subsf3>
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	48 e1       	ldi	r20, 0x18	; 24
 4da:	52 e4       	ldi	r21, 0x42	; 66
 4dc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__mulsf3>
 4e0:	0e 94 88 03 	call	0x710	; 0x710 <__fixunssfsi>
 4e4:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 4e8:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		pmw_arbiter = 1; // create rising edge on pwm on next 16 bit timer match
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		period_count++;
 4f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <period_count>
 4fc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <period_count+0x1>
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <period_count+0x1>
 506:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <period_count>
 50a:	2f c0       	rjmp	.+94     	; 0x56a <__vector_11+0xfc>
	}
	else if(pmw_arbiter == 1) // create a rising edge on pwm
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	69 f5       	brne	.+90     	; 0x56a <__vector_11+0xfc>
	{	
		
		if(Coil_Current_Polarity_State == Opening_Force_Current) 
 510:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Coil_Current_Polarity_State>
 514:	81 11       	cpse	r24, r1
 516:	04 c0       	rjmp	.+8      	; 0x520 <__vector_11+0xb2>
		{
			PORTD |= (1<<DDD2) | (1<<DDD3); // set pwm pins for opening current gate drivers
 518:	8b b1       	in	r24, 0x0b	; 11
 51a:	8c 60       	ori	r24, 0x0C	; 12
 51c:	8b b9       	out	0x0b, r24	; 11
 51e:	05 c0       	rjmp	.+10     	; 0x52a <__vector_11+0xbc>
		}
		else if(Coil_Current_Polarity_State == Closing_Force_Current) 
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	19 f4       	brne	.+6      	; 0x52a <__vector_11+0xbc>
		{
			PORTD |=  (1<<DDD4) | (1<<DDD5); // set pwm pins for closing current gate drivers
 524:	8b b1       	in	r24, 0x0b	; 11
 526:	80 63       	ori	r24, 0x30	; 48
 528:	8b b9       	out	0x0b, r24	; 11
		}
		
		START_8bit_COUNTER0(); // start a 3.2ms timer on rising edge to initialize coil current sampling procedure
 52a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <START_8bit_COUNTER0>
		OCR1A = PERIOD_50ms*duty[duty_index]; // changes duty cycle
 52e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 532:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__data_end+0x1>
 536:	ee 0f       	add	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	ee 0f       	add	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	e5 5f       	subi	r30, 0xF5	; 245
 540:	fe 4f       	sbci	r31, 0xFE	; 254
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	48 e1       	ldi	r20, 0x18	; 24
 548:	52 e4       	ldi	r21, 0x42	; 66
 54a:	60 81       	ld	r22, Z
 54c:	71 81       	ldd	r23, Z+1	; 0x01
 54e:	82 81       	ldd	r24, Z+2	; 0x02
 550:	93 81       	ldd	r25, Z+3	; 0x03
 552:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__mulsf3>
 556:	0e 94 88 03 	call	0x710	; 0x710 <__fixunssfsi>
 55a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 55e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		pmw_arbiter = 0; // create a falling edge on next 16bit timer match 
 562:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 566:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
	
	if(period_count == 10) // wait 10 period count before changing into new duty cycle
 56a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <period_count>
 56e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <period_count+0x1>
 572:	0a 97       	sbiw	r24, 0x0a	; 10
 574:	89 f4       	brne	.+34     	; 0x598 <__vector_11+0x12a>
	{	
		period_count = 0; //reset period count
 576:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <period_count+0x1>
 57a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <period_count>
		duty_index = ++duty_index%9; // cycles through pwm duty cycles repeatedly
 57e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 582:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	69 e0       	ldi	r22, 0x09	; 9
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__divmodhi4>
 590:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 594:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
	
}
 598:	ff 91       	pop	r31
 59a:	ef 91       	pop	r30
 59c:	bf 91       	pop	r27
 59e:	af 91       	pop	r26
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	7f 91       	pop	r23
 5a6:	6f 91       	pop	r22
 5a8:	5f 91       	pop	r21
 5aa:	4f 91       	pop	r20
 5ac:	3f 91       	pop	r19
 5ae:	2f 91       	pop	r18
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <__vector_14>:
 * This ISR timer counts 3.2 ms to start sampling coil current
 *it sets a flag to sample the current
 *
 */ 
ISR(TIMER0_COMPA_vect)
{	
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	2f 93       	push	r18
 5c6:	3f 93       	push	r19
 5c8:	4f 93       	push	r20
 5ca:	5f 93       	push	r21
 5cc:	6f 93       	push	r22
 5ce:	7f 93       	push	r23
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
 5d8:	ef 93       	push	r30
 5da:	ff 93       	push	r31
	Sample_Coil_Current = 1; // set flag to initialize current sampling
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Sample_Coil_Current>
	STOP_8bit_COUNTER0(); // stop timer0 to prevent samping at other times
 5e2:	0e 94 86 01 	call	0x30c	; 0x30c <STOP_8bit_COUNTER0>
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <main>:

int main(void)
{	
	
	ADC_init();
 608:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	COUNTER_16bit_init();
 60c:	0e 94 49 01 	call	0x292	; 0x292 <COUNTER_16bit_init>
	COUNTER_8bit_timer0_init();
 610:	0e 94 6d 01 	call	0x2da	; 0x2da <COUNTER_8bit_timer0_init>
	GPIO_init();
 614:	0e 94 8a 01 	call	0x314	; 0x314 <GPIO_init>
	UART_init(MYUBRR);
 618:	83 e3       	ldi	r24, 0x33	; 51
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 92 01 	call	0x324	; 0x324 <UART_init>
	sei(); // enable global interupt 
 620:	78 94       	sei
		
	FSM_start();
 622:	0e 94 9d 00 	call	0x13a	; 0x13a <FSM_start>
}
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	08 95       	ret

0000062c <__subsf3>:
 62c:	50 58       	subi	r21, 0x80	; 128

0000062e <__addsf3>:
 62e:	bb 27       	eor	r27, r27
 630:	aa 27       	eor	r26, r26
 632:	0e 94 2e 03 	call	0x65c	; 0x65c <__addsf3x>
 636:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_round>
 63a:	0e 94 21 04 	call	0x842	; 0x842 <__fp_pscA>
 63e:	38 f0       	brcs	.+14     	; 0x64e <__addsf3+0x20>
 640:	0e 94 28 04 	call	0x850	; 0x850 <__fp_pscB>
 644:	20 f0       	brcs	.+8      	; 0x64e <__addsf3+0x20>
 646:	39 f4       	brne	.+14     	; 0x656 <__addsf3+0x28>
 648:	9f 3f       	cpi	r25, 0xFF	; 255
 64a:	19 f4       	brne	.+6      	; 0x652 <__addsf3+0x24>
 64c:	26 f4       	brtc	.+8      	; 0x656 <__addsf3+0x28>
 64e:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_nan>
 652:	0e f4       	brtc	.+2      	; 0x656 <__addsf3+0x28>
 654:	e0 95       	com	r30
 656:	e7 fb       	bst	r30, 7
 658:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_inf>

0000065c <__addsf3x>:
 65c:	e9 2f       	mov	r30, r25
 65e:	0e 94 40 04 	call	0x880	; 0x880 <__fp_split3>
 662:	58 f3       	brcs	.-42     	; 0x63a <__addsf3+0xc>
 664:	ba 17       	cp	r27, r26
 666:	62 07       	cpc	r22, r18
 668:	73 07       	cpc	r23, r19
 66a:	84 07       	cpc	r24, r20
 66c:	95 07       	cpc	r25, r21
 66e:	20 f0       	brcs	.+8      	; 0x678 <__addsf3x+0x1c>
 670:	79 f4       	brne	.+30     	; 0x690 <__addsf3x+0x34>
 672:	a6 f5       	brtc	.+104    	; 0x6dc <__addsf3x+0x80>
 674:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_zero>
 678:	0e f4       	brtc	.+2      	; 0x67c <__addsf3x+0x20>
 67a:	e0 95       	com	r30
 67c:	0b 2e       	mov	r0, r27
 67e:	ba 2f       	mov	r27, r26
 680:	a0 2d       	mov	r26, r0
 682:	0b 01       	movw	r0, r22
 684:	b9 01       	movw	r22, r18
 686:	90 01       	movw	r18, r0
 688:	0c 01       	movw	r0, r24
 68a:	ca 01       	movw	r24, r20
 68c:	a0 01       	movw	r20, r0
 68e:	11 24       	eor	r1, r1
 690:	ff 27       	eor	r31, r31
 692:	59 1b       	sub	r21, r25
 694:	99 f0       	breq	.+38     	; 0x6bc <__addsf3x+0x60>
 696:	59 3f       	cpi	r21, 0xF9	; 249
 698:	50 f4       	brcc	.+20     	; 0x6ae <__addsf3x+0x52>
 69a:	50 3e       	cpi	r21, 0xE0	; 224
 69c:	68 f1       	brcs	.+90     	; 0x6f8 <__addsf3x+0x9c>
 69e:	1a 16       	cp	r1, r26
 6a0:	f0 40       	sbci	r31, 0x00	; 0
 6a2:	a2 2f       	mov	r26, r18
 6a4:	23 2f       	mov	r18, r19
 6a6:	34 2f       	mov	r19, r20
 6a8:	44 27       	eor	r20, r20
 6aa:	58 5f       	subi	r21, 0xF8	; 248
 6ac:	f3 cf       	rjmp	.-26     	; 0x694 <__addsf3x+0x38>
 6ae:	46 95       	lsr	r20
 6b0:	37 95       	ror	r19
 6b2:	27 95       	ror	r18
 6b4:	a7 95       	ror	r26
 6b6:	f0 40       	sbci	r31, 0x00	; 0
 6b8:	53 95       	inc	r21
 6ba:	c9 f7       	brne	.-14     	; 0x6ae <__addsf3x+0x52>
 6bc:	7e f4       	brtc	.+30     	; 0x6dc <__addsf3x+0x80>
 6be:	1f 16       	cp	r1, r31
 6c0:	ba 0b       	sbc	r27, r26
 6c2:	62 0b       	sbc	r22, r18
 6c4:	73 0b       	sbc	r23, r19
 6c6:	84 0b       	sbc	r24, r20
 6c8:	ba f0       	brmi	.+46     	; 0x6f8 <__addsf3x+0x9c>
 6ca:	91 50       	subi	r25, 0x01	; 1
 6cc:	a1 f0       	breq	.+40     	; 0x6f6 <__addsf3x+0x9a>
 6ce:	ff 0f       	add	r31, r31
 6d0:	bb 1f       	adc	r27, r27
 6d2:	66 1f       	adc	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	c2 f7       	brpl	.-16     	; 0x6ca <__addsf3x+0x6e>
 6da:	0e c0       	rjmp	.+28     	; 0x6f8 <__addsf3x+0x9c>
 6dc:	ba 0f       	add	r27, r26
 6de:	62 1f       	adc	r22, r18
 6e0:	73 1f       	adc	r23, r19
 6e2:	84 1f       	adc	r24, r20
 6e4:	48 f4       	brcc	.+18     	; 0x6f8 <__addsf3x+0x9c>
 6e6:	87 95       	ror	r24
 6e8:	77 95       	ror	r23
 6ea:	67 95       	ror	r22
 6ec:	b7 95       	ror	r27
 6ee:	f7 95       	ror	r31
 6f0:	9e 3f       	cpi	r25, 0xFE	; 254
 6f2:	08 f0       	brcs	.+2      	; 0x6f6 <__addsf3x+0x9a>
 6f4:	b0 cf       	rjmp	.-160    	; 0x656 <__addsf3+0x28>
 6f6:	93 95       	inc	r25
 6f8:	88 0f       	add	r24, r24
 6fa:	08 f0       	brcs	.+2      	; 0x6fe <__addsf3x+0xa2>
 6fc:	99 27       	eor	r25, r25
 6fe:	ee 0f       	add	r30, r30
 700:	97 95       	ror	r25
 702:	87 95       	ror	r24
 704:	08 95       	ret

00000706 <__cmpsf2>:
 706:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_cmp>
 70a:	08 f4       	brcc	.+2      	; 0x70e <__cmpsf2+0x8>
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	08 95       	ret

00000710 <__fixunssfsi>:
 710:	0e 94 48 04 	call	0x890	; 0x890 <__fp_splitA>
 714:	88 f0       	brcs	.+34     	; 0x738 <__fixunssfsi+0x28>
 716:	9f 57       	subi	r25, 0x7F	; 127
 718:	98 f0       	brcs	.+38     	; 0x740 <__fixunssfsi+0x30>
 71a:	b9 2f       	mov	r27, r25
 71c:	99 27       	eor	r25, r25
 71e:	b7 51       	subi	r27, 0x17	; 23
 720:	b0 f0       	brcs	.+44     	; 0x74e <__fixunssfsi+0x3e>
 722:	e1 f0       	breq	.+56     	; 0x75c <__fixunssfsi+0x4c>
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	1a f0       	brmi	.+6      	; 0x734 <__fixunssfsi+0x24>
 72e:	ba 95       	dec	r27
 730:	c9 f7       	brne	.-14     	; 0x724 <__fixunssfsi+0x14>
 732:	14 c0       	rjmp	.+40     	; 0x75c <__fixunssfsi+0x4c>
 734:	b1 30       	cpi	r27, 0x01	; 1
 736:	91 f0       	breq	.+36     	; 0x75c <__fixunssfsi+0x4c>
 738:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_zero>
 73c:	b1 e0       	ldi	r27, 0x01	; 1
 73e:	08 95       	ret
 740:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_zero>
 744:	67 2f       	mov	r22, r23
 746:	78 2f       	mov	r23, r24
 748:	88 27       	eor	r24, r24
 74a:	b8 5f       	subi	r27, 0xF8	; 248
 74c:	39 f0       	breq	.+14     	; 0x75c <__fixunssfsi+0x4c>
 74e:	b9 3f       	cpi	r27, 0xF9	; 249
 750:	cc f3       	brlt	.-14     	; 0x744 <__fixunssfsi+0x34>
 752:	86 95       	lsr	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	b3 95       	inc	r27
 75a:	d9 f7       	brne	.-10     	; 0x752 <__fixunssfsi+0x42>
 75c:	3e f4       	brtc	.+14     	; 0x76c <__fixunssfsi+0x5c>
 75e:	90 95       	com	r25
 760:	80 95       	com	r24
 762:	70 95       	com	r23
 764:	61 95       	neg	r22
 766:	7f 4f       	sbci	r23, 0xFF	; 255
 768:	8f 4f       	sbci	r24, 0xFF	; 255
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	08 95       	ret

0000076e <__floatunsisf>:
 76e:	e8 94       	clt
 770:	09 c0       	rjmp	.+18     	; 0x784 <__floatsisf+0x12>

00000772 <__floatsisf>:
 772:	97 fb       	bst	r25, 7
 774:	3e f4       	brtc	.+14     	; 0x784 <__floatsisf+0x12>
 776:	90 95       	com	r25
 778:	80 95       	com	r24
 77a:	70 95       	com	r23
 77c:	61 95       	neg	r22
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	99 23       	and	r25, r25
 786:	a9 f0       	breq	.+42     	; 0x7b2 <__floatsisf+0x40>
 788:	f9 2f       	mov	r31, r25
 78a:	96 e9       	ldi	r25, 0x96	; 150
 78c:	bb 27       	eor	r27, r27
 78e:	93 95       	inc	r25
 790:	f6 95       	lsr	r31
 792:	87 95       	ror	r24
 794:	77 95       	ror	r23
 796:	67 95       	ror	r22
 798:	b7 95       	ror	r27
 79a:	f1 11       	cpse	r31, r1
 79c:	f8 cf       	rjmp	.-16     	; 0x78e <__floatsisf+0x1c>
 79e:	fa f4       	brpl	.+62     	; 0x7de <__floatsisf+0x6c>
 7a0:	bb 0f       	add	r27, r27
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <__floatsisf+0x36>
 7a4:	60 ff       	sbrs	r22, 0
 7a6:	1b c0       	rjmp	.+54     	; 0x7de <__floatsisf+0x6c>
 7a8:	6f 5f       	subi	r22, 0xFF	; 255
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	16 c0       	rjmp	.+44     	; 0x7de <__floatsisf+0x6c>
 7b2:	88 23       	and	r24, r24
 7b4:	11 f0       	breq	.+4      	; 0x7ba <__floatsisf+0x48>
 7b6:	96 e9       	ldi	r25, 0x96	; 150
 7b8:	11 c0       	rjmp	.+34     	; 0x7dc <__floatsisf+0x6a>
 7ba:	77 23       	and	r23, r23
 7bc:	21 f0       	breq	.+8      	; 0x7c6 <__floatsisf+0x54>
 7be:	9e e8       	ldi	r25, 0x8E	; 142
 7c0:	87 2f       	mov	r24, r23
 7c2:	76 2f       	mov	r23, r22
 7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <__floatsisf+0x5e>
 7c6:	66 23       	and	r22, r22
 7c8:	71 f0       	breq	.+28     	; 0x7e6 <__floatsisf+0x74>
 7ca:	96 e8       	ldi	r25, 0x86	; 134
 7cc:	86 2f       	mov	r24, r22
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	2a f0       	brmi	.+10     	; 0x7de <__floatsisf+0x6c>
 7d4:	9a 95       	dec	r25
 7d6:	66 0f       	add	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	da f7       	brpl	.-10     	; 0x7d4 <__floatsisf+0x62>
 7de:	88 0f       	add	r24, r24
 7e0:	96 95       	lsr	r25
 7e2:	87 95       	ror	r24
 7e4:	97 f9       	bld	r25, 7
 7e6:	08 95       	ret

000007e8 <__fp_cmp>:
 7e8:	99 0f       	add	r25, r25
 7ea:	00 08       	sbc	r0, r0
 7ec:	55 0f       	add	r21, r21
 7ee:	aa 0b       	sbc	r26, r26
 7f0:	e0 e8       	ldi	r30, 0x80	; 128
 7f2:	fe ef       	ldi	r31, 0xFE	; 254
 7f4:	16 16       	cp	r1, r22
 7f6:	17 06       	cpc	r1, r23
 7f8:	e8 07       	cpc	r30, r24
 7fa:	f9 07       	cpc	r31, r25
 7fc:	c0 f0       	brcs	.+48     	; 0x82e <__fp_cmp+0x46>
 7fe:	12 16       	cp	r1, r18
 800:	13 06       	cpc	r1, r19
 802:	e4 07       	cpc	r30, r20
 804:	f5 07       	cpc	r31, r21
 806:	98 f0       	brcs	.+38     	; 0x82e <__fp_cmp+0x46>
 808:	62 1b       	sub	r22, r18
 80a:	73 0b       	sbc	r23, r19
 80c:	84 0b       	sbc	r24, r20
 80e:	95 0b       	sbc	r25, r21
 810:	39 f4       	brne	.+14     	; 0x820 <__fp_cmp+0x38>
 812:	0a 26       	eor	r0, r26
 814:	61 f0       	breq	.+24     	; 0x82e <__fp_cmp+0x46>
 816:	23 2b       	or	r18, r19
 818:	24 2b       	or	r18, r20
 81a:	25 2b       	or	r18, r21
 81c:	21 f4       	brne	.+8      	; 0x826 <__fp_cmp+0x3e>
 81e:	08 95       	ret
 820:	0a 26       	eor	r0, r26
 822:	09 f4       	brne	.+2      	; 0x826 <__fp_cmp+0x3e>
 824:	a1 40       	sbci	r26, 0x01	; 1
 826:	a6 95       	lsr	r26
 828:	8f ef       	ldi	r24, 0xFF	; 255
 82a:	81 1d       	adc	r24, r1
 82c:	81 1d       	adc	r24, r1
 82e:	08 95       	ret

00000830 <__fp_inf>:
 830:	97 f9       	bld	r25, 7
 832:	9f 67       	ori	r25, 0x7F	; 127
 834:	80 e8       	ldi	r24, 0x80	; 128
 836:	70 e0       	ldi	r23, 0x00	; 0
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	08 95       	ret

0000083c <__fp_nan>:
 83c:	9f ef       	ldi	r25, 0xFF	; 255
 83e:	80 ec       	ldi	r24, 0xC0	; 192
 840:	08 95       	ret

00000842 <__fp_pscA>:
 842:	00 24       	eor	r0, r0
 844:	0a 94       	dec	r0
 846:	16 16       	cp	r1, r22
 848:	17 06       	cpc	r1, r23
 84a:	18 06       	cpc	r1, r24
 84c:	09 06       	cpc	r0, r25
 84e:	08 95       	ret

00000850 <__fp_pscB>:
 850:	00 24       	eor	r0, r0
 852:	0a 94       	dec	r0
 854:	12 16       	cp	r1, r18
 856:	13 06       	cpc	r1, r19
 858:	14 06       	cpc	r1, r20
 85a:	05 06       	cpc	r0, r21
 85c:	08 95       	ret

0000085e <__fp_round>:
 85e:	09 2e       	mov	r0, r25
 860:	03 94       	inc	r0
 862:	00 0c       	add	r0, r0
 864:	11 f4       	brne	.+4      	; 0x86a <__fp_round+0xc>
 866:	88 23       	and	r24, r24
 868:	52 f0       	brmi	.+20     	; 0x87e <__fp_round+0x20>
 86a:	bb 0f       	add	r27, r27
 86c:	40 f4       	brcc	.+16     	; 0x87e <__fp_round+0x20>
 86e:	bf 2b       	or	r27, r31
 870:	11 f4       	brne	.+4      	; 0x876 <__fp_round+0x18>
 872:	60 ff       	sbrs	r22, 0
 874:	04 c0       	rjmp	.+8      	; 0x87e <__fp_round+0x20>
 876:	6f 5f       	subi	r22, 0xFF	; 255
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	08 95       	ret

00000880 <__fp_split3>:
 880:	57 fd       	sbrc	r21, 7
 882:	90 58       	subi	r25, 0x80	; 128
 884:	44 0f       	add	r20, r20
 886:	55 1f       	adc	r21, r21
 888:	59 f0       	breq	.+22     	; 0x8a0 <__fp_splitA+0x10>
 88a:	5f 3f       	cpi	r21, 0xFF	; 255
 88c:	71 f0       	breq	.+28     	; 0x8aa <__fp_splitA+0x1a>
 88e:	47 95       	ror	r20

00000890 <__fp_splitA>:
 890:	88 0f       	add	r24, r24
 892:	97 fb       	bst	r25, 7
 894:	99 1f       	adc	r25, r25
 896:	61 f0       	breq	.+24     	; 0x8b0 <__fp_splitA+0x20>
 898:	9f 3f       	cpi	r25, 0xFF	; 255
 89a:	79 f0       	breq	.+30     	; 0x8ba <__fp_splitA+0x2a>
 89c:	87 95       	ror	r24
 89e:	08 95       	ret
 8a0:	12 16       	cp	r1, r18
 8a2:	13 06       	cpc	r1, r19
 8a4:	14 06       	cpc	r1, r20
 8a6:	55 1f       	adc	r21, r21
 8a8:	f2 cf       	rjmp	.-28     	; 0x88e <__fp_split3+0xe>
 8aa:	46 95       	lsr	r20
 8ac:	f1 df       	rcall	.-30     	; 0x890 <__fp_splitA>
 8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <__fp_splitA+0x30>
 8b0:	16 16       	cp	r1, r22
 8b2:	17 06       	cpc	r1, r23
 8b4:	18 06       	cpc	r1, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	f1 cf       	rjmp	.-30     	; 0x89c <__fp_splitA+0xc>
 8ba:	86 95       	lsr	r24
 8bc:	71 05       	cpc	r23, r1
 8be:	61 05       	cpc	r22, r1
 8c0:	08 94       	sec
 8c2:	08 95       	ret

000008c4 <__fp_zero>:
 8c4:	e8 94       	clt

000008c6 <__fp_szero>:
 8c6:	bb 27       	eor	r27, r27
 8c8:	66 27       	eor	r22, r22
 8ca:	77 27       	eor	r23, r23
 8cc:	cb 01       	movw	r24, r22
 8ce:	97 f9       	bld	r25, 7
 8d0:	08 95       	ret

000008d2 <__mulsf3>:
 8d2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__mulsf3x>
 8d6:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_round>
 8da:	0e 94 21 04 	call	0x842	; 0x842 <__fp_pscA>
 8de:	38 f0       	brcs	.+14     	; 0x8ee <__mulsf3+0x1c>
 8e0:	0e 94 28 04 	call	0x850	; 0x850 <__fp_pscB>
 8e4:	20 f0       	brcs	.+8      	; 0x8ee <__mulsf3+0x1c>
 8e6:	95 23       	and	r25, r21
 8e8:	11 f0       	breq	.+4      	; 0x8ee <__mulsf3+0x1c>
 8ea:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_inf>
 8ee:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_nan>
 8f2:	11 24       	eor	r1, r1
 8f4:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_szero>

000008f8 <__mulsf3x>:
 8f8:	0e 94 40 04 	call	0x880	; 0x880 <__fp_split3>
 8fc:	70 f3       	brcs	.-36     	; 0x8da <__mulsf3+0x8>

000008fe <__mulsf3_pse>:
 8fe:	95 9f       	mul	r25, r21
 900:	c1 f3       	breq	.-16     	; 0x8f2 <__mulsf3+0x20>
 902:	95 0f       	add	r25, r21
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	55 1f       	adc	r21, r21
 908:	62 9f       	mul	r22, r18
 90a:	f0 01       	movw	r30, r0
 90c:	72 9f       	mul	r23, r18
 90e:	bb 27       	eor	r27, r27
 910:	f0 0d       	add	r31, r0
 912:	b1 1d       	adc	r27, r1
 914:	63 9f       	mul	r22, r19
 916:	aa 27       	eor	r26, r26
 918:	f0 0d       	add	r31, r0
 91a:	b1 1d       	adc	r27, r1
 91c:	aa 1f       	adc	r26, r26
 91e:	64 9f       	mul	r22, r20
 920:	66 27       	eor	r22, r22
 922:	b0 0d       	add	r27, r0
 924:	a1 1d       	adc	r26, r1
 926:	66 1f       	adc	r22, r22
 928:	82 9f       	mul	r24, r18
 92a:	22 27       	eor	r18, r18
 92c:	b0 0d       	add	r27, r0
 92e:	a1 1d       	adc	r26, r1
 930:	62 1f       	adc	r22, r18
 932:	73 9f       	mul	r23, r19
 934:	b0 0d       	add	r27, r0
 936:	a1 1d       	adc	r26, r1
 938:	62 1f       	adc	r22, r18
 93a:	83 9f       	mul	r24, r19
 93c:	a0 0d       	add	r26, r0
 93e:	61 1d       	adc	r22, r1
 940:	22 1f       	adc	r18, r18
 942:	74 9f       	mul	r23, r20
 944:	33 27       	eor	r19, r19
 946:	a0 0d       	add	r26, r0
 948:	61 1d       	adc	r22, r1
 94a:	23 1f       	adc	r18, r19
 94c:	84 9f       	mul	r24, r20
 94e:	60 0d       	add	r22, r0
 950:	21 1d       	adc	r18, r1
 952:	82 2f       	mov	r24, r18
 954:	76 2f       	mov	r23, r22
 956:	6a 2f       	mov	r22, r26
 958:	11 24       	eor	r1, r1
 95a:	9f 57       	subi	r25, 0x7F	; 127
 95c:	50 40       	sbci	r21, 0x00	; 0
 95e:	9a f0       	brmi	.+38     	; 0x986 <__stack+0x87>
 960:	f1 f0       	breq	.+60     	; 0x99e <__stack+0x9f>
 962:	88 23       	and	r24, r24
 964:	4a f0       	brmi	.+18     	; 0x978 <__stack+0x79>
 966:	ee 0f       	add	r30, r30
 968:	ff 1f       	adc	r31, r31
 96a:	bb 1f       	adc	r27, r27
 96c:	66 1f       	adc	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	88 1f       	adc	r24, r24
 972:	91 50       	subi	r25, 0x01	; 1
 974:	50 40       	sbci	r21, 0x00	; 0
 976:	a9 f7       	brne	.-22     	; 0x962 <__stack+0x63>
 978:	9e 3f       	cpi	r25, 0xFE	; 254
 97a:	51 05       	cpc	r21, r1
 97c:	80 f0       	brcs	.+32     	; 0x99e <__stack+0x9f>
 97e:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_inf>
 982:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_szero>
 986:	5f 3f       	cpi	r21, 0xFF	; 255
 988:	e4 f3       	brlt	.-8      	; 0x982 <__stack+0x83>
 98a:	98 3e       	cpi	r25, 0xE8	; 232
 98c:	d4 f3       	brlt	.-12     	; 0x982 <__stack+0x83>
 98e:	86 95       	lsr	r24
 990:	77 95       	ror	r23
 992:	67 95       	ror	r22
 994:	b7 95       	ror	r27
 996:	f7 95       	ror	r31
 998:	e7 95       	ror	r30
 99a:	9f 5f       	subi	r25, 0xFF	; 255
 99c:	c1 f7       	brne	.-16     	; 0x98e <__stack+0x8f>
 99e:	fe 2b       	or	r31, r30
 9a0:	88 0f       	add	r24, r24
 9a2:	91 1d       	adc	r25, r1
 9a4:	96 95       	lsr	r25
 9a6:	87 95       	ror	r24
 9a8:	97 f9       	bld	r25, 7
 9aa:	08 95       	ret

000009ac <__divmodhi4>:
 9ac:	97 fb       	bst	r25, 7
 9ae:	07 2e       	mov	r0, r23
 9b0:	16 f4       	brtc	.+4      	; 0x9b6 <__divmodhi4+0xa>
 9b2:	00 94       	com	r0
 9b4:	07 d0       	rcall	.+14     	; 0x9c4 <__divmodhi4_neg1>
 9b6:	77 fd       	sbrc	r23, 7
 9b8:	09 d0       	rcall	.+18     	; 0x9cc <__divmodhi4_neg2>
 9ba:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmodhi4>
 9be:	07 fc       	sbrc	r0, 7
 9c0:	05 d0       	rcall	.+10     	; 0x9cc <__divmodhi4_neg2>
 9c2:	3e f4       	brtc	.+14     	; 0x9d2 <__divmodhi4_exit>

000009c4 <__divmodhi4_neg1>:
 9c4:	90 95       	com	r25
 9c6:	81 95       	neg	r24
 9c8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ca:	08 95       	ret

000009cc <__divmodhi4_neg2>:
 9cc:	70 95       	com	r23
 9ce:	61 95       	neg	r22
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255

000009d2 <__divmodhi4_exit>:
 9d2:	08 95       	ret

000009d4 <__umulhisi3>:
 9d4:	a2 9f       	mul	r26, r18
 9d6:	b0 01       	movw	r22, r0
 9d8:	b3 9f       	mul	r27, r19
 9da:	c0 01       	movw	r24, r0
 9dc:	a3 9f       	mul	r26, r19
 9de:	70 0d       	add	r23, r0
 9e0:	81 1d       	adc	r24, r1
 9e2:	11 24       	eor	r1, r1
 9e4:	91 1d       	adc	r25, r1
 9e6:	b2 9f       	mul	r27, r18
 9e8:	70 0d       	add	r23, r0
 9ea:	81 1d       	adc	r24, r1
 9ec:	11 24       	eor	r1, r1
 9ee:	91 1d       	adc	r25, r1
 9f0:	08 95       	ret

000009f2 <__udivmodhi4>:
 9f2:	aa 1b       	sub	r26, r26
 9f4:	bb 1b       	sub	r27, r27
 9f6:	51 e1       	ldi	r21, 0x11	; 17
 9f8:	07 c0       	rjmp	.+14     	; 0xa08 <__udivmodhi4_ep>

000009fa <__udivmodhi4_loop>:
 9fa:	aa 1f       	adc	r26, r26
 9fc:	bb 1f       	adc	r27, r27
 9fe:	a6 17       	cp	r26, r22
 a00:	b7 07       	cpc	r27, r23
 a02:	10 f0       	brcs	.+4      	; 0xa08 <__udivmodhi4_ep>
 a04:	a6 1b       	sub	r26, r22
 a06:	b7 0b       	sbc	r27, r23

00000a08 <__udivmodhi4_ep>:
 a08:	88 1f       	adc	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	5a 95       	dec	r21
 a0e:	a9 f7       	brne	.-22     	; 0x9fa <__udivmodhi4_loop>
 a10:	80 95       	com	r24
 a12:	90 95       	com	r25
 a14:	bc 01       	movw	r22, r24
 a16:	cd 01       	movw	r24, r26
 a18:	08 95       	ret

00000a1a <_exit>:
 a1a:	f8 94       	cli

00000a1c <__stop_program>:
 a1c:	ff cf       	rjmp	.-2      	; 0xa1c <__stop_program>
