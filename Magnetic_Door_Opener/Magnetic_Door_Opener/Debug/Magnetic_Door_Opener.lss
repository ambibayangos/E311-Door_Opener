
Magnetic_Door_Opener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000f42  00000fd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800106  00800106  00000fdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000147b  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae7  00000000  00000000  0000265f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca6  00000000  00000000  00003146  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00003dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008db  00000000  00000000  000041d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000867  00000000  00000000  00004aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00005316  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <main>
  9e:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
 *  in Atmega 328P
 */
void ADC_init(void)
{
	// Use connect AREF to ACCC (reference voltage select)
	ADMUX &= ~(1<<REFS1); ADMUX |= (1<<REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	
	// set prescale to 128 (125 kHz)
	ADCSRA |= (1<<ADPS1) | (1<< ADPS0); ADCSRA &= ~(1<<ADPS2);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	80 83       	st	Z, r24
	
	// enable ADC
	//TODO: This could be power hungry since the ADC is enabled when ADC isnt being used   
	ADCSRA |= (1<<ADEN);
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <ADC_convert>:
 *	returns the ADC value as a 16 bit integer.
 */
uint16_t ADC_convert(uint8_t channel)
{	
	
	if(channel == _PC0)
  ce:	81 11       	cpse	r24, r1
  d0:	06 c0       	rjmp	.+12     	; 0xde <ADC_convert+0x10>
	{
		ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 7f       	andi	r24, 0xF0	; 240
  da:	80 83       	st	Z, r24
  dc:	0a c0       	rjmp	.+20     	; 0xf2 <ADC_convert+0x24>
	}
	else if(channel == _PC1)
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	41 f4       	brne	.+16     	; 0xf2 <ADC_convert+0x24>
	{
		ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)); 	ADMUX |= (1<<MUX0);
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 7f       	andi	r24, 0xF1	; 241
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 83       	st	Z, r24
	}
	
	// Start the conversion
	ADCSRA |= (1 << ADSC);
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 83       	st	Z, r24
	
	// Wait for the conversion to finsih
	while ((ADCSRA & (1 << ADIF)) == 0);
  fc:	80 81       	ld	r24, Z
  fe:	84 ff       	sbrs	r24, 4
 100:	fd cf       	rjmp	.-6      	; 0xfc <ADC_convert+0x2e>
	
	// Read out the ADC counts
	uint16_t adc_count = ADC;//(ADCL << 0) | (ADCH << 8);
 102:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 106:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	return adc_count;
}
 10a:	08 95       	ret

0000010c <get_doorstate>:
 *  this function gets door state
 *  it returns 1 if door is open and return 0 if door is closed 
 */ 
int get_doorstate(uint16_t adc)
{
	float value = (adc*5.0)/ADC_REF;
 10c:	bc 01       	movw	r22, r24
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 44 06 	call	0xc88	; 0xc88 <__floatunsisf>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	40 ea       	ldi	r20, 0xA0	; 160
 11c:	50 e4       	ldi	r21, 0x40	; 64
 11e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e8       	ldi	r20, 0x80	; 128
 128:	5a e3       	ldi	r21, 0x3A	; 58
 12a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
	
	value = value/SHUNT; // calculate current
	
	if (value >= DOOR_THRESHOLD_CURRENT)//still placeholders for actual values
 12e:	9b 01       	movw	r18, r22
 130:	ac 01       	movw	r20, r24
 132:	0e 94 a4 05 	call	0xb48	; 0xb48 <__addsf3>
 136:	2d ec       	ldi	r18, 0xCD	; 205
 138:	3c ec       	ldi	r19, 0xCC	; 204
 13a:	4c e4       	ldi	r20, 0x4C	; 76
 13c:	5f e3       	ldi	r21, 0x3F	; 63
 13e:	0e 94 f6 06 	call	0xdec	; 0xdec <__gesf2>
	{	
		return Door_Opened; 
	}
	else
	{	
		return Door_Closed; 
 142:	08 2e       	mov	r0, r24
 144:	00 0c       	add	r0, r0
 146:	99 0b       	sbc	r25, r25
 148:	80 95       	com	r24
 14a:	90 95       	com	r25
 14c:	88 27       	eor	r24, r24
 14e:	99 0f       	add	r25, r25
 150:	88 1f       	adc	r24, r24
 152:	99 27       	eor	r25, r25
	}

 154:	01 96       	adiw	r24, 0x01	; 1
 156:	08 95       	ret

00000158 <FSM_start>:
/*
 *  This function represents the FSM that controls the current driver 
 *  as
 */ 
void FSM_start(void)
{	
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	00 d0       	rcall	.+0      	; 0x15e <FSM_start+0x6>
 15e:	00 d0       	rcall	.+0      	; 0x160 <FSM_start+0x8>
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	uint8_t half_Duty_Produced = 0;
	Current_FSM_state = Initialisation_State; // Initialize current state to Initialization state
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Current_FSM_state>
	Door_State = Uknown; // Door state is unknown when programme just started
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Door_State>
	Sample_Coil_Current = 0;
 170:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Sample_Coil_Current>
	Sample_touch_circuit = 0;
 174:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Sample_touch_circuit>
	closing_force_routine_initialized = 0;
 178:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <closing_force_routine_initialized+0x1>
 17c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <closing_force_routine_initialized>
	wait_touch_routine_initialized = 0;
 180:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <wait_touch_routine_initialized+0x1>
 184:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <wait_touch_routine_initialized>
	opening_force_routine_initialized = 0;
 188:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <opening_force_routine_initialized+0x1>
 18c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <opening_force_routine_initialized>
	int sample_touch_flag = 0;
	int first_time_touch_value = 0;
 190:	1c 82       	std	Y+4, r1	; 0x04
 192:	1b 82       	std	Y+3, r1	; 0x03
	Sample_Coil_Current = 0;
	Sample_touch_circuit = 0;
	closing_force_routine_initialized = 0;
	wait_touch_routine_initialized = 0;
	opening_force_routine_initialized = 0;
	int sample_touch_flag = 0;
 194:	1a 82       	std	Y+2, r1	; 0x02
 196:	19 82       	std	Y+1, r1	; 0x01
 *  This function represents the FSM that controls the current driver 
 *  as
 */ 
void FSM_start(void)
{	
	uint8_t half_Duty_Produced = 0;
 198:	31 2c       	mov	r3, r1
					// start a 60 sec timer (time frame for the door opening process)
					START_OPENING_CURRENT_TIMER();
					Coil_Current_Polarity_State = Opening_Force_Current; // change polarity of current
					// provide the duty cycles that will be cycled through (Duty = 0.1 to 0.9)
					duty[0] = 0.1;duty[1] = 0.2;duty[2] = 0.3;duty[3] = 0.4;
					duty[4] = 0.5;duty[5] = 0.6;duty[6] = 0.7;duty[7] = 0.8;duty[8] = 0.9;
 19a:	0f 2e       	mov	r0, r31
 19c:	c1 2c       	mov	r12, r1
 19e:	d1 2c       	mov	r13, r1
 1a0:	e1 2c       	mov	r14, r1
 1a2:	ff e3       	ldi	r31, 0x3F	; 63
 1a4:	ff 2e       	mov	r15, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	0f 2e       	mov	r0, r31
 1aa:	fa e9       	ldi	r31, 0x9A	; 154
 1ac:	4f 2e       	mov	r4, r31
 1ae:	f9 e9       	ldi	r31, 0x99	; 153
 1b0:	5f 2e       	mov	r5, r31
 1b2:	f9 e1       	ldi	r31, 0x19	; 25
 1b4:	6f 2e       	mov	r6, r31
 1b6:	ff e3       	ldi	r31, 0x3F	; 63
 1b8:	7f 2e       	mov	r7, r31
 1ba:	f0 2d       	mov	r31, r0
 1bc:	0f 2e       	mov	r0, r31
 1be:	f3 e3       	ldi	r31, 0x33	; 51
 1c0:	8f 2e       	mov	r8, r31
 1c2:	98 2c       	mov	r9, r8
 1c4:	a8 2c       	mov	r10, r8
 1c6:	ff e3       	ldi	r31, 0x3F	; 63
 1c8:	bf 2e       	mov	r11, r31
 1ca:	f0 2d       	mov	r31, r0
					// restart pwm generation on the coil
					START_8bit_COUNTER2(); 
					// initialize "Generate_Opening_Force_State" state once
					opening_force_routine_initialized = 1;
 1cc:	01 e0       	ldi	r16, 0x01	; 1
 1ce:	10 e0       	ldi	r17, 0x00	; 0
					
				}
			
				break;
			default:
				Current_FSM_state = Initialisation_State;
 1d0:	68 94       	set
 1d2:	22 24       	eor	r2, r2
 1d4:	22 f8       	bld	r2, 2
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <FSM_start+0x84>
							Current_FSM_state = Generate_Opening_Force_State;
							// Enables the "Generate_Opening_Force_State" state to re-initialize
							opening_force_routine_initialized = 0;
						}
						
						sample_touch_flag = 1;
 1d8:	09 83       	std	Y+1, r16	; 0x01
 1da:	1a 83       	std	Y+2, r17	; 0x02
	
	int ccc = 0;
	
	while(1)
	{	
		UART_transmit_number(Current_FSM_state);
 1dc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Current_FSM_state>
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 35 04 	call	0x86a	; 0x86a <UART_transmit_number>
		UART_transmit_string("\n\r");
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 97 03 	call	0x72e	; 0x72e <UART_transmit_string>
		UART_transmit_string("\n\r");
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 97 03 	call	0x72e	; 0x72e <UART_transmit_string>
			

		switch(Current_FSM_state)
 1f6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Current_FSM_state>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	09 f4       	brne	.+2      	; 0x200 <FSM_start+0xa8>
 1fe:	40 c1       	rjmp	.+640    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 200:	20 f4       	brcc	.+8      	; 0x20a <FSM_start+0xb2>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	09 f4       	brne	.+2      	; 0x208 <FSM_start+0xb0>
 206:	75 c0       	rjmp	.+234    	; 0x2f2 <FSM_start+0x19a>
 208:	c7 c1       	rjmp	.+910    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	09 f4       	brne	.+2      	; 0x210 <FSM_start+0xb8>
 20e:	eb c0       	rjmp	.+470    	; 0x3e6 <FSM_start+0x28e>
 210:	84 30       	cpi	r24, 0x04	; 4
 212:	09 f0       	breq	.+2      	; 0x216 <FSM_start+0xbe>
 214:	c1 c1       	rjmp	.+898    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
		{
			case Initialisation_State:
					
				UART_transmit_number(99);
 216:	83 e6       	ldi	r24, 0x63	; 99
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 35 04 	call	0x86a	; 0x86a <UART_transmit_number>
				if(!half_Duty_Produced)
 21e:	31 10       	cpse	r3, r1
 220:	4d c0       	rjmp	.+154    	; 0x2bc <FSM_start+0x164>
				{	
					 // initialize duty cycle to 50% for sensing
					duty[0] = 0.5;duty[1] = 0.5;duty[2] = 0.5;duty[3] = 0.5;
 222:	aa e1       	ldi	r26, 0x1A	; 26
 224:	b1 e0       	ldi	r27, 0x01	; 1
 226:	cd 92       	st	X+, r12
 228:	dd 92       	st	X+, r13
 22a:	ed 92       	st	X+, r14
 22c:	fc 92       	st	X, r15
 22e:	13 97       	sbiw	r26, 0x03	; 3
 230:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <duty+0x4>
 234:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <duty+0x5>
 238:	e0 92 20 01 	sts	0x0120, r14	; 0x800120 <duty+0x6>
 23c:	f0 92 21 01 	sts	0x0121, r15	; 0x800121 <duty+0x7>
 240:	c0 92 22 01 	sts	0x0122, r12	; 0x800122 <duty+0x8>
 244:	d0 92 23 01 	sts	0x0123, r13	; 0x800123 <duty+0x9>
 248:	e0 92 24 01 	sts	0x0124, r14	; 0x800124 <duty+0xa>
 24c:	f0 92 25 01 	sts	0x0125, r15	; 0x800125 <duty+0xb>
 250:	c0 92 26 01 	sts	0x0126, r12	; 0x800126 <duty+0xc>
 254:	d0 92 27 01 	sts	0x0127, r13	; 0x800127 <duty+0xd>
 258:	e0 92 28 01 	sts	0x0128, r14	; 0x800128 <duty+0xe>
 25c:	f0 92 29 01 	sts	0x0129, r15	; 0x800129 <duty+0xf>
					duty[4] = 0.5;duty[5] = 0.5;duty[6] = 0.5;duty[7] = 0.5;duty[8] = 0.5;
 260:	c0 92 2a 01 	sts	0x012A, r12	; 0x80012a <duty+0x10>
 264:	d0 92 2b 01 	sts	0x012B, r13	; 0x80012b <duty+0x11>
 268:	e0 92 2c 01 	sts	0x012C, r14	; 0x80012c <duty+0x12>
 26c:	f0 92 2d 01 	sts	0x012D, r15	; 0x80012d <duty+0x13>
 270:	c0 92 2e 01 	sts	0x012E, r12	; 0x80012e <duty+0x14>
 274:	d0 92 2f 01 	sts	0x012F, r13	; 0x80012f <duty+0x15>
 278:	e0 92 30 01 	sts	0x0130, r14	; 0x800130 <duty+0x16>
 27c:	f0 92 31 01 	sts	0x0131, r15	; 0x800131 <duty+0x17>
 280:	c0 92 32 01 	sts	0x0132, r12	; 0x800132 <duty+0x18>
 284:	d0 92 33 01 	sts	0x0133, r13	; 0x800133 <duty+0x19>
 288:	e0 92 34 01 	sts	0x0134, r14	; 0x800134 <duty+0x1a>
 28c:	f0 92 35 01 	sts	0x0135, r15	; 0x800135 <duty+0x1b>
 290:	c0 92 36 01 	sts	0x0136, r12	; 0x800136 <duty+0x1c>
 294:	d0 92 37 01 	sts	0x0137, r13	; 0x800137 <duty+0x1d>
 298:	e0 92 38 01 	sts	0x0138, r14	; 0x800138 <duty+0x1e>
 29c:	f0 92 39 01 	sts	0x0139, r15	; 0x800139 <duty+0x1f>
 2a0:	c0 92 3a 01 	sts	0x013A, r12	; 0x80013a <duty+0x20>
 2a4:	d0 92 3b 01 	sts	0x013B, r13	; 0x80013b <duty+0x21>
 2a8:	e0 92 3c 01 	sts	0x013C, r14	; 0x80013c <duty+0x22>
 2ac:	f0 92 3d 01 	sts	0x013D, r15	; 0x80013d <duty+0x23>
					Coil_Current_Polarity_State = Opening_Force_Current; // generate a opening force
 2b0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Coil_Current_Polarity_State>
					START_8bit_COUNTER2();
 2b4:	0e 94 ef 02 	call	0x5de	; 0x5de <START_8bit_COUNTER2>
					half_Duty_Produced = 1;
 2b8:	33 24       	eor	r3, r3
 2ba:	33 94       	inc	r3
				}
				
				if(Sample_Coil_Current)
 2bc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Sample_Coil_Current>
 2c0:	88 23       	and	r24, r24
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <FSM_start+0x16e>
 2c4:	8b cf       	rjmp	.-234    	; 0x1dc <FSM_start+0x84>
				{	
					Sample_Coil_Current = 0;
 2c6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Sample_Coil_Current>
					uint16_t adc = ADC_convert(_PC0);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
					Door_State = get_doorstate(adc); // decide if the door is open or not
 2d0:	0e 94 86 00 	call	0x10c	; 0x10c <get_doorstate>
 2d4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Door_State>
					
					if (Door_State==Door_Closed)
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	21 f4       	brne	.+8      	; 0x2e4 <FSM_start+0x18c>
					{	
						// Move to "WaitTouch_State" state 							
						Current_FSM_state= 	WaitTouch_State;					
 2dc:	83 e0       	ldi	r24, 0x03	; 3
 2de:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Current_FSM_state>
 2e2:	7c cf       	rjmp	.-264    	; 0x1dc <FSM_start+0x84>
					}
					
					else if (Door_State==Door_Opened)
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	09 f0       	breq	.+2      	; 0x2ea <FSM_start+0x192>
 2e8:	79 cf       	rjmp	.-270    	; 0x1dc <FSM_start+0x84>
					{	
						// Move to "Generate_Closing_Force_State" state
						Current_FSM_state = Generate_Closing_Force_State;
 2ea:	b1 e0       	ldi	r27, 0x01	; 1
 2ec:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <Current_FSM_state>
 2f0:	75 cf       	rjmp	.-278    	; 0x1dc <FSM_start+0x84>
				break;
			
			case Generate_Closing_Force_State:
					
					
					if(!closing_force_routine_initialized)
 2f2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <closing_force_routine_initialized>
 2f6:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <closing_force_routine_initialized+0x1>
 2fa:	89 2b       	or	r24, r25
 2fc:	09 f0       	breq	.+2      	; 0x300 <FSM_start+0x1a8>
 2fe:	5a c0       	rjmp	.+180    	; 0x3b4 <FSM_start+0x25c>
					{
					STOP_8bit_COUNTER2(); // stops the coil pwm generator
 300:	0e 94 f7 02 	call	0x5ee	; 0x5ee <STOP_8bit_COUNTER2>
					Coil_Current_Polarity_State = Closing_Force_Current;
 304:	e1 e0       	ldi	r30, 0x01	; 1
 306:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <Coil_Current_Polarity_State>
					// initialize duty cycle to 50% for sensing
					duty[0] = 0.5;duty[1] = 0.6;duty[2] = 0.7;duty[3] = 0.8;
 30a:	aa e1       	ldi	r26, 0x1A	; 26
 30c:	b1 e0       	ldi	r27, 0x01	; 1
 30e:	cd 92       	st	X+, r12
 310:	dd 92       	st	X+, r13
 312:	ed 92       	st	X+, r14
 314:	fc 92       	st	X, r15
 316:	13 97       	sbiw	r26, 0x03	; 3
 318:	40 92 1e 01 	sts	0x011E, r4	; 0x80011e <duty+0x4>
 31c:	50 92 1f 01 	sts	0x011F, r5	; 0x80011f <duty+0x5>
 320:	60 92 20 01 	sts	0x0120, r6	; 0x800120 <duty+0x6>
 324:	70 92 21 01 	sts	0x0121, r7	; 0x800121 <duty+0x7>
 328:	80 92 22 01 	sts	0x0122, r8	; 0x800122 <duty+0x8>
 32c:	90 92 23 01 	sts	0x0123, r9	; 0x800123 <duty+0x9>
 330:	a0 92 24 01 	sts	0x0124, r10	; 0x800124 <duty+0xa>
 334:	b0 92 25 01 	sts	0x0125, r11	; 0x800125 <duty+0xb>
 338:	8d ec       	ldi	r24, 0xCD	; 205
 33a:	9c ec       	ldi	r25, 0xCC	; 204
 33c:	ac e4       	ldi	r26, 0x4C	; 76
 33e:	bf e3       	ldi	r27, 0x3F	; 63
 340:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <duty+0xc>
 344:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <duty+0xd>
 348:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <duty+0xe>
 34c:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <duty+0xf>
					duty[4] = 0.9;duty[5] = 0.5;duty[6] = 0.5;duty[7] = 0.5;duty[8] = 0.5;	
 350:	86 e6       	ldi	r24, 0x66	; 102
 352:	96 e6       	ldi	r25, 0x66	; 102
 354:	a6 e6       	ldi	r26, 0x66	; 102
 356:	bf e3       	ldi	r27, 0x3F	; 63
 358:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <duty+0x10>
 35c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <duty+0x11>
 360:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <duty+0x12>
 364:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <duty+0x13>
 368:	c0 92 2e 01 	sts	0x012E, r12	; 0x80012e <duty+0x14>
 36c:	d0 92 2f 01 	sts	0x012F, r13	; 0x80012f <duty+0x15>
 370:	e0 92 30 01 	sts	0x0130, r14	; 0x800130 <duty+0x16>
 374:	f0 92 31 01 	sts	0x0131, r15	; 0x800131 <duty+0x17>
 378:	c0 92 32 01 	sts	0x0132, r12	; 0x800132 <duty+0x18>
 37c:	d0 92 33 01 	sts	0x0133, r13	; 0x800133 <duty+0x19>
 380:	e0 92 34 01 	sts	0x0134, r14	; 0x800134 <duty+0x1a>
 384:	f0 92 35 01 	sts	0x0135, r15	; 0x800135 <duty+0x1b>
 388:	c0 92 36 01 	sts	0x0136, r12	; 0x800136 <duty+0x1c>
 38c:	d0 92 37 01 	sts	0x0137, r13	; 0x800137 <duty+0x1d>
 390:	e0 92 38 01 	sts	0x0138, r14	; 0x800138 <duty+0x1e>
 394:	f0 92 39 01 	sts	0x0139, r15	; 0x800139 <duty+0x1f>
 398:	c0 92 3a 01 	sts	0x013A, r12	; 0x80013a <duty+0x20>
 39c:	d0 92 3b 01 	sts	0x013B, r13	; 0x80013b <duty+0x21>
 3a0:	e0 92 3c 01 	sts	0x013C, r14	; 0x80013c <duty+0x22>
 3a4:	f0 92 3d 01 	sts	0x013D, r15	; 0x80013d <duty+0x23>
					//TODO -------------------------------------------> start a timer
					// ----------------------------------------------->delay , whhile timer dint expire
					START_8bit_COUNTER2(); // restart the coil pwm generator
 3a8:	0e 94 ef 02 	call	0x5de	; 0x5de <START_8bit_COUNTER2>
					
					//  Initialize "Generate_Closing_Force_State" state once
					closing_force_routine_initialized = 1;
 3ac:	00 93 17 01 	sts	0x0117, r16	; 0x800117 <closing_force_routine_initialized>
 3b0:	10 93 18 01 	sts	0x0118, r17	; 0x800118 <closing_force_routine_initialized+0x1>
					}
					
					if(Sample_Coil_Current)
 3b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Sample_Coil_Current>
 3b8:	88 23       	and	r24, r24
 3ba:	09 f4       	brne	.+2      	; 0x3be <FSM_start+0x266>
 3bc:	0f cf       	rjmp	.-482    	; 0x1dc <FSM_start+0x84>
					{
						Sample_Coil_Current = 0;
 3be:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Sample_Coil_Current>
						uint16_t adc_closing_current = ADC_convert(_PC0);
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
						Door_State = get_doorstate(adc_closing_current); // decide if the door is open or not
 3c8:	0e 94 86 00 	call	0x10c	; 0x10c <get_doorstate>
 3cc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Door_State>
						
						if (Door_State==Door_Closed)
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <FSM_start+0x27e>
 3d4:	03 cf       	rjmp	.-506    	; 0x1dc <FSM_start+0x84>
						{
							// Move to "WaitTouch_State" state				
							Current_FSM_state= 	WaitTouch_State;
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Current_FSM_state>
							// Enables the "WaitTouch_State" to re-initialize
							wait_touch_routine_initialized = 0;
 3dc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <wait_touch_routine_initialized+0x1>
 3e0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <wait_touch_routine_initialized>
 3e4:	fb ce       	rjmp	.-522    	; 0x1dc <FSM_start+0x84>
				break;
				
			case WaitTouch_State:
				
				
				if(!wait_touch_routine_initialized)
 3e6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <wait_touch_routine_initialized>
 3ea:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <wait_touch_routine_initialized+0x1>
 3ee:	89 2b       	or	r24, r25
 3f0:	51 f4       	brne	.+20     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				{	
					// stop pmw on the coil
					STOP_8bit_COUNTER2();
 3f2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <STOP_8bit_COUNTER2>
					// Initialize 16bit timer to fast pwm mode
					COUNTER_16bit_timer1_init();
 3f6:	0e 94 1a 03 	call	0x634	; 0x634 <COUNTER_16bit_timer1_init>
					// start the 1KHz pwm generation
					START_16bit_COUNTER1();
 3fa:	0e 94 36 03 	call	0x66c	; 0x66c <START_16bit_COUNTER1>
					// Intialize "WaitTouch_State" only once
					wait_touch_routine_initialized = 1;
 3fe:	00 93 15 01 	sts	0x0115, r16	; 0x800115 <wait_touch_routine_initialized>
 402:	10 93 16 01 	sts	0x0116, r17	; 0x800116 <wait_touch_routine_initialized+0x1>
				}
				
				if(Sample_touch_circuit) // Sample touch circuit at falling edge of 1Hz pwm
 406:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Sample_touch_circuit>
 40a:	88 23       	and	r24, r24
 40c:	09 f4       	brne	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40e:	e6 ce       	rjmp	.-564    	; 0x1dc <FSM_start+0x84>
				{	
					Sample_touch_circuit = 0;
 410:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Sample_touch_circuit>
					uint16_t touch_adc = ADC_convert(_PC1); // sample the voltage at the touch sensor
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
					
					if(sample_touch_flag)
 41a:	a9 81       	ldd	r26, Y+1	; 0x01
 41c:	ba 81       	ldd	r27, Y+2	; 0x02
 41e:	ab 2b       	or	r26, r27
 420:	79 f0       	breq	.+30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
					{
						uint16_t value_prev = ADC_convert(_PC1);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
	Sample_touch_circuit = 0;
	closing_force_routine_initialized = 0;
	wait_touch_routine_initialized = 0;
	opening_force_routine_initialized = 0;
	int sample_touch_flag = 0;
	int first_time_touch_value = 0;
 428:	30 2f       	mov	r19, r16
 42a:	21 2f       	mov	r18, r17
 42c:	81 3d       	cpi	r24, 0xD1	; 209
 42e:	93 40       	sbci	r25, 0x03	; 3
 430:	10 f0       	brcs	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	3b 83       	std	Y+3, r19	; 0x03
 438:	2c 83       	std	Y+4, r18	; 0x04
						else
						{
							first_time_touch_value = 1; //door touched
						}
						
						sample_touch_flag = 0;
 43a:	1a 82       	std	Y+2, r1	; 0x02
 43c:	19 82       	std	Y+1, r1	; 0x01
 43e:	ce ce       	rjmp	.-612    	; 0x1dc <FSM_start+0x84>
					}
					else
					{
						uint16_t value_current = ADC_convert(_PC1);
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
						else
						{	
							second_time_touch_value = 1; //door touched
						}
						
						if(first_time_touch_value*second_time_touch_value == 1) //door grabbed for at least 1 second
 446:	20 2f       	mov	r18, r16
 448:	31 2f       	mov	r19, r17
 44a:	81 3d       	cpi	r24, 0xD1	; 209
 44c:	93 40       	sbci	r25, 0x03	; 3
 44e:	10 f0       	brcs	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	4b 81       	ldd	r20, Y+3	; 0x03
 456:	5c 81       	ldd	r21, Y+4	; 0x04
 458:	24 9f       	mul	r18, r20
 45a:	c0 01       	movw	r24, r0
 45c:	25 9f       	mul	r18, r21
 45e:	90 0d       	add	r25, r0
 460:	34 9f       	mul	r19, r20
 462:	90 0d       	add	r25, r0
 464:	11 24       	eor	r1, r1
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	09 f0       	breq	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	b6 ce       	rjmp	.-660    	; 0x1d8 <FSM_start+0x80>
						{	
							// Move to "Generate_Opening_Force_State" state
							Current_FSM_state = Generate_Opening_Force_State;
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Current_FSM_state>
							// Enables the "Generate_Opening_Force_State" state to re-initialize
							opening_force_routine_initialized = 0;
 472:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <opening_force_routine_initialized+0x1>
 476:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <opening_force_routine_initialized>
						}
						
						sample_touch_flag = 1;
 47a:	09 83       	std	Y+1, r16	; 0x01
 47c:	1a 83       	std	Y+2, r17	; 0x02
 47e:	ae ce       	rjmp	.-676    	; 0x1dc <FSM_start+0x84>
				
				break;	
				
			case Generate_Opening_Force_State:
								
				if(!opening_force_routine_initialized)
 480:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <opening_force_routine_initialized>
 484:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <opening_force_routine_initialized+0x1>
 488:	89 2b       	or	r24, r25
 48a:	09 f0       	breq	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	6c c0       	rjmp	.+216    	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
				{	
					// turn off the fast pwm generator
					STOP_16bit_COUNTER1(); 
 48e:	0e 94 43 03 	call	0x686	; 0x686 <STOP_16bit_COUNTER1>
					// Configures the 16bit timer to be a 60 sec timer
					OPENING_CURRENT_TIMER_config();
 492:	0e 94 49 03 	call	0x692	; 0x692 <OPENING_CURRENT_TIMER_config>
					// start a 60 sec timer (time frame for the door opening process)
					START_OPENING_CURRENT_TIMER();
 496:	0e 94 62 03 	call	0x6c4	; 0x6c4 <START_OPENING_CURRENT_TIMER>
					Coil_Current_Polarity_State = Opening_Force_Current; // change polarity of current
 49a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Coil_Current_Polarity_State>
					// provide the duty cycles that will be cycled through (Duty = 0.1 to 0.9)
					duty[0] = 0.1;duty[1] = 0.2;duty[2] = 0.3;duty[3] = 0.4;
 49e:	8d ec       	ldi	r24, 0xCD	; 205
 4a0:	9c ec       	ldi	r25, 0xCC	; 204
 4a2:	ac ec       	ldi	r26, 0xCC	; 204
 4a4:	bd e3       	ldi	r27, 0x3D	; 61
 4a6:	ea e1       	ldi	r30, 0x1A	; 26
 4a8:	f1 e0       	ldi	r31, 0x01	; 1
 4aa:	80 83       	st	Z, r24
 4ac:	91 83       	std	Z+1, r25	; 0x01
 4ae:	a2 83       	std	Z+2, r26	; 0x02
 4b0:	b3 83       	std	Z+3, r27	; 0x03
 4b2:	8d ec       	ldi	r24, 0xCD	; 205
 4b4:	9c ec       	ldi	r25, 0xCC	; 204
 4b6:	ac e4       	ldi	r26, 0x4C	; 76
 4b8:	be e3       	ldi	r27, 0x3E	; 62
 4ba:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <duty+0x4>
 4be:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <duty+0x5>
 4c2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <duty+0x6>
 4c6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <duty+0x7>
 4ca:	8a e9       	ldi	r24, 0x9A	; 154
 4cc:	99 e9       	ldi	r25, 0x99	; 153
 4ce:	a9 e9       	ldi	r26, 0x99	; 153
 4d0:	be e3       	ldi	r27, 0x3E	; 62
 4d2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <duty+0x8>
 4d6:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <duty+0x9>
 4da:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <duty+0xa>
 4de:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <duty+0xb>
 4e2:	8d ec       	ldi	r24, 0xCD	; 205
 4e4:	9c ec       	ldi	r25, 0xCC	; 204
 4e6:	ac ec       	ldi	r26, 0xCC	; 204
 4e8:	be e3       	ldi	r27, 0x3E	; 62
 4ea:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <duty+0xc>
 4ee:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <duty+0xd>
 4f2:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <duty+0xe>
 4f6:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <duty+0xf>
					duty[4] = 0.5;duty[5] = 0.6;duty[6] = 0.7;duty[7] = 0.8;duty[8] = 0.9;
 4fa:	c0 92 2a 01 	sts	0x012A, r12	; 0x80012a <duty+0x10>
 4fe:	d0 92 2b 01 	sts	0x012B, r13	; 0x80012b <duty+0x11>
 502:	e0 92 2c 01 	sts	0x012C, r14	; 0x80012c <duty+0x12>
 506:	f0 92 2d 01 	sts	0x012D, r15	; 0x80012d <duty+0x13>
 50a:	40 92 2e 01 	sts	0x012E, r4	; 0x80012e <duty+0x14>
 50e:	50 92 2f 01 	sts	0x012F, r5	; 0x80012f <duty+0x15>
 512:	60 92 30 01 	sts	0x0130, r6	; 0x800130 <duty+0x16>
 516:	70 92 31 01 	sts	0x0131, r7	; 0x800131 <duty+0x17>
 51a:	80 92 32 01 	sts	0x0132, r8	; 0x800132 <duty+0x18>
 51e:	90 92 33 01 	sts	0x0133, r9	; 0x800133 <duty+0x19>
 522:	a0 92 34 01 	sts	0x0134, r10	; 0x800134 <duty+0x1a>
 526:	b0 92 35 01 	sts	0x0135, r11	; 0x800135 <duty+0x1b>
 52a:	8d ec       	ldi	r24, 0xCD	; 205
 52c:	9c ec       	ldi	r25, 0xCC	; 204
 52e:	ac e4       	ldi	r26, 0x4C	; 76
 530:	bf e3       	ldi	r27, 0x3F	; 63
 532:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <duty+0x1c>
 536:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <duty+0x1d>
 53a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <duty+0x1e>
 53e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <duty+0x1f>
 542:	86 e6       	ldi	r24, 0x66	; 102
 544:	96 e6       	ldi	r25, 0x66	; 102
 546:	a6 e6       	ldi	r26, 0x66	; 102
 548:	bf e3       	ldi	r27, 0x3F	; 63
 54a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <duty+0x20>
 54e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <duty+0x21>
 552:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <duty+0x22>
 556:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <duty+0x23>
					// restart pwm generation on the coil
					START_8bit_COUNTER2(); 
 55a:	0e 94 ef 02 	call	0x5de	; 0x5de <START_8bit_COUNTER2>
					// initialize "Generate_Opening_Force_State" state once
					opening_force_routine_initialized = 1;
 55e:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <opening_force_routine_initialized>
 562:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <opening_force_routine_initialized+0x1>
				}
				
				if(Sample_Coil_Current)
 566:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Sample_Coil_Current>
 56a:	88 23       	and	r24, r24
 56c:	09 f4       	brne	.+2      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 56e:	36 ce       	rjmp	.-916    	; 0x1dc <FSM_start+0x84>
				{
					
					Sample_Coil_Current = 0;
 570:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Sample_Coil_Current>
					uint16_t adc_opening_current = ADC_convert(_PC0);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
					Door_State = get_doorstate(adc_opening_current); // decide if the door is open or not
 57a:	0e 94 86 00 	call	0x10c	; 0x10c <get_doorstate>
 57e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Door_State>
					
					if (Door_State==Door_Opened)
 582:	82 30       	cpi	r24, 0x02	; 2
 584:	09 f0       	breq	.+2      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 586:	2a ce       	rjmp	.-940    	; 0x1dc <FSM_start+0x84>
					{	
						//Move to "Generate_Closing_Force_State" state to provide closing force
						Current_FSM_state = Generate_Closing_Force_State;
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Current_FSM_state>
						// Enables the "Generate_Closing_Force_State" state to re-initialize
						closing_force_routine_initialized = 0;
 58e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <closing_force_routine_initialized+0x1>
 592:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <closing_force_routine_initialized>
 596:	22 ce       	rjmp	.-956    	; 0x1dc <FSM_start+0x84>
					
				}
			
				break;
			default:
				Current_FSM_state = Initialisation_State;
 598:	20 92 11 01 	sts	0x0111, r2	; 0x800111 <Current_FSM_state>
				break;
 59c:	1f ce       	rjmp	.-962    	; 0x1dc <FSM_start+0x84>

0000059e <COUNTER_8bit_timer2_init>:
 *
 */ 
void COUNTER_8bit_timer2_init(void)
{
	// Set to CTC mode
	TCCR2A |= (1<<WGM21);TCCR2A &= ~(1<<TCCR2A); TCCR2B &= (1<<WGM22);
 59e:	e0 eb       	ldi	r30, 0xB0	; 176
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	82 60       	ori	r24, 0x02	; 2
 5a6:	80 83       	st	Z, r24
 5a8:	30 81       	ld	r19, Z
 5aa:	20 81       	ld	r18, Z
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <COUNTER_8bit_timer2_init+0x18>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	3a 95       	dec	r19
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <COUNTER_8bit_timer2_init+0x14>
 5ba:	80 95       	com	r24
 5bc:	90 95       	com	r25
 5be:	82 23       	and	r24, r18
 5c0:	80 83       	st	Z, r24
 5c2:	e1 eb       	ldi	r30, 0xB1	; 177
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	88 70       	andi	r24, 0x08	; 8
 5ca:	80 83       	st	Z, r24
	
	//Enable ISR when count matches OCR1 value
	TIMSK2 |= (1<<OCIE2A);
 5cc:	e0 e7       	ldi	r30, 0x70	; 112
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	82 60       	ori	r24, 0x02	; 2
 5d4:	80 83       	st	Z, r24
	
	// Initial Value to count to
	OCR2A = 1;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 5dc:	08 95       	ret

000005de <START_8bit_COUNTER2>:
 */ 

void START_8bit_COUNTER2(void)
{		
		// Resets counter value to zero
		TCNT2 = 0;
 5de:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
		// Set prescaller to 1024 and start counting
		TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20);
 5e2:	e1 eb       	ldi	r30, 0xB1	; 177
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	87 60       	ori	r24, 0x07	; 7
 5ea:	80 83       	st	Z, r24
 5ec:	08 95       	ret

000005ee <STOP_8bit_COUNTER2>:
 * This function stops the 16 bit counter 
 */ 
void STOP_8bit_COUNTER2(void)
{		
		// Disconnect clk from timer (Stop the timer)
		TCCR2B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
 5ee:	e1 eb       	ldi	r30, 0xB1	; 177
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	88 7f       	andi	r24, 0xF8	; 248
 5f6:	80 83       	st	Z, r24
 5f8:	08 95       	ret

000005fa <COUNTER_8bit_timer0_init>:
 * This function initializes the 8 bit timer (Timer0/Counter0)
 */ 
void COUNTER_8bit_timer0_init(void)
{
	// Set to CTC mode
	TCCR0A |= (1<<WGM01); TCCR0A &= ~(1<<WGM00);  TCCR0B &= (1<<WGM02);
 5fa:	84 b5       	in	r24, 0x24	; 36
 5fc:	82 60       	ori	r24, 0x02	; 2
 5fe:	84 bd       	out	0x24, r24	; 36
 600:	84 b5       	in	r24, 0x24	; 36
 602:	8e 7f       	andi	r24, 0xFE	; 254
 604:	84 bd       	out	0x24, r24	; 36
 606:	85 b5       	in	r24, 0x25	; 37
 608:	88 70       	andi	r24, 0x08	; 8
 60a:	85 bd       	out	0x25, r24	; 37

	
	//Enable ISR when count matches OCR1 value
	TIMSK0 |= (1<<OCIE0A);
 60c:	ee e6       	ldi	r30, 0x6E	; 110
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	82 60       	ori	r24, 0x02	; 2
 614:	80 83       	st	Z, r24
	
	// Initial Value to count to
	OCR0A = 10;
 616:	8a e0       	ldi	r24, 0x0A	; 10
 618:	87 bd       	out	0x27, r24	; 39
 61a:	08 95       	ret

0000061c <START_8bit_COUNTER0>:
 */ 

void START_8bit_COUNTER0(void)
{		
		// Resets counter value to zero
		TCNT0 = 0;
 61c:	16 bc       	out	0x26, r1	; 38
		// Set prescaller to 1024 and start counting
		TCCR0B |= (1<<CS12); TCCR0B &= ~((1<<CS10) |(1<<CS11));
 61e:	85 b5       	in	r24, 0x25	; 37
 620:	84 60       	ori	r24, 0x04	; 4
 622:	85 bd       	out	0x25, r24	; 37
 624:	85 b5       	in	r24, 0x25	; 37
 626:	8c 7f       	andi	r24, 0xFC	; 252
 628:	85 bd       	out	0x25, r24	; 37
 62a:	08 95       	ret

0000062c <STOP_8bit_COUNTER0>:
 * This function stops the 16 bit counter 
 */ 
void STOP_8bit_COUNTER0(void)
{
		// Disconnect clk from timer (Stop the timer)
		TCCR0B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
 62c:	85 b5       	in	r24, 0x25	; 37
 62e:	88 7f       	andi	r24, 0xF8	; 248
 630:	85 bd       	out	0x25, r24	; 37
 632:	08 95       	ret

00000634 <COUNTER_16bit_timer1_init>:
 * This function initializes the 8 bit timer (Timer2/Counter2)
 */ 
void COUNTER_16bit_timer1_init(void)
{
// Set FAST-PWM mode
TCCR1A |= (1<<WGM11) | (1<<WGM10); TCCR1B |= (1<<WGM13) | (1<<WGM12);
 634:	e0 e8       	ldi	r30, 0x80	; 128
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	83 60       	ori	r24, 0x03	; 3
 63c:	80 83       	st	Z, r24
 63e:	a1 e8       	ldi	r26, 0x81	; 129
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	8c 91       	ld	r24, X
 644:	88 61       	ori	r24, 0x18	; 24
 646:	8c 93       	st	X, r24

// Set PWM period to 1ms
OCR1A = 5;
 648:	85 e0       	ldi	r24, 0x05	; 5
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 650:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

// Disable Intrrupt
TIMSK1 &= ~(1<<OCIE1A);
 654:	af e6       	ldi	r26, 0x6F	; 111
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	8c 91       	ld	r24, X
 65a:	8d 7f       	andi	r24, 0xFD	; 253
 65c:	8c 93       	st	X, r24

//Set inverinting
TCCR1A |= (1<<COM1A0);  TCCR1A &= ~(1<<COM1A1);
 65e:	80 81       	ld	r24, Z
 660:	80 64       	ori	r24, 0x40	; 64
 662:	80 83       	st	Z, r24
 664:	80 81       	ld	r24, Z
 666:	8f 77       	andi	r24, 0x7F	; 127
 668:	80 83       	st	Z, r24
 66a:	08 95       	ret

0000066c <START_16bit_COUNTER1>:
 * This function starts the 8 bit counter2 with a prescale of 256
 */ 
void START_16bit_COUNTER1(void)
{	
	// Reset timer value to zero
	TCNT1 = 0;
 66c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 670:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	// Set prescaller to 64 and start timer
	TCCR1B |= (1<<CS11) | (1<<CS10); TCCR1B &= ~(1<<CS12);
 674:	e1 e8       	ldi	r30, 0x81	; 129
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	83 60       	ori	r24, 0x03	; 3
 67c:	80 83       	st	Z, r24
 67e:	80 81       	ld	r24, Z
 680:	8b 7f       	andi	r24, 0xFB	; 251
 682:	80 83       	st	Z, r24
 684:	08 95       	ret

00000686 <STOP_16bit_COUNTER1>:
 * This function stops the 8 bit counter2 
 */ 
void STOP_16bit_COUNTER1(void)
{
	// Disconnect the timer clock (stop FAST PWM generation)
	TCCR1B &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
 686:	e1 e8       	ldi	r30, 0x81	; 129
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	88 7f       	andi	r24, 0xF8	; 248
 68e:	80 83       	st	Z, r24
 690:	08 95       	ret

00000692 <OPENING_CURRENT_TIMER_config>:
 * This function initializes the 16 bit timer (Timer1/Counter1) to timeout after 60 seconds (this timer is the 16bit timer)
 */ 
void OPENING_CURRENT_TIMER_config(void)
{	
	// Set to CTC mode
	TCCR1A &= ~((1<<WGM10) | (1<<WGM11)); TCCR1B &= ~(1<<WGM13); TCCR1B |= (1<<WGM12);
 692:	e0 e8       	ldi	r30, 0x80	; 128
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	8c 7f       	andi	r24, 0xFC	; 252
 69a:	80 83       	st	Z, r24
 69c:	e1 e8       	ldi	r30, 0x81	; 129
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	8f 7e       	andi	r24, 0xEF	; 239
 6a4:	80 83       	st	Z, r24
 6a6:	80 81       	ld	r24, Z
 6a8:	88 60       	ori	r24, 0x08	; 8
 6aa:	80 83       	st	Z, r24
	
	// Set timeout to be 60 sec
	OCR1A = 46874;
 6ac:	8a e1       	ldi	r24, 0x1A	; 26
 6ae:	97 eb       	ldi	r25, 0xB7	; 183
 6b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 6b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	// Trigger ISR when timer is up (Timer matches OCR1A value)
	TIMSK1 |= (1<<OCIE1A);
 6b8:	ef e6       	ldi	r30, 0x6F	; 111
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	82 60       	ori	r24, 0x02	; 2
 6c0:	80 83       	st	Z, r24
 6c2:	08 95       	ret

000006c4 <START_OPENING_CURRENT_TIMER>:
 * This function this function starts a 60 second timer (this timer is the 16bit timer)
 */ 
void START_OPENING_CURRENT_TIMER(void)
{	
	// Set prescaller to 1024
	TCCR1B |= (1<<CS12) | (1<<CS10); TCCR1B &= (1<<CS11);
 6c4:	e1 e8       	ldi	r30, 0x81	; 129
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	85 60       	ori	r24, 0x05	; 5
 6cc:	80 83       	st	Z, r24
 6ce:	80 81       	ld	r24, Z
 6d0:	82 70       	andi	r24, 0x02	; 2
 6d2:	80 83       	st	Z, r24
 6d4:	08 95       	ret

000006d6 <STOP_OPENING_CURRENT_TIMER>:
 * This function stops the 60 second timer "OPENING_CURRENT_TIMER" (this timer is the 16bit timer)
 */ 
void STOP_OPENING_CURRENT_TIMER(void)
{
	// Disconnect the timer clock (stop FAST PWM generation)
	TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
 6d6:	e1 e8       	ldi	r30, 0x81	; 129
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	88 7f       	andi	r24, 0xF8	; 248
 6de:	80 83       	st	Z, r24
 6e0:	08 95       	ret

000006e2 <INIT_EXTERNAL_ISR>:
 * This function initialise the external interupt module
 */ 
void INIT_EXTERNAL_ISR(void)
{	
	// Enable external isr on pin PD2
	EIMSK |= (1<<INT0);
 6e2:	e8 9a       	sbi	0x1d, 0	; 29
	// trigger ISR on falling edge
	EICRA |= (1<<ISC01); //EICRA &= ~(1<<ISC00);
 6e4:	e9 e6       	ldi	r30, 0x69	; 105
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	82 60       	ori	r24, 0x02	; 2
 6ec:	80 83       	st	Z, r24
 6ee:	08 95       	ret

000006f0 <GPIO_init>:
 * This function initializes all pins to Vcc
 */ 
void GPIO_init(void)
{
	// Set all pins to output
	DDRD = 0xFF; DDRC = 0xFF; DDRB = 0xFF;
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
 6f2:	8a b9       	out	0x0a, r24	; 10
 6f4:	87 b9       	out	0x07, r24	; 7
 6f6:	84 b9       	out	0x04, r24	; 4
	
	// Set all pins to High
	PORTD = 0xFF; PORTC = 0xFF; PORTB = 0xFF;
 6f8:	8b b9       	out	0x0b, r24	; 11
 6fa:	88 b9       	out	0x08, r24	; 8
 6fc:	85 b9       	out	0x05, r24	; 5
	
	DDRC &= ~(1<<DDC0); // set PCO input pin
 6fe:	38 98       	cbi	0x07, 0	; 7
	PORTC &= ~(1<<DDC0);
 700:	40 98       	cbi	0x08, 0	; 8
	
	DDRD &= ~(1<<DDD2); // set PD2 as input pin
 702:	52 98       	cbi	0x0a, 2	; 10
	
	DDRC &= ~(1<<DDC1); // set touch sensor pin to input (adc input)
 704:	39 98       	cbi	0x07, 1	; 7
 706:	08 95       	ret

00000708 <UART_init>:
 * This function initializes the UART
 * 
 */
void UART_init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr>>8);
 708:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
 70c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 710:	88 e1       	ldi	r24, 0x18	; 24
 712:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (3<<UCSZ00);
 716:	86 e0       	ldi	r24, 0x06	; 6
 718:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 71c:	08 95       	ret

0000071e <UART_transmit_char>:
 * This function transmit a character serially via UART
 * 
 */
void UART_transmit_char(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));
 71e:	e0 ec       	ldi	r30, 0xC0	; 192
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	90 81       	ld	r25, Z
 724:	95 ff       	sbrs	r25, 5
 726:	fd cf       	rjmp	.-6      	; 0x722 <UART_transmit_char+0x4>
	UDR0 = data;
 728:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 72c:	08 95       	ret

0000072e <UART_transmit_string>:
/*
 * This function transmit a string serially via UART
 * 
 */
void UART_transmit_string(char *str)
{
 72e:	ef 92       	push	r14
 730:	ff 92       	push	r15
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	8c 01       	movw	r16, r24
 73c:	7c 01       	movw	r14, r24
	int i;
	for(i = 0; i < strlen(str); i++) {
 73e:	c0 e0       	ldi	r28, 0x00	; 0
 740:	d0 e0       	ldi	r29, 0x00	; 0
 742:	06 c0       	rjmp	.+12     	; 0x750 <UART_transmit_string+0x22>
		UART_transmit_char(str[i]);
 744:	f7 01       	movw	r30, r14
 746:	81 91       	ld	r24, Z+
 748:	7f 01       	movw	r14, r30
 74a:	0e 94 8f 03 	call	0x71e	; 0x71e <UART_transmit_char>
 * 
 */
void UART_transmit_string(char *str)
{
	int i;
	for(i = 0; i < strlen(str); i++) {
 74e:	21 96       	adiw	r28, 0x01	; 1
 750:	f8 01       	movw	r30, r16
 752:	01 90       	ld	r0, Z+
 754:	00 20       	and	r0, r0
 756:	e9 f7       	brne	.-6      	; 0x752 <UART_transmit_string+0x24>
 758:	31 97       	sbiw	r30, 0x01	; 1
 75a:	e0 1b       	sub	r30, r16
 75c:	f1 0b       	sbc	r31, r17
 75e:	ce 17       	cp	r28, r30
 760:	df 07       	cpc	r29, r31
 762:	80 f3       	brcs	.-32     	; 0x744 <UART_transmit_string+0x16>
		UART_transmit_char(str[i]);
	}
}
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	ff 90       	pop	r15
 76e:	ef 90       	pop	r14
 770:	08 95       	ret

00000772 <uart_transmit_byte>:
 * This function transmits a byte serially via UART
 */
void uart_transmit_byte(uint8_t byte)
{
	// Wait for the UART data register empty flag
	while ((UCSR0A & 0x20) == 0) {
 772:	e0 ec       	ldi	r30, 0xC0	; 192
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	90 81       	ld	r25, Z
 778:	95 ff       	sbrs	r25, 5
 77a:	fd cf       	rjmp	.-6      	; 0x776 <uart_transmit_byte+0x4>
		;
	}
	
	// Put the byte to be sent into the data register
	UDR0 = byte;
 77c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 780:	08 95       	ret

00000782 <UART_transmit>:

/* 
 * This function transmits an array of byte serially via UART
 */
void UART_transmit(uint8_t* byte_array, uint32_t byte_array_length)
{
 782:	8f 92       	push	r8
 784:	9f 92       	push	r9
 786:	af 92       	push	r10
 788:	bf 92       	push	r11
 78a:	cf 92       	push	r12
 78c:	df 92       	push	r13
 78e:	ef 92       	push	r14
 790:	ff 92       	push	r15
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
	// Loop through each byte
	for (uint32_t i = 0; i < byte_array_length; i++) {
 796:	41 15       	cp	r20, r1
 798:	51 05       	cpc	r21, r1
 79a:	61 05       	cpc	r22, r1
 79c:	71 05       	cpc	r23, r1
 79e:	a1 f0       	breq	.+40     	; 0x7c8 <UART_transmit+0x46>
 7a0:	4a 01       	movw	r8, r20
 7a2:	5b 01       	movw	r10, r22
 7a4:	c8 2f       	mov	r28, r24
 7a6:	d9 2f       	mov	r29, r25
 7a8:	c1 2c       	mov	r12, r1
 7aa:	d1 2c       	mov	r13, r1
 7ac:	76 01       	movw	r14, r12
		// Transmit it via the UART
		uart_transmit_byte(byte_array[i]);
 7ae:	89 91       	ld	r24, Y+
 7b0:	0e 94 b9 03 	call	0x772	; 0x772 <uart_transmit_byte>
 * This function transmits an array of byte serially via UART
 */
void UART_transmit(uint8_t* byte_array, uint32_t byte_array_length)
{
	// Loop through each byte
	for (uint32_t i = 0; i < byte_array_length; i++) {
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	c8 1a       	sub	r12, r24
 7b8:	d8 0a       	sbc	r13, r24
 7ba:	e8 0a       	sbc	r14, r24
 7bc:	f8 0a       	sbc	r15, r24
 7be:	8c 14       	cp	r8, r12
 7c0:	9d 04       	cpc	r9, r13
 7c2:	ae 04       	cpc	r10, r14
 7c4:	bf 04       	cpc	r11, r15
 7c6:	99 f7       	brne	.-26     	; 0x7ae <UART_transmit+0x2c>
		// Transmit it via the UART
		uart_transmit_byte(byte_array[i]);
	}
}
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	ff 90       	pop	r15
 7ce:	ef 90       	pop	r14
 7d0:	df 90       	pop	r13
 7d2:	cf 90       	pop	r12
 7d4:	bf 90       	pop	r11
 7d6:	af 90       	pop	r10
 7d8:	9f 90       	pop	r9
 7da:	8f 90       	pop	r8
 7dc:	08 95       	ret

000007de <int2str>:
 * e.g int a = 123
 * becomes b[3] = {"1","2","3"} 
 */

uint32_t int2str(uint16_t number, uint8_t* buffer)
{
 7de:	cf 92       	push	r12
 7e0:	df 92       	push	r13
 7e2:	ef 92       	push	r14
 7e4:	ff 92       	push	r15
 7e6:	ac 01       	movw	r20, r24
	uint32_t i = 0;
	
	if(number == 0) buffer[0] = 0;
 7e8:	89 2b       	or	r24, r25
 7ea:	31 f4       	brne	.+12     	; 0x7f8 <int2str+0x1a>
 7ec:	fb 01       	movw	r30, r22
 7ee:	10 82       	st	Z, r1
 7f0:	c1 2c       	mov	r12, r1
 7f2:	d1 2c       	mov	r13, r1
 7f4:	76 01       	movw	r14, r12
 7f6:	32 c0       	rjmp	.+100    	; 0x85c <int2str+0x7e>
 7f8:	fb 01       	movw	r30, r22
 7fa:	c1 2c       	mov	r12, r1
 7fc:	d1 2c       	mov	r13, r1
 7fe:	76 01       	movw	r14, r12
	while(number != 0)
	{
		buffer[i] = (number%10) + 48;
 800:	9a 01       	movw	r18, r20
 802:	ad ec       	ldi	r26, 0xCD	; 205
 804:	bc ec       	ldi	r27, 0xCC	; 204
 806:	0e 94 7c 07 	call	0xef8	; 0xef8 <__umulhisi3>
 80a:	96 95       	lsr	r25
 80c:	87 95       	ror	r24
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	96 95       	lsr	r25
 814:	87 95       	ror	r24
 816:	9c 01       	movw	r18, r24
 818:	22 0f       	add	r18, r18
 81a:	33 1f       	adc	r19, r19
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	82 0f       	add	r24, r18
 82a:	93 1f       	adc	r25, r19
 82c:	9a 01       	movw	r18, r20
 82e:	28 1b       	sub	r18, r24
 830:	39 0b       	sbc	r19, r25
 832:	c9 01       	movw	r24, r18
 834:	80 5d       	subi	r24, 0xD0	; 208
 836:	81 93       	st	Z+, r24
		number = number/10;
 838:	9a 01       	movw	r18, r20
 83a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__umulhisi3>
 83e:	ac 01       	movw	r20, r24
 840:	56 95       	lsr	r21
 842:	47 95       	ror	r20
 844:	56 95       	lsr	r21
 846:	47 95       	ror	r20
 848:	56 95       	lsr	r21
 84a:	47 95       	ror	r20
		i++;
 84c:	3f ef       	ldi	r19, 0xFF	; 255
 84e:	c3 1a       	sub	r12, r19
 850:	d3 0a       	sbc	r13, r19
 852:	e3 0a       	sbc	r14, r19
 854:	f3 0a       	sbc	r15, r19
uint32_t int2str(uint16_t number, uint8_t* buffer)
{
	uint32_t i = 0;
	
	if(number == 0) buffer[0] = 0;
	while(number != 0)
 856:	41 15       	cp	r20, r1
 858:	51 05       	cpc	r21, r1
 85a:	91 f6       	brne	.-92     	; 0x800 <int2str+0x22>
	}
	*/
	
	
	return i;
 85c:	c7 01       	movw	r24, r14
 85e:	b6 01       	movw	r22, r12
 860:	ff 90       	pop	r15
 862:	ef 90       	pop	r14
 864:	df 90       	pop	r13
 866:	cf 90       	pop	r12
 868:	08 95       	ret

0000086a <UART_transmit_number>:

/* 
 * This function transmits a number via uart
 */
void UART_transmit_number(uint16_t data)
{
 86a:	cf 93       	push	r28
 86c:	df 93       	push	r29
 86e:	cd b7       	in	r28, 0x3d	; 61
 870:	de b7       	in	r29, 0x3e	; 62
 872:	2a 97       	sbiw	r28, 0x0a	; 10
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	f8 94       	cli
 878:	de bf       	out	0x3e, r29	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte_array[10];
 	uint32_t byte_array_length = int2str(data,byte_array);
 87e:	be 01       	movw	r22, r28
 880:	6f 5f       	subi	r22, 0xFF	; 255
 882:	7f 4f       	sbci	r23, 0xFF	; 255
 884:	0e 94 ef 03 	call	0x7de	; 0x7de <int2str>
 888:	ab 01       	movw	r20, r22
 88a:	bc 01       	movw	r22, r24
	UART_transmit(byte_array,byte_array_length);
 88c:	ce 01       	movw	r24, r28
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	0e 94 c1 03 	call	0x782	; 0x782 <UART_transmit>
}
 894:	2a 96       	adiw	r28, 0x0a	; 10
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	f8 94       	cli
 89a:	de bf       	out	0x3e, r29	; 62
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	cd bf       	out	0x3d, r28	; 61
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	08 95       	ret

000008a6 <__vector_7>:
/*
 * This ISR timer creates a PWM and starts the timer(3.2ms) used to measure coil current
 *
 */ 
ISR(TIMER2_COMPA_vect)
{	
 8a6:	1f 92       	push	r1
 8a8:	0f 92       	push	r0
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	0f 92       	push	r0
 8ae:	11 24       	eor	r1, r1
 8b0:	2f 93       	push	r18
 8b2:	3f 93       	push	r19
 8b4:	4f 93       	push	r20
 8b6:	5f 93       	push	r21
 8b8:	6f 93       	push	r22
 8ba:	7f 93       	push	r23
 8bc:	8f 93       	push	r24
 8be:	9f 93       	push	r25
 8c0:	af 93       	push	r26
 8c2:	bf 93       	push	r27
 8c4:	ef 93       	push	r30
 8c6:	ff 93       	push	r31
	
	if(pmw_arbiter == 0) // create a falling edge on pwm
 8c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 8d0:	00 97       	sbiw	r24, 0x00	; 0
 8d2:	89 f5       	brne	.+98     	; 0x936 <__stack+0x37>
	{			
		PORTD &= ~((1<<DDD6) | (1<<DDD7) | (1<<DDD4) | (1<<DDD5));
 8d4:	8b b1       	in	r24, 0x0b	; 11
 8d6:	8f 70       	andi	r24, 0x0F	; 15
 8d8:	8b b9       	out	0x0b, r24	; 11
		OCR2A = PERIOD_50ms*(1-duty[duty_index]); // changes duty cycle
 8da:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <duty_index>
 8de:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <duty_index+0x1>
 8e2:	ee 0f       	add	r30, r30
 8e4:	ff 1f       	adc	r31, r31
 8e6:	ee 0f       	add	r30, r30
 8e8:	ff 1f       	adc	r31, r31
 8ea:	e6 5e       	subi	r30, 0xE6	; 230
 8ec:	fe 4f       	sbci	r31, 0xFE	; 254
 8ee:	20 81       	ld	r18, Z
 8f0:	31 81       	ldd	r19, Z+1	; 0x01
 8f2:	42 81       	ldd	r20, Z+2	; 0x02
 8f4:	53 81       	ldd	r21, Z+3	; 0x03
 8f6:	60 e0       	ldi	r22, 0x00	; 0
 8f8:	70 e0       	ldi	r23, 0x00	; 0
 8fa:	80 e8       	ldi	r24, 0x80	; 128
 8fc:	9f e3       	ldi	r25, 0x3F	; 63
 8fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <__subsf3>
 902:	20 e0       	ldi	r18, 0x00	; 0
 904:	30 e0       	ldi	r19, 0x00	; 0
 906:	48 e1       	ldi	r20, 0x18	; 24
 908:	52 e4       	ldi	r21, 0x42	; 66
 90a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 90e:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fixunssfsi>
 912:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		pmw_arbiter = 1; // create rising edge on pwm on next 16 bit timer match
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 91e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		period_count++;
 922:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <period_count>
 926:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <period_count+0x1>
 92a:	01 96       	adiw	r24, 0x01	; 1
 92c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <period_count+0x1>
 930:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <period_count>
 934:	33 c0       	rjmp	.+102    	; 0x99c <__stack+0x9d>
	}
	else if(pmw_arbiter == 1) // create a rising edge on pwm
 936:	01 97       	sbiw	r24, 0x01	; 1
 938:	89 f5       	brne	.+98     	; 0x99c <__stack+0x9d>
	{	
		
		if(Coil_Current_Polarity_State == Opening_Force_Current) 
 93a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Coil_Current_Polarity_State>
 93e:	81 11       	cpse	r24, r1
 940:	04 c0       	rjmp	.+8      	; 0x94a <__stack+0x4b>
		{	
			PORTD |= (1<<DDD6) | (1<<DDD7); // set pwm pins for opening current gate drivers
 942:	8b b1       	in	r24, 0x0b	; 11
 944:	80 6c       	ori	r24, 0xC0	; 192
 946:	8b b9       	out	0x0b, r24	; 11
 948:	05 c0       	rjmp	.+10     	; 0x954 <__stack+0x55>
		}
		else if(Coil_Current_Polarity_State == Closing_Force_Current) 
 94a:	81 30       	cpi	r24, 0x01	; 1
 94c:	19 f4       	brne	.+6      	; 0x954 <__stack+0x55>
		{	
			PORTD |=  (1<<DDD4) | (1<<DDD5); // set pwm pins for closing current gate drivers
 94e:	8b b1       	in	r24, 0x0b	; 11
 950:	80 63       	ori	r24, 0x30	; 48
 952:	8b b9       	out	0x0b, r24	; 11
		}
		//start a 3.2ms timer on rising edge of 50% duty cycle to initialize coil current sampling procedure
		if(current_duty_cycle_is_50) 
 954:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <current_duty_cycle_is_50>
 958:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <current_duty_cycle_is_50+0x1>
 95c:	89 2b       	or	r24, r25
 95e:	11 f0       	breq	.+4      	; 0x964 <__stack+0x65>
		{
			START_8bit_COUNTER0();
 960:	0e 94 0e 03 	call	0x61c	; 0x61c <START_8bit_COUNTER0>
		}  
		OCR2A = PERIOD_50ms*duty[duty_index]; // changes duty cycle
 964:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <duty_index>
 968:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <duty_index+0x1>
 96c:	ee 0f       	add	r30, r30
 96e:	ff 1f       	adc	r31, r31
 970:	ee 0f       	add	r30, r30
 972:	ff 1f       	adc	r31, r31
 974:	e6 5e       	subi	r30, 0xE6	; 230
 976:	fe 4f       	sbci	r31, 0xFE	; 254
 978:	20 e0       	ldi	r18, 0x00	; 0
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	48 e1       	ldi	r20, 0x18	; 24
 97e:	52 e4       	ldi	r21, 0x42	; 66
 980:	60 81       	ld	r22, Z
 982:	71 81       	ldd	r23, Z+1	; 0x01
 984:	82 81       	ldd	r24, Z+2	; 0x02
 986:	93 81       	ldd	r25, Z+3	; 0x03
 988:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 98c:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fixunssfsi>
 990:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		pmw_arbiter = 0; // create a falling edge on next 16bit timer match 
 994:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 998:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
	
	if(period_count == 10) // wait 10 period count before changing into new duty cycle
 99c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <period_count>
 9a0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <period_count+0x1>
 9a4:	0a 97       	sbiw	r24, 0x0a	; 10
 9a6:	79 f5       	brne	.+94     	; 0xa06 <__stack+0x107>
	{	
		period_count = 0; //reset period count
 9a8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <period_count+0x1>
 9ac:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <period_count>
		duty_index = ++duty_index%9; // cycles through pwm duty cycles repeatedly
 9b0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <duty_index>
 9b4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <duty_index+0x1>
 9b8:	01 96       	adiw	r24, 0x01	; 1
 9ba:	69 e0       	ldi	r22, 0x09	; 9
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	0e 94 68 07 	call	0xed0	; 0xed0 <__divmodhi4>
 9c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <duty_index+0x1>
 9c6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <duty_index>
		
		
		if(duty[duty_index] == 0.5)
 9ca:	88 0f       	add	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	fc 01       	movw	r30, r24
 9d4:	e6 5e       	subi	r30, 0xE6	; 230
 9d6:	fe 4f       	sbci	r31, 0xFE	; 254
 9d8:	20 e0       	ldi	r18, 0x00	; 0
 9da:	30 e0       	ldi	r19, 0x00	; 0
 9dc:	40 e0       	ldi	r20, 0x00	; 0
 9de:	5f e3       	ldi	r21, 0x3F	; 63
 9e0:	60 81       	ld	r22, Z
 9e2:	71 81       	ldd	r23, Z+1	; 0x01
 9e4:	82 81       	ldd	r24, Z+2	; 0x02
 9e6:	93 81       	ldd	r25, Z+3	; 0x03
 9e8:	0e 94 10 06 	call	0xc20	; 0xc20 <__cmpsf2>
 9ec:	81 11       	cpse	r24, r1
 9ee:	07 c0       	rjmp	.+14     	; 0x9fe <__stack+0xff>
		{
			current_duty_cycle_is_50 = 1;
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <current_duty_cycle_is_50+0x1>
 9f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <current_duty_cycle_is_50>
 9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__stack+0x107>
		}
		else
		{			
			current_duty_cycle_is_50 = 0;
 9fe:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <current_duty_cycle_is_50+0x1>
 a02:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <current_duty_cycle_is_50>
		}
	
	}
	
}
 a06:	ff 91       	pop	r31
 a08:	ef 91       	pop	r30
 a0a:	bf 91       	pop	r27
 a0c:	af 91       	pop	r26
 a0e:	9f 91       	pop	r25
 a10:	8f 91       	pop	r24
 a12:	7f 91       	pop	r23
 a14:	6f 91       	pop	r22
 a16:	5f 91       	pop	r21
 a18:	4f 91       	pop	r20
 a1a:	3f 91       	pop	r19
 a1c:	2f 91       	pop	r18
 a1e:	0f 90       	pop	r0
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	0f 90       	pop	r0
 a24:	1f 90       	pop	r1
 a26:	18 95       	reti

00000a28 <__vector_14>:
 * This ISR timer counts 3.2 ms to start sampling coil current
 *it sets a flag to sample the current
 *
 */ 
ISR(TIMER0_COMPA_vect)
{	
 a28:	1f 92       	push	r1
 a2a:	0f 92       	push	r0
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	0f 92       	push	r0
 a30:	11 24       	eor	r1, r1
 a32:	2f 93       	push	r18
 a34:	3f 93       	push	r19
 a36:	4f 93       	push	r20
 a38:	5f 93       	push	r21
 a3a:	6f 93       	push	r22
 a3c:	7f 93       	push	r23
 a3e:	8f 93       	push	r24
 a40:	9f 93       	push	r25
 a42:	af 93       	push	r26
 a44:	bf 93       	push	r27
 a46:	ef 93       	push	r30
 a48:	ff 93       	push	r31
		Sample_Coil_Current = 1; // set flag to initialize current sampling
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Sample_Coil_Current>
		STOP_8bit_COUNTER0(); // stop timer0 to prevent sampling coil current at other times	
 a50:	0e 94 16 03 	call	0x62c	; 0x62c <STOP_8bit_COUNTER0>
}
 a54:	ff 91       	pop	r31
 a56:	ef 91       	pop	r30
 a58:	bf 91       	pop	r27
 a5a:	af 91       	pop	r26
 a5c:	9f 91       	pop	r25
 a5e:	8f 91       	pop	r24
 a60:	7f 91       	pop	r23
 a62:	6f 91       	pop	r22
 a64:	5f 91       	pop	r21
 a66:	4f 91       	pop	r20
 a68:	3f 91       	pop	r19
 a6a:	2f 91       	pop	r18
 a6c:	0f 90       	pop	r0
 a6e:	0f be       	out	0x3f, r0	; 63
 a70:	0f 90       	pop	r0
 a72:	1f 90       	pop	r1
 a74:	18 95       	reti

00000a76 <__vector_1>:


ISR(INT0_vect)
{	
 a76:	1f 92       	push	r1
 a78:	0f 92       	push	r0
 a7a:	0f b6       	in	r0, 0x3f	; 63
 a7c:	0f 92       	push	r0
 a7e:	11 24       	eor	r1, r1
 a80:	2f 93       	push	r18
 a82:	8f 93       	push	r24
 a84:	9f 93       	push	r25
	if(fast_pwm_period_count == 1000) // wait 1 sec for before sampling the touch circuit again
 a86:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 a8a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 a8e:	88 3e       	cpi	r24, 0xE8	; 232
 a90:	93 40       	sbci	r25, 0x03	; 3
 a92:	39 f4       	brne	.+14     	; 0xaa2 <__vector_1+0x2c>
	{
		Sample_touch_circuit = 1; // set flag to initialize the sampling process
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Sample_touch_circuit>
		fast_pwm_period_count  = 0;
 a9a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 a9e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	}
		
	fast_pwm_period_count++;	
 aa2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 aa6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 aaa:	01 96       	adiw	r24, 0x01	; 1
 aac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 ab0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 ab4:	9f 91       	pop	r25
 ab6:	8f 91       	pop	r24
 ab8:	2f 91       	pop	r18
 aba:	0f 90       	pop	r0
 abc:	0f be       	out	0x3f, r0	; 63
 abe:	0f 90       	pop	r0
 ac0:	1f 90       	pop	r1
 ac2:	18 95       	reti

00000ac4 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{	
 ac4:	1f 92       	push	r1
 ac6:	0f 92       	push	r0
 ac8:	0f b6       	in	r0, 0x3f	; 63
 aca:	0f 92       	push	r0
 acc:	11 24       	eor	r1, r1
 ace:	2f 93       	push	r18
 ad0:	3f 93       	push	r19
 ad2:	4f 93       	push	r20
 ad4:	5f 93       	push	r21
 ad6:	6f 93       	push	r22
 ad8:	7f 93       	push	r23
 ada:	8f 93       	push	r24
 adc:	9f 93       	push	r25
 ade:	af 93       	push	r26
 ae0:	bf 93       	push	r27
 ae2:	ef 93       	push	r30
 ae4:	ff 93       	push	r31
	/* Set FMS to wait touch state after 60 seconds of providing a opening force
	 but the door is not opened ( wait for another touch)
	 */
	Current_FSM_state = WaitTouch_State;
 ae6:	83 e0       	ldi	r24, 0x03	; 3
 ae8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Current_FSM_state>
	// Enables the "WaitTouch_State" to re-initialize
	wait_touch_routine_initialized = 0;
 aec:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <wait_touch_routine_initialized+0x1>
 af0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <wait_touch_routine_initialized>
	// Stop the 60 second timer
	STOP_OPENING_CURRENT_TIMER();
 af4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <STOP_OPENING_CURRENT_TIMER>
}
 af8:	ff 91       	pop	r31
 afa:	ef 91       	pop	r30
 afc:	bf 91       	pop	r27
 afe:	af 91       	pop	r26
 b00:	9f 91       	pop	r25
 b02:	8f 91       	pop	r24
 b04:	7f 91       	pop	r23
 b06:	6f 91       	pop	r22
 b08:	5f 91       	pop	r21
 b0a:	4f 91       	pop	r20
 b0c:	3f 91       	pop	r19
 b0e:	2f 91       	pop	r18
 b10:	0f 90       	pop	r0
 b12:	0f be       	out	0x3f, r0	; 63
 b14:	0f 90       	pop	r0
 b16:	1f 90       	pop	r1
 b18:	18 95       	reti

00000b1a <main>:

int main(void)
{	
	// Initializes the drivers
	ADC_init();
 b1a:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	COUNTER_8bit_timer2_init();
 b1e:	0e 94 cf 02 	call	0x59e	; 0x59e <COUNTER_8bit_timer2_init>
	COUNTER_8bit_timer0_init();
 b22:	0e 94 fd 02 	call	0x5fa	; 0x5fa <COUNTER_8bit_timer0_init>
	COUNTER_16bit_timer1_init();
 b26:	0e 94 1a 03 	call	0x634	; 0x634 <COUNTER_16bit_timer1_init>
	GPIO_init();
 b2a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <GPIO_init>
	UART_init(MYUBRR);
 b2e:	83 e3       	ldi	r24, 0x33	; 51
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 84 03 	call	0x708	; 0x708 <UART_init>
	INIT_EXTERNAL_ISR();
 b36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <INIT_EXTERNAL_ISR>
	sei(); // enable global interupt 
 b3a:	78 94       	sei
	
	// Start and loop the programme
	FSM_start();
 b3c:	0e 94 ac 00 	call	0x158	; 0x158 <FSM_start>
	
	//UART_transmit_string("HEllO THERE");
}
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	08 95       	ret

00000b46 <__subsf3>:
 b46:	50 58       	subi	r21, 0x80	; 128

00000b48 <__addsf3>:
 b48:	bb 27       	eor	r27, r27
 b4a:	aa 27       	eor	r26, r26
 b4c:	0e 94 bb 05 	call	0xb76	; 0xb76 <__addsf3x>
 b50:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_round>
 b54:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_pscA>
 b58:	38 f0       	brcs	.+14     	; 0xb68 <__addsf3+0x20>
 b5a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__fp_pscB>
 b5e:	20 f0       	brcs	.+8      	; 0xb68 <__addsf3+0x20>
 b60:	39 f4       	brne	.+14     	; 0xb70 <__addsf3+0x28>
 b62:	9f 3f       	cpi	r25, 0xFF	; 255
 b64:	19 f4       	brne	.+6      	; 0xb6c <__addsf3+0x24>
 b66:	26 f4       	brtc	.+8      	; 0xb70 <__addsf3+0x28>
 b68:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_nan>
 b6c:	0e f4       	brtc	.+2      	; 0xb70 <__addsf3+0x28>
 b6e:	e0 95       	com	r30
 b70:	e7 fb       	bst	r30, 7
 b72:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_inf>

00000b76 <__addsf3x>:
 b76:	e9 2f       	mov	r30, r25
 b78:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__fp_split3>
 b7c:	58 f3       	brcs	.-42     	; 0xb54 <__addsf3+0xc>
 b7e:	ba 17       	cp	r27, r26
 b80:	62 07       	cpc	r22, r18
 b82:	73 07       	cpc	r23, r19
 b84:	84 07       	cpc	r24, r20
 b86:	95 07       	cpc	r25, r21
 b88:	20 f0       	brcs	.+8      	; 0xb92 <__addsf3x+0x1c>
 b8a:	79 f4       	brne	.+30     	; 0xbaa <__addsf3x+0x34>
 b8c:	a6 f5       	brtc	.+104    	; 0xbf6 <__addsf3x+0x80>
 b8e:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__fp_zero>
 b92:	0e f4       	brtc	.+2      	; 0xb96 <__addsf3x+0x20>
 b94:	e0 95       	com	r30
 b96:	0b 2e       	mov	r0, r27
 b98:	ba 2f       	mov	r27, r26
 b9a:	a0 2d       	mov	r26, r0
 b9c:	0b 01       	movw	r0, r22
 b9e:	b9 01       	movw	r22, r18
 ba0:	90 01       	movw	r18, r0
 ba2:	0c 01       	movw	r0, r24
 ba4:	ca 01       	movw	r24, r20
 ba6:	a0 01       	movw	r20, r0
 ba8:	11 24       	eor	r1, r1
 baa:	ff 27       	eor	r31, r31
 bac:	59 1b       	sub	r21, r25
 bae:	99 f0       	breq	.+38     	; 0xbd6 <__addsf3x+0x60>
 bb0:	59 3f       	cpi	r21, 0xF9	; 249
 bb2:	50 f4       	brcc	.+20     	; 0xbc8 <__addsf3x+0x52>
 bb4:	50 3e       	cpi	r21, 0xE0	; 224
 bb6:	68 f1       	brcs	.+90     	; 0xc12 <__addsf3x+0x9c>
 bb8:	1a 16       	cp	r1, r26
 bba:	f0 40       	sbci	r31, 0x00	; 0
 bbc:	a2 2f       	mov	r26, r18
 bbe:	23 2f       	mov	r18, r19
 bc0:	34 2f       	mov	r19, r20
 bc2:	44 27       	eor	r20, r20
 bc4:	58 5f       	subi	r21, 0xF8	; 248
 bc6:	f3 cf       	rjmp	.-26     	; 0xbae <__addsf3x+0x38>
 bc8:	46 95       	lsr	r20
 bca:	37 95       	ror	r19
 bcc:	27 95       	ror	r18
 bce:	a7 95       	ror	r26
 bd0:	f0 40       	sbci	r31, 0x00	; 0
 bd2:	53 95       	inc	r21
 bd4:	c9 f7       	brne	.-14     	; 0xbc8 <__addsf3x+0x52>
 bd6:	7e f4       	brtc	.+30     	; 0xbf6 <__addsf3x+0x80>
 bd8:	1f 16       	cp	r1, r31
 bda:	ba 0b       	sbc	r27, r26
 bdc:	62 0b       	sbc	r22, r18
 bde:	73 0b       	sbc	r23, r19
 be0:	84 0b       	sbc	r24, r20
 be2:	ba f0       	brmi	.+46     	; 0xc12 <__addsf3x+0x9c>
 be4:	91 50       	subi	r25, 0x01	; 1
 be6:	a1 f0       	breq	.+40     	; 0xc10 <__addsf3x+0x9a>
 be8:	ff 0f       	add	r31, r31
 bea:	bb 1f       	adc	r27, r27
 bec:	66 1f       	adc	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	c2 f7       	brpl	.-16     	; 0xbe4 <__addsf3x+0x6e>
 bf4:	0e c0       	rjmp	.+28     	; 0xc12 <__addsf3x+0x9c>
 bf6:	ba 0f       	add	r27, r26
 bf8:	62 1f       	adc	r22, r18
 bfa:	73 1f       	adc	r23, r19
 bfc:	84 1f       	adc	r24, r20
 bfe:	48 f4       	brcc	.+18     	; 0xc12 <__addsf3x+0x9c>
 c00:	87 95       	ror	r24
 c02:	77 95       	ror	r23
 c04:	67 95       	ror	r22
 c06:	b7 95       	ror	r27
 c08:	f7 95       	ror	r31
 c0a:	9e 3f       	cpi	r25, 0xFE	; 254
 c0c:	08 f0       	brcs	.+2      	; 0xc10 <__addsf3x+0x9a>
 c0e:	b0 cf       	rjmp	.-160    	; 0xb70 <__addsf3+0x28>
 c10:	93 95       	inc	r25
 c12:	88 0f       	add	r24, r24
 c14:	08 f0       	brcs	.+2      	; 0xc18 <__addsf3x+0xa2>
 c16:	99 27       	eor	r25, r25
 c18:	ee 0f       	add	r30, r30
 c1a:	97 95       	ror	r25
 c1c:	87 95       	ror	r24
 c1e:	08 95       	ret

00000c20 <__cmpsf2>:
 c20:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_cmp>
 c24:	08 f4       	brcc	.+2      	; 0xc28 <__cmpsf2+0x8>
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	08 95       	ret

00000c2a <__fixunssfsi>:
 c2a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__fp_splitA>
 c2e:	88 f0       	brcs	.+34     	; 0xc52 <__fixunssfsi+0x28>
 c30:	9f 57       	subi	r25, 0x7F	; 127
 c32:	98 f0       	brcs	.+38     	; 0xc5a <__fixunssfsi+0x30>
 c34:	b9 2f       	mov	r27, r25
 c36:	99 27       	eor	r25, r25
 c38:	b7 51       	subi	r27, 0x17	; 23
 c3a:	b0 f0       	brcs	.+44     	; 0xc68 <__fixunssfsi+0x3e>
 c3c:	e1 f0       	breq	.+56     	; 0xc76 <__fixunssfsi+0x4c>
 c3e:	66 0f       	add	r22, r22
 c40:	77 1f       	adc	r23, r23
 c42:	88 1f       	adc	r24, r24
 c44:	99 1f       	adc	r25, r25
 c46:	1a f0       	brmi	.+6      	; 0xc4e <__fixunssfsi+0x24>
 c48:	ba 95       	dec	r27
 c4a:	c9 f7       	brne	.-14     	; 0xc3e <__fixunssfsi+0x14>
 c4c:	14 c0       	rjmp	.+40     	; 0xc76 <__fixunssfsi+0x4c>
 c4e:	b1 30       	cpi	r27, 0x01	; 1
 c50:	91 f0       	breq	.+36     	; 0xc76 <__fixunssfsi+0x4c>
 c52:	0e 94 ef 06 	call	0xdde	; 0xdde <__fp_zero>
 c56:	b1 e0       	ldi	r27, 0x01	; 1
 c58:	08 95       	ret
 c5a:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__fp_zero>
 c5e:	67 2f       	mov	r22, r23
 c60:	78 2f       	mov	r23, r24
 c62:	88 27       	eor	r24, r24
 c64:	b8 5f       	subi	r27, 0xF8	; 248
 c66:	39 f0       	breq	.+14     	; 0xc76 <__fixunssfsi+0x4c>
 c68:	b9 3f       	cpi	r27, 0xF9	; 249
 c6a:	cc f3       	brlt	.-14     	; 0xc5e <__fixunssfsi+0x34>
 c6c:	86 95       	lsr	r24
 c6e:	77 95       	ror	r23
 c70:	67 95       	ror	r22
 c72:	b3 95       	inc	r27
 c74:	d9 f7       	brne	.-10     	; 0xc6c <__fixunssfsi+0x42>
 c76:	3e f4       	brtc	.+14     	; 0xc86 <__fixunssfsi+0x5c>
 c78:	90 95       	com	r25
 c7a:	80 95       	com	r24
 c7c:	70 95       	com	r23
 c7e:	61 95       	neg	r22
 c80:	7f 4f       	sbci	r23, 0xFF	; 255
 c82:	8f 4f       	sbci	r24, 0xFF	; 255
 c84:	9f 4f       	sbci	r25, 0xFF	; 255
 c86:	08 95       	ret

00000c88 <__floatunsisf>:
 c88:	e8 94       	clt
 c8a:	09 c0       	rjmp	.+18     	; 0xc9e <__floatsisf+0x12>

00000c8c <__floatsisf>:
 c8c:	97 fb       	bst	r25, 7
 c8e:	3e f4       	brtc	.+14     	; 0xc9e <__floatsisf+0x12>
 c90:	90 95       	com	r25
 c92:	80 95       	com	r24
 c94:	70 95       	com	r23
 c96:	61 95       	neg	r22
 c98:	7f 4f       	sbci	r23, 0xFF	; 255
 c9a:	8f 4f       	sbci	r24, 0xFF	; 255
 c9c:	9f 4f       	sbci	r25, 0xFF	; 255
 c9e:	99 23       	and	r25, r25
 ca0:	a9 f0       	breq	.+42     	; 0xccc <__floatsisf+0x40>
 ca2:	f9 2f       	mov	r31, r25
 ca4:	96 e9       	ldi	r25, 0x96	; 150
 ca6:	bb 27       	eor	r27, r27
 ca8:	93 95       	inc	r25
 caa:	f6 95       	lsr	r31
 cac:	87 95       	ror	r24
 cae:	77 95       	ror	r23
 cb0:	67 95       	ror	r22
 cb2:	b7 95       	ror	r27
 cb4:	f1 11       	cpse	r31, r1
 cb6:	f8 cf       	rjmp	.-16     	; 0xca8 <__floatsisf+0x1c>
 cb8:	fa f4       	brpl	.+62     	; 0xcf8 <__floatsisf+0x6c>
 cba:	bb 0f       	add	r27, r27
 cbc:	11 f4       	brne	.+4      	; 0xcc2 <__floatsisf+0x36>
 cbe:	60 ff       	sbrs	r22, 0
 cc0:	1b c0       	rjmp	.+54     	; 0xcf8 <__floatsisf+0x6c>
 cc2:	6f 5f       	subi	r22, 0xFF	; 255
 cc4:	7f 4f       	sbci	r23, 0xFF	; 255
 cc6:	8f 4f       	sbci	r24, 0xFF	; 255
 cc8:	9f 4f       	sbci	r25, 0xFF	; 255
 cca:	16 c0       	rjmp	.+44     	; 0xcf8 <__floatsisf+0x6c>
 ccc:	88 23       	and	r24, r24
 cce:	11 f0       	breq	.+4      	; 0xcd4 <__floatsisf+0x48>
 cd0:	96 e9       	ldi	r25, 0x96	; 150
 cd2:	11 c0       	rjmp	.+34     	; 0xcf6 <__floatsisf+0x6a>
 cd4:	77 23       	and	r23, r23
 cd6:	21 f0       	breq	.+8      	; 0xce0 <__floatsisf+0x54>
 cd8:	9e e8       	ldi	r25, 0x8E	; 142
 cda:	87 2f       	mov	r24, r23
 cdc:	76 2f       	mov	r23, r22
 cde:	05 c0       	rjmp	.+10     	; 0xcea <__floatsisf+0x5e>
 ce0:	66 23       	and	r22, r22
 ce2:	71 f0       	breq	.+28     	; 0xd00 <__floatsisf+0x74>
 ce4:	96 e8       	ldi	r25, 0x86	; 134
 ce6:	86 2f       	mov	r24, r22
 ce8:	70 e0       	ldi	r23, 0x00	; 0
 cea:	60 e0       	ldi	r22, 0x00	; 0
 cec:	2a f0       	brmi	.+10     	; 0xcf8 <__floatsisf+0x6c>
 cee:	9a 95       	dec	r25
 cf0:	66 0f       	add	r22, r22
 cf2:	77 1f       	adc	r23, r23
 cf4:	88 1f       	adc	r24, r24
 cf6:	da f7       	brpl	.-10     	; 0xcee <__floatsisf+0x62>
 cf8:	88 0f       	add	r24, r24
 cfa:	96 95       	lsr	r25
 cfc:	87 95       	ror	r24
 cfe:	97 f9       	bld	r25, 7
 d00:	08 95       	ret

00000d02 <__fp_cmp>:
 d02:	99 0f       	add	r25, r25
 d04:	00 08       	sbc	r0, r0
 d06:	55 0f       	add	r21, r21
 d08:	aa 0b       	sbc	r26, r26
 d0a:	e0 e8       	ldi	r30, 0x80	; 128
 d0c:	fe ef       	ldi	r31, 0xFE	; 254
 d0e:	16 16       	cp	r1, r22
 d10:	17 06       	cpc	r1, r23
 d12:	e8 07       	cpc	r30, r24
 d14:	f9 07       	cpc	r31, r25
 d16:	c0 f0       	brcs	.+48     	; 0xd48 <__fp_cmp+0x46>
 d18:	12 16       	cp	r1, r18
 d1a:	13 06       	cpc	r1, r19
 d1c:	e4 07       	cpc	r30, r20
 d1e:	f5 07       	cpc	r31, r21
 d20:	98 f0       	brcs	.+38     	; 0xd48 <__fp_cmp+0x46>
 d22:	62 1b       	sub	r22, r18
 d24:	73 0b       	sbc	r23, r19
 d26:	84 0b       	sbc	r24, r20
 d28:	95 0b       	sbc	r25, r21
 d2a:	39 f4       	brne	.+14     	; 0xd3a <__fp_cmp+0x38>
 d2c:	0a 26       	eor	r0, r26
 d2e:	61 f0       	breq	.+24     	; 0xd48 <__fp_cmp+0x46>
 d30:	23 2b       	or	r18, r19
 d32:	24 2b       	or	r18, r20
 d34:	25 2b       	or	r18, r21
 d36:	21 f4       	brne	.+8      	; 0xd40 <__fp_cmp+0x3e>
 d38:	08 95       	ret
 d3a:	0a 26       	eor	r0, r26
 d3c:	09 f4       	brne	.+2      	; 0xd40 <__fp_cmp+0x3e>
 d3e:	a1 40       	sbci	r26, 0x01	; 1
 d40:	a6 95       	lsr	r26
 d42:	8f ef       	ldi	r24, 0xFF	; 255
 d44:	81 1d       	adc	r24, r1
 d46:	81 1d       	adc	r24, r1
 d48:	08 95       	ret

00000d4a <__fp_inf>:
 d4a:	97 f9       	bld	r25, 7
 d4c:	9f 67       	ori	r25, 0x7F	; 127
 d4e:	80 e8       	ldi	r24, 0x80	; 128
 d50:	70 e0       	ldi	r23, 0x00	; 0
 d52:	60 e0       	ldi	r22, 0x00	; 0
 d54:	08 95       	ret

00000d56 <__fp_nan>:
 d56:	9f ef       	ldi	r25, 0xFF	; 255
 d58:	80 ec       	ldi	r24, 0xC0	; 192
 d5a:	08 95       	ret

00000d5c <__fp_pscA>:
 d5c:	00 24       	eor	r0, r0
 d5e:	0a 94       	dec	r0
 d60:	16 16       	cp	r1, r22
 d62:	17 06       	cpc	r1, r23
 d64:	18 06       	cpc	r1, r24
 d66:	09 06       	cpc	r0, r25
 d68:	08 95       	ret

00000d6a <__fp_pscB>:
 d6a:	00 24       	eor	r0, r0
 d6c:	0a 94       	dec	r0
 d6e:	12 16       	cp	r1, r18
 d70:	13 06       	cpc	r1, r19
 d72:	14 06       	cpc	r1, r20
 d74:	05 06       	cpc	r0, r21
 d76:	08 95       	ret

00000d78 <__fp_round>:
 d78:	09 2e       	mov	r0, r25
 d7a:	03 94       	inc	r0
 d7c:	00 0c       	add	r0, r0
 d7e:	11 f4       	brne	.+4      	; 0xd84 <__fp_round+0xc>
 d80:	88 23       	and	r24, r24
 d82:	52 f0       	brmi	.+20     	; 0xd98 <__fp_round+0x20>
 d84:	bb 0f       	add	r27, r27
 d86:	40 f4       	brcc	.+16     	; 0xd98 <__fp_round+0x20>
 d88:	bf 2b       	or	r27, r31
 d8a:	11 f4       	brne	.+4      	; 0xd90 <__fp_round+0x18>
 d8c:	60 ff       	sbrs	r22, 0
 d8e:	04 c0       	rjmp	.+8      	; 0xd98 <__fp_round+0x20>
 d90:	6f 5f       	subi	r22, 0xFF	; 255
 d92:	7f 4f       	sbci	r23, 0xFF	; 255
 d94:	8f 4f       	sbci	r24, 0xFF	; 255
 d96:	9f 4f       	sbci	r25, 0xFF	; 255
 d98:	08 95       	ret

00000d9a <__fp_split3>:
 d9a:	57 fd       	sbrc	r21, 7
 d9c:	90 58       	subi	r25, 0x80	; 128
 d9e:	44 0f       	add	r20, r20
 da0:	55 1f       	adc	r21, r21
 da2:	59 f0       	breq	.+22     	; 0xdba <__fp_splitA+0x10>
 da4:	5f 3f       	cpi	r21, 0xFF	; 255
 da6:	71 f0       	breq	.+28     	; 0xdc4 <__fp_splitA+0x1a>
 da8:	47 95       	ror	r20

00000daa <__fp_splitA>:
 daa:	88 0f       	add	r24, r24
 dac:	97 fb       	bst	r25, 7
 dae:	99 1f       	adc	r25, r25
 db0:	61 f0       	breq	.+24     	; 0xdca <__fp_splitA+0x20>
 db2:	9f 3f       	cpi	r25, 0xFF	; 255
 db4:	79 f0       	breq	.+30     	; 0xdd4 <__fp_splitA+0x2a>
 db6:	87 95       	ror	r24
 db8:	08 95       	ret
 dba:	12 16       	cp	r1, r18
 dbc:	13 06       	cpc	r1, r19
 dbe:	14 06       	cpc	r1, r20
 dc0:	55 1f       	adc	r21, r21
 dc2:	f2 cf       	rjmp	.-28     	; 0xda8 <__fp_split3+0xe>
 dc4:	46 95       	lsr	r20
 dc6:	f1 df       	rcall	.-30     	; 0xdaa <__fp_splitA>
 dc8:	08 c0       	rjmp	.+16     	; 0xdda <__fp_splitA+0x30>
 dca:	16 16       	cp	r1, r22
 dcc:	17 06       	cpc	r1, r23
 dce:	18 06       	cpc	r1, r24
 dd0:	99 1f       	adc	r25, r25
 dd2:	f1 cf       	rjmp	.-30     	; 0xdb6 <__fp_splitA+0xc>
 dd4:	86 95       	lsr	r24
 dd6:	71 05       	cpc	r23, r1
 dd8:	61 05       	cpc	r22, r1
 dda:	08 94       	sec
 ddc:	08 95       	ret

00000dde <__fp_zero>:
 dde:	e8 94       	clt

00000de0 <__fp_szero>:
 de0:	bb 27       	eor	r27, r27
 de2:	66 27       	eor	r22, r22
 de4:	77 27       	eor	r23, r23
 de6:	cb 01       	movw	r24, r22
 de8:	97 f9       	bld	r25, 7
 dea:	08 95       	ret

00000dec <__gesf2>:
 dec:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_cmp>
 df0:	08 f4       	brcc	.+2      	; 0xdf4 <__gesf2+0x8>
 df2:	8f ef       	ldi	r24, 0xFF	; 255
 df4:	08 95       	ret

00000df6 <__mulsf3>:
 df6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__mulsf3x>
 dfa:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_round>
 dfe:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_pscA>
 e02:	38 f0       	brcs	.+14     	; 0xe12 <__mulsf3+0x1c>
 e04:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__fp_pscB>
 e08:	20 f0       	brcs	.+8      	; 0xe12 <__mulsf3+0x1c>
 e0a:	95 23       	and	r25, r21
 e0c:	11 f0       	breq	.+4      	; 0xe12 <__mulsf3+0x1c>
 e0e:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_inf>
 e12:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_nan>
 e16:	11 24       	eor	r1, r1
 e18:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_szero>

00000e1c <__mulsf3x>:
 e1c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__fp_split3>
 e20:	70 f3       	brcs	.-36     	; 0xdfe <__mulsf3+0x8>

00000e22 <__mulsf3_pse>:
 e22:	95 9f       	mul	r25, r21
 e24:	c1 f3       	breq	.-16     	; 0xe16 <__mulsf3+0x20>
 e26:	95 0f       	add	r25, r21
 e28:	50 e0       	ldi	r21, 0x00	; 0
 e2a:	55 1f       	adc	r21, r21
 e2c:	62 9f       	mul	r22, r18
 e2e:	f0 01       	movw	r30, r0
 e30:	72 9f       	mul	r23, r18
 e32:	bb 27       	eor	r27, r27
 e34:	f0 0d       	add	r31, r0
 e36:	b1 1d       	adc	r27, r1
 e38:	63 9f       	mul	r22, r19
 e3a:	aa 27       	eor	r26, r26
 e3c:	f0 0d       	add	r31, r0
 e3e:	b1 1d       	adc	r27, r1
 e40:	aa 1f       	adc	r26, r26
 e42:	64 9f       	mul	r22, r20
 e44:	66 27       	eor	r22, r22
 e46:	b0 0d       	add	r27, r0
 e48:	a1 1d       	adc	r26, r1
 e4a:	66 1f       	adc	r22, r22
 e4c:	82 9f       	mul	r24, r18
 e4e:	22 27       	eor	r18, r18
 e50:	b0 0d       	add	r27, r0
 e52:	a1 1d       	adc	r26, r1
 e54:	62 1f       	adc	r22, r18
 e56:	73 9f       	mul	r23, r19
 e58:	b0 0d       	add	r27, r0
 e5a:	a1 1d       	adc	r26, r1
 e5c:	62 1f       	adc	r22, r18
 e5e:	83 9f       	mul	r24, r19
 e60:	a0 0d       	add	r26, r0
 e62:	61 1d       	adc	r22, r1
 e64:	22 1f       	adc	r18, r18
 e66:	74 9f       	mul	r23, r20
 e68:	33 27       	eor	r19, r19
 e6a:	a0 0d       	add	r26, r0
 e6c:	61 1d       	adc	r22, r1
 e6e:	23 1f       	adc	r18, r19
 e70:	84 9f       	mul	r24, r20
 e72:	60 0d       	add	r22, r0
 e74:	21 1d       	adc	r18, r1
 e76:	82 2f       	mov	r24, r18
 e78:	76 2f       	mov	r23, r22
 e7a:	6a 2f       	mov	r22, r26
 e7c:	11 24       	eor	r1, r1
 e7e:	9f 57       	subi	r25, 0x7F	; 127
 e80:	50 40       	sbci	r21, 0x00	; 0
 e82:	9a f0       	brmi	.+38     	; 0xeaa <__mulsf3_pse+0x88>
 e84:	f1 f0       	breq	.+60     	; 0xec2 <__mulsf3_pse+0xa0>
 e86:	88 23       	and	r24, r24
 e88:	4a f0       	brmi	.+18     	; 0xe9c <__mulsf3_pse+0x7a>
 e8a:	ee 0f       	add	r30, r30
 e8c:	ff 1f       	adc	r31, r31
 e8e:	bb 1f       	adc	r27, r27
 e90:	66 1f       	adc	r22, r22
 e92:	77 1f       	adc	r23, r23
 e94:	88 1f       	adc	r24, r24
 e96:	91 50       	subi	r25, 0x01	; 1
 e98:	50 40       	sbci	r21, 0x00	; 0
 e9a:	a9 f7       	brne	.-22     	; 0xe86 <__mulsf3_pse+0x64>
 e9c:	9e 3f       	cpi	r25, 0xFE	; 254
 e9e:	51 05       	cpc	r21, r1
 ea0:	80 f0       	brcs	.+32     	; 0xec2 <__mulsf3_pse+0xa0>
 ea2:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_inf>
 ea6:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_szero>
 eaa:	5f 3f       	cpi	r21, 0xFF	; 255
 eac:	e4 f3       	brlt	.-8      	; 0xea6 <__mulsf3_pse+0x84>
 eae:	98 3e       	cpi	r25, 0xE8	; 232
 eb0:	d4 f3       	brlt	.-12     	; 0xea6 <__mulsf3_pse+0x84>
 eb2:	86 95       	lsr	r24
 eb4:	77 95       	ror	r23
 eb6:	67 95       	ror	r22
 eb8:	b7 95       	ror	r27
 eba:	f7 95       	ror	r31
 ebc:	e7 95       	ror	r30
 ebe:	9f 5f       	subi	r25, 0xFF	; 255
 ec0:	c1 f7       	brne	.-16     	; 0xeb2 <__mulsf3_pse+0x90>
 ec2:	fe 2b       	or	r31, r30
 ec4:	88 0f       	add	r24, r24
 ec6:	91 1d       	adc	r25, r1
 ec8:	96 95       	lsr	r25
 eca:	87 95       	ror	r24
 ecc:	97 f9       	bld	r25, 7
 ece:	08 95       	ret

00000ed0 <__divmodhi4>:
 ed0:	97 fb       	bst	r25, 7
 ed2:	07 2e       	mov	r0, r23
 ed4:	16 f4       	brtc	.+4      	; 0xeda <__divmodhi4+0xa>
 ed6:	00 94       	com	r0
 ed8:	07 d0       	rcall	.+14     	; 0xee8 <__divmodhi4_neg1>
 eda:	77 fd       	sbrc	r23, 7
 edc:	09 d0       	rcall	.+18     	; 0xef0 <__divmodhi4_neg2>
 ede:	0e 94 8b 07 	call	0xf16	; 0xf16 <__udivmodhi4>
 ee2:	07 fc       	sbrc	r0, 7
 ee4:	05 d0       	rcall	.+10     	; 0xef0 <__divmodhi4_neg2>
 ee6:	3e f4       	brtc	.+14     	; 0xef6 <__divmodhi4_exit>

00000ee8 <__divmodhi4_neg1>:
 ee8:	90 95       	com	r25
 eea:	81 95       	neg	r24
 eec:	9f 4f       	sbci	r25, 0xFF	; 255
 eee:	08 95       	ret

00000ef0 <__divmodhi4_neg2>:
 ef0:	70 95       	com	r23
 ef2:	61 95       	neg	r22
 ef4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ef6 <__divmodhi4_exit>:
 ef6:	08 95       	ret

00000ef8 <__umulhisi3>:
 ef8:	a2 9f       	mul	r26, r18
 efa:	b0 01       	movw	r22, r0
 efc:	b3 9f       	mul	r27, r19
 efe:	c0 01       	movw	r24, r0
 f00:	a3 9f       	mul	r26, r19
 f02:	70 0d       	add	r23, r0
 f04:	81 1d       	adc	r24, r1
 f06:	11 24       	eor	r1, r1
 f08:	91 1d       	adc	r25, r1
 f0a:	b2 9f       	mul	r27, r18
 f0c:	70 0d       	add	r23, r0
 f0e:	81 1d       	adc	r24, r1
 f10:	11 24       	eor	r1, r1
 f12:	91 1d       	adc	r25, r1
 f14:	08 95       	ret

00000f16 <__udivmodhi4>:
 f16:	aa 1b       	sub	r26, r26
 f18:	bb 1b       	sub	r27, r27
 f1a:	51 e1       	ldi	r21, 0x11	; 17
 f1c:	07 c0       	rjmp	.+14     	; 0xf2c <__udivmodhi4_ep>

00000f1e <__udivmodhi4_loop>:
 f1e:	aa 1f       	adc	r26, r26
 f20:	bb 1f       	adc	r27, r27
 f22:	a6 17       	cp	r26, r22
 f24:	b7 07       	cpc	r27, r23
 f26:	10 f0       	brcs	.+4      	; 0xf2c <__udivmodhi4_ep>
 f28:	a6 1b       	sub	r26, r22
 f2a:	b7 0b       	sbc	r27, r23

00000f2c <__udivmodhi4_ep>:
 f2c:	88 1f       	adc	r24, r24
 f2e:	99 1f       	adc	r25, r25
 f30:	5a 95       	dec	r21
 f32:	a9 f7       	brne	.-22     	; 0xf1e <__udivmodhi4_loop>
 f34:	80 95       	com	r24
 f36:	90 95       	com	r25
 f38:	bc 01       	movw	r22, r24
 f3a:	cd 01       	movw	r24, r26
 f3c:	08 95       	ret

00000f3e <_exit>:
 f3e:	f8 94       	cli

00000f40 <__stop_program>:
 f40:	ff cf       	rjmp	.-2      	; 0xf40 <__stop_program>
