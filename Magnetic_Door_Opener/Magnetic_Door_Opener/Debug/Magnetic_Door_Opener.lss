
Magnetic_Door_Opener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007b2  00000846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  00000848  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000878  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f1a  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a17  00000000  00000000  0000190a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008df  00000000  00000000  00002321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000640  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fb  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003b13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
  9e:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
 *  in Atmega 328P
 */
void ADC_init(void)
{
	// Use connect AREF to ACCC (reference voltage select)
	ADMUX &= ~(1<<REFS1); ADMUX |= (1<<REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	
	// set prescale to 128 (125 kHz)
	ADCSRA |= (1<<ADPS1) | (1<< ADPS0); ADCSRA &= ~(1<<ADPS2);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	80 83       	st	Z, r24
	
	// enable ADC
	//TODO: This could be power hungry since the ADC is enabled when ADC isnt being used   
	ADCSRA |= (1<<ADEN);
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <ADC_convert>:
 */
uint16_t ADC_convert(uint8_t channel)
{	
	
	// Set the channel we wish to convert
	ADMUX |= channel;
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	89 2b       	or	r24, r25
  d6:	80 83       	st	Z, r24
	
	// Start the conversion
	ADCSRA |= (1 << ADSC);
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
	
	// Wait for the conversion to finsih
	while ((ADCSRA & (1 << ADIF)) == 0);
  e2:	80 81       	ld	r24, Z
  e4:	84 ff       	sbrs	r24, 4
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <ADC_convert+0x14>
	
	// Read out the ADC counts
	uint16_t adc_count = ADC;//(ADCL << 0) | (ADCH << 8);
  e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	return adc_count;
}
  f0:	08 95       	ret

000000f2 <get_doorstate>:
/*
 *  this function gets door state
 *  it returns 1 if door is open and return 0 if door is closed 
 */ 
int get_doorstate(uint16_t adc)
{
  f2:	cf 93       	push	r28
	float value = adc*5/ADC_REF;
  f4:	bc 01       	movw	r22, r24
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	86 0f       	add	r24, r22
 100:	97 1f       	adc	r25, r23
 102:	bc 01       	movw	r22, r24
 104:	67 2f       	mov	r22, r23
 106:	77 27       	eor	r23, r23
 108:	66 95       	lsr	r22
 10a:	66 95       	lsr	r22
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 90 02 	call	0x520	; 0x520 <__floatunsisf>
 114:	9b 01       	movw	r18, r22
 116:	ac 01       	movw	r20, r24
 118:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__addsf3>
 11c:	c1 e0       	ldi	r28, 0x01	; 1
 11e:	2d ec       	ldi	r18, 0xCD	; 205
 120:	3c ec       	ldi	r19, 0xCC	; 204
 122:	4c e4       	ldi	r20, 0x4C	; 76
 124:	5f e3       	ldi	r21, 0x3F	; 63
 126:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__cmpsf2>
 12a:	18 16       	cp	r1, r24
 12c:	0c f4       	brge	.+2      	; 0x130 <get_doorstate+0x3e>
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	8c 27       	eor	r24, r28
	{	
		return Door_Closed; 
	}
	
	return Door_Opened;
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <FSM_start>:
 *  as
 */ 
void FSM_start(void)
{	
	uint8_t half_Duty_Produced = 0;
	Current_FSM_state = Initialisation_State; // Initialize current state to Initialization state
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Current_FSM_state>
	Door_State = Uknown; // Door state is unknown when programme just started
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Door_State>
	Sample_Coil_Current = 0;
 146:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sample_Coil_Current>
 *  This function represents the FSM that controls the current driver 
 *  as
 */ 
void FSM_start(void)
{	
	uint8_t half_Duty_Produced = 0;
 14a:	c0 e0       	ldi	r28, 0x00	; 0
			case Initialisation_State:
				
				
				if(!half_Duty_Produced)
				{
					Duty_Cycle = 0.5; // initialize duty cycle to 50% for sensing
 14c:	0f 2e       	mov	r0, r31
 14e:	c1 2c       	mov	r12, r1
 150:	d1 2c       	mov	r13, r1
 152:	e1 2c       	mov	r14, r1
 154:	ff e3       	ldi	r31, 0x3F	; 63
 156:	ff 2e       	mov	r15, r31
 158:	f0 2d       	mov	r31, r0
					START_16bit_COUNTER();
					half_Duty_Produced = 1;
 15a:	11 e0       	ldi	r17, 0x01	; 1
					
					if (Door_State==Door_Closed)
					{	
						//TODO: also stop pwm to stop checking
							
						Current_FSM_state= 	WaitTouch_State;					
 15c:	d2 e0       	ldi	r29, 0x02	; 2
	Sample_Coil_Current = 0;
	
	while(1)
	{	
		
		switch(Current_FSM_state)
 15e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Current_FSM_state>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	f1 f7       	brne	.-4      	; 0x162 <FSM_start+0x28>
		{
			case Initialisation_State:
				
				
				if(!half_Duty_Produced)
 166:	c1 11       	cpse	r28, r1
 168:	0b c0       	rjmp	.+22     	; 0x180 <FSM_start+0x46>
				{
					Duty_Cycle = 0.5; // initialize duty cycle to 50% for sensing
 16a:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <Duty_Cycle>
 16e:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <Duty_Cycle+0x1>
 172:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <Duty_Cycle+0x2>
 176:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <Duty_Cycle+0x3>
					START_16bit_COUNTER();
 17a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <START_16bit_COUNTER>
					half_Duty_Produced = 1;
 17e:	c1 2f       	mov	r28, r17
				}
				
				if(Sample_Coil_Current) // some flag
 180:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Sample_Coil_Current>
 184:	88 23       	and	r24, r24
 186:	59 f3       	breq	.-42     	; 0x15e <FSM_start+0x24>
				{	
					Sample_Coil_Current = 0;
 188:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sample_Coil_Current>
					uint16_t adc = ADC_convert(_PC0);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
					Door_State = get_doorstate(adc); // decide if the door is open or not
 192:	0e 94 79 00 	call	0xf2	; 0xf2 <get_doorstate>
 196:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Door_State>
					
					if (Door_State==Door_Closed)
 19a:	81 11       	cpse	r24, r1
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <FSM_start+0x6a>
					{	
						//TODO: also stop pwm to stop checking
							
						Current_FSM_state= 	WaitTouch_State;					
 19e:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <Current_FSM_state>
 1a2:	dd cf       	rjmp	.-70     	; 0x15e <FSM_start+0x24>
					}
					
					else if (Door_State== Door_Opened)
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	d9 f6       	brne	.-74     	; 0x15e <FSM_start+0x24>
					{	
						STOP_16bit_COUNTER(); // stops the pwm generator
 1a8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <STOP_16bit_COUNTER>
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <FSM_start+0x72>

000001ae <COUNTER_16bit_init>:
 *
 */ 
void COUNTER_16bit_init(void)
{
	// Set to CTC mode
	TCCR1B |= (1<<WGM12);
 1ae:	e1 e8       	ldi	r30, 0x81	; 129
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 60       	ori	r24, 0x08	; 8
 1b6:	80 83       	st	Z, r24
	
	//Enable ISR when count matches OCR1 value
	TIMSK1 |= (1<<OCIE1A);
 1b8:	ef e6       	ldi	r30, 0x6F	; 111
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	80 83       	st	Z, r24
	
	// Initial Value to count to
	OCR1A = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 1ce:	08 95       	ret

000001d0 <START_16bit_COUNTER>:
 */ 

void START_16bit_COUNTER(void)
{		
		// Resets counter value to zero
		TCNT1 = 0;
 1d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 1d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		// Set prescaller to 1024 and start counting
		TCCR1B |= (1<<CS12) | (1<<CS10); TCCR1B &= ~(1<<CS11);
 1d8:	e1 e8       	ldi	r30, 0x81	; 129
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	85 60       	ori	r24, 0x05	; 5
 1e0:	80 83       	st	Z, r24
 1e2:	80 81       	ld	r24, Z
 1e4:	8d 7f       	andi	r24, 0xFD	; 253
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <STOP_16bit_COUNTER>:
 * This function stops the 16 bit counter 
 */ 
void STOP_16bit_COUNTER(void)
{
		// Disconnect clk from timer (Stop the timer)
		TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
 1ea:	e1 e8       	ldi	r30, 0x81	; 129
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	88 7f       	andi	r24, 0xF8	; 248
 1f2:	80 83       	st	Z, r24
 1f4:	08 95       	ret

000001f6 <COUNTER_8bit_timer0_init>:
 * This function initializes the 8 bit timer (Timer0/Counter0)
 */ 
void COUNTER_8bit_timer0_init(void)
{
	// Set to CTC mode
	TCCR0A |= (1<<WGM01); TCCR0A &= ~(1<<WGM00);  TCCR0B &= (1<<WGM02);
 1f6:	84 b5       	in	r24, 0x24	; 36
 1f8:	82 60       	ori	r24, 0x02	; 2
 1fa:	84 bd       	out	0x24, r24	; 36
 1fc:	84 b5       	in	r24, 0x24	; 36
 1fe:	8e 7f       	andi	r24, 0xFE	; 254
 200:	84 bd       	out	0x24, r24	; 36
 202:	85 b5       	in	r24, 0x25	; 37
 204:	88 70       	andi	r24, 0x08	; 8
 206:	85 bd       	out	0x25, r24	; 37

	
	//Enable ISR when count matches OCR1 value
	TIMSK0 |= (1<<OCIE0A);
 208:	ee e6       	ldi	r30, 0x6E	; 110
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	80 83       	st	Z, r24
	
	// Initial Value to count to
	OCR0A = 10;
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	87 bd       	out	0x27, r24	; 39
 216:	08 95       	ret

00000218 <START_8bit_COUNTER0>:
 */ 

void START_8bit_COUNTER0(void)
{		
		// Resets counter value to zero
		TCNT0 = 0;
 218:	16 bc       	out	0x26, r1	; 38
		// Set prescaller to 1024 and start counting
		TCCR0B |= (1<<CS12); TCCR0B &= ~((1<<CS10) |(1<<CS11));
 21a:	85 b5       	in	r24, 0x25	; 37
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	85 bd       	out	0x25, r24	; 37
 220:	85 b5       	in	r24, 0x25	; 37
 222:	8c 7f       	andi	r24, 0xFC	; 252
 224:	85 bd       	out	0x25, r24	; 37
 226:	08 95       	ret

00000228 <STOP_8bit_COUNTER0>:
 * This function stops the 16 bit counter 
 */ 
void STOP_8bit_COUNTER0(void)
{
		// Disconnect clk from timer (Stop the timer)
		TCCR0B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
 228:	85 b5       	in	r24, 0x25	; 37
 22a:	88 7f       	andi	r24, 0xF8	; 248
 22c:	85 bd       	out	0x25, r24	; 37
 22e:	08 95       	ret

00000230 <GPIO_init>:
 * This function initializes all pins to Vcc
 */ 
void GPIO_init(void)
{
	// Set all pins to output
	DDRD = 0xFF; DDRC = 0xFF; DDRB = 0xFF;
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	8a b9       	out	0x0a, r24	; 10
 234:	87 b9       	out	0x07, r24	; 7
 236:	84 b9       	out	0x04, r24	; 4
	
	// Set all pins to High
	PORTD = 0xFF; PORTC = 0xFF; PORTB = 0xFF;
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	08 95       	ret

00000240 <UART_init>:
 * This function initializes the UART
 * 
 */
void UART_init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr>>8);
 240:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
 244:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 248:	88 e1       	ldi	r24, 0x18	; 24
 24a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (3<<UCSZ00);
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 254:	08 95       	ret

00000256 <__vector_11>:
/*
 * This ISR timer creates a PWM and starts the timer(3.2ms) used to measure coil current
 *
 */ 
ISR(TIMER1_COMPA_vect)
{	
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	2f 93       	push	r18
 262:	3f 93       	push	r19
 264:	4f 93       	push	r20
 266:	5f 93       	push	r21
 268:	6f 93       	push	r22
 26a:	7f 93       	push	r23
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
	if(c == 0)
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 27c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	69 f5       	brne	.+90     	; 0x2de <__vector_11+0x88>
	{
		PORTD &= ~((1<<DDD2) | (1<<DDD3) | (1<<DDD4) | (1<<DDD5));
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	83 7c       	andi	r24, 0xC3	; 195
 288:	8b b9       	out	0x0b, r24	; 11
		OCR1A = 38*(1-Duty_Cycle);
 28a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <Duty_Cycle>
 28e:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <Duty_Cycle+0x1>
 292:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <Duty_Cycle+0x2>
 296:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <Duty_Cycle+0x3>
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	9f e3       	ldi	r25, 0x3F	; 63
 2a2:	0e 94 ef 01 	call	0x3de	; 0x3de <__subsf3>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	48 e1       	ldi	r20, 0x18	; 24
 2ac:	52 e4       	ldi	r21, 0x42	; 66
 2ae:	0e 94 42 03 	call	0x684	; 0x684 <__mulsf3>
 2b2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fixunssfsi>
 2b6:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 2ba:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		c = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		count++;
 2ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 2ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <count+0x1>
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <count+0x1>
 2d8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
 2dc:	1f c0       	rjmp	.+62     	; 0x31c <__vector_11+0xc6>
	}
	else if(c == 1)
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	e9 f4       	brne	.+58     	; 0x31c <__vector_11+0xc6>
	{
		PORTD |= (1<<DDD2) | (1<<DDD3) | (1<<DDD4) | (1<<DDD5);
 2e2:	8b b1       	in	r24, 0x0b	; 11
 2e4:	8c 63       	ori	r24, 0x3C	; 60
 2e6:	8b b9       	out	0x0b, r24	; 11
		START_8bit_COUNTER0();
 2e8:	0e 94 0c 01 	call	0x218	; 0x218 <START_8bit_COUNTER0>
		OCR1A = 38*Duty_Cycle;
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	48 e1       	ldi	r20, 0x18	; 24
 2f2:	52 e4       	ldi	r21, 0x42	; 66
 2f4:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <Duty_Cycle>
 2f8:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <Duty_Cycle+0x1>
 2fc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Duty_Cycle+0x2>
 300:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Duty_Cycle+0x3>
 304:	0e 94 42 03 	call	0x684	; 0x684 <__mulsf3>
 308:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fixunssfsi>
 30c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 310:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		c = 0;
 314:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 318:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
	
	if(count == 10)
 31c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 320:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <count+0x1>
 324:	0a 97       	sbiw	r24, 0x0a	; 10
 326:	89 f4       	brne	.+34     	; 0x34a <__vector_11+0xf4>
	{	
		count = 0;
 328:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <count+0x1>
 32c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
		d_idx = (++d_idx)%9;
 330:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 334:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	69 e0       	ldi	r22, 0x09	; 9
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	0e 94 af 03 	call	0x75e	; 0x75e <__divmodhi4>
 342:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 346:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		
	}
	
}
 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__vector_14>:
 * This ISR timer counts 3.2 ms to start sampling coil current
 *it sets a flag to sample the current
 *
 */ 
ISR(TIMER0_COMPA_vect)
{	
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
	Sample_Coil_Current = 1; // set flag to initialize current sampling
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Sample_Coil_Current>
	STOP_8bit_COUNTER0(); // stop timer0 to prevent samping at other times
 394:	0e 94 14 01 	call	0x228	; 0x228 <STOP_8bit_COUNTER0>
}
 398:	ff 91       	pop	r31
 39a:	ef 91       	pop	r30
 39c:	bf 91       	pop	r27
 39e:	af 91       	pop	r26
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	7f 91       	pop	r23
 3a6:	6f 91       	pop	r22
 3a8:	5f 91       	pop	r21
 3aa:	4f 91       	pop	r20
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <main>:

int main(void)
{	
	
	ADC_init();
 3ba:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	COUNTER_16bit_init();
 3be:	0e 94 d7 00 	call	0x1ae	; 0x1ae <COUNTER_16bit_init>
	COUNTER_8bit_timer0_init();
 3c2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <COUNTER_8bit_timer0_init>
	GPIO_init();
 3c6:	0e 94 18 01 	call	0x230	; 0x230 <GPIO_init>
	UART_init(MYUBRR);
 3ca:	83 e3       	ldi	r24, 0x33	; 51
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 20 01 	call	0x240	; 0x240 <UART_init>
	sei(); // enable global interupt 
 3d2:	78 94       	sei
		
	FSM_start();
 3d4:	0e 94 9d 00 	call	0x13a	; 0x13a <FSM_start>
}
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	08 95       	ret

000003de <__subsf3>:
 3de:	50 58       	subi	r21, 0x80	; 128

000003e0 <__addsf3>:
 3e0:	bb 27       	eor	r27, r27
 3e2:	aa 27       	eor	r26, r26
 3e4:	0e 94 07 02 	call	0x40e	; 0x40e <__addsf3x>
 3e8:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_round>
 3ec:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fp_pscA>
 3f0:	38 f0       	brcs	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f2:	0e 94 01 03 	call	0x602	; 0x602 <__fp_pscB>
 3f6:	20 f0       	brcs	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	39 f4       	brne	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fa:	9f 3f       	cpi	r25, 0xFF	; 255
 3fc:	19 f4       	brne	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	26 f4       	brtc	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__fp_nan>
 404:	0e f4       	brtc	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	e0 95       	com	r30
 408:	e7 fb       	bst	r30, 7
 40a:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_inf>

0000040e <__addsf3x>:
 40e:	e9 2f       	mov	r30, r25
 410:	0e 94 19 03 	call	0x632	; 0x632 <__fp_split3>
 414:	58 f3       	brcs	.-42     	; 0x3ec <__addsf3+0xc>
 416:	ba 17       	cp	r27, r26
 418:	62 07       	cpc	r22, r18
 41a:	73 07       	cpc	r23, r19
 41c:	84 07       	cpc	r24, r20
 41e:	95 07       	cpc	r25, r21
 420:	20 f0       	brcs	.+8      	; 0x42a <__addsf3x+0x1c>
 422:	79 f4       	brne	.+30     	; 0x442 <__addsf3x+0x34>
 424:	a6 f5       	brtc	.+104    	; 0x48e <__addsf3x+0x80>
 426:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_zero>
 42a:	0e f4       	brtc	.+2      	; 0x42e <__addsf3x+0x20>
 42c:	e0 95       	com	r30
 42e:	0b 2e       	mov	r0, r27
 430:	ba 2f       	mov	r27, r26
 432:	a0 2d       	mov	r26, r0
 434:	0b 01       	movw	r0, r22
 436:	b9 01       	movw	r22, r18
 438:	90 01       	movw	r18, r0
 43a:	0c 01       	movw	r0, r24
 43c:	ca 01       	movw	r24, r20
 43e:	a0 01       	movw	r20, r0
 440:	11 24       	eor	r1, r1
 442:	ff 27       	eor	r31, r31
 444:	59 1b       	sub	r21, r25
 446:	99 f0       	breq	.+38     	; 0x46e <__addsf3x+0x60>
 448:	59 3f       	cpi	r21, 0xF9	; 249
 44a:	50 f4       	brcc	.+20     	; 0x460 <__addsf3x+0x52>
 44c:	50 3e       	cpi	r21, 0xE0	; 224
 44e:	68 f1       	brcs	.+90     	; 0x4aa <__addsf3x+0x9c>
 450:	1a 16       	cp	r1, r26
 452:	f0 40       	sbci	r31, 0x00	; 0
 454:	a2 2f       	mov	r26, r18
 456:	23 2f       	mov	r18, r19
 458:	34 2f       	mov	r19, r20
 45a:	44 27       	eor	r20, r20
 45c:	58 5f       	subi	r21, 0xF8	; 248
 45e:	f3 cf       	rjmp	.-26     	; 0x446 <__addsf3x+0x38>
 460:	46 95       	lsr	r20
 462:	37 95       	ror	r19
 464:	27 95       	ror	r18
 466:	a7 95       	ror	r26
 468:	f0 40       	sbci	r31, 0x00	; 0
 46a:	53 95       	inc	r21
 46c:	c9 f7       	brne	.-14     	; 0x460 <__addsf3x+0x52>
 46e:	7e f4       	brtc	.+30     	; 0x48e <__addsf3x+0x80>
 470:	1f 16       	cp	r1, r31
 472:	ba 0b       	sbc	r27, r26
 474:	62 0b       	sbc	r22, r18
 476:	73 0b       	sbc	r23, r19
 478:	84 0b       	sbc	r24, r20
 47a:	ba f0       	brmi	.+46     	; 0x4aa <__addsf3x+0x9c>
 47c:	91 50       	subi	r25, 0x01	; 1
 47e:	a1 f0       	breq	.+40     	; 0x4a8 <__addsf3x+0x9a>
 480:	ff 0f       	add	r31, r31
 482:	bb 1f       	adc	r27, r27
 484:	66 1f       	adc	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	88 1f       	adc	r24, r24
 48a:	c2 f7       	brpl	.-16     	; 0x47c <__addsf3x+0x6e>
 48c:	0e c0       	rjmp	.+28     	; 0x4aa <__addsf3x+0x9c>
 48e:	ba 0f       	add	r27, r26
 490:	62 1f       	adc	r22, r18
 492:	73 1f       	adc	r23, r19
 494:	84 1f       	adc	r24, r20
 496:	48 f4       	brcc	.+18     	; 0x4aa <__addsf3x+0x9c>
 498:	87 95       	ror	r24
 49a:	77 95       	ror	r23
 49c:	67 95       	ror	r22
 49e:	b7 95       	ror	r27
 4a0:	f7 95       	ror	r31
 4a2:	9e 3f       	cpi	r25, 0xFE	; 254
 4a4:	08 f0       	brcs	.+2      	; 0x4a8 <__addsf3x+0x9a>
 4a6:	b0 cf       	rjmp	.-160    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 4a8:	93 95       	inc	r25
 4aa:	88 0f       	add	r24, r24
 4ac:	08 f0       	brcs	.+2      	; 0x4b0 <__addsf3x+0xa2>
 4ae:	99 27       	eor	r25, r25
 4b0:	ee 0f       	add	r30, r30
 4b2:	97 95       	ror	r25
 4b4:	87 95       	ror	r24
 4b6:	08 95       	ret

000004b8 <__cmpsf2>:
 4b8:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_cmp>
 4bc:	08 f4       	brcc	.+2      	; 0x4c0 <__cmpsf2+0x8>
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	08 95       	ret

000004c2 <__fixunssfsi>:
 4c2:	0e 94 21 03 	call	0x642	; 0x642 <__fp_splitA>
 4c6:	88 f0       	brcs	.+34     	; 0x4ea <__fixunssfsi+0x28>
 4c8:	9f 57       	subi	r25, 0x7F	; 127
 4ca:	98 f0       	brcs	.+38     	; 0x4f2 <__fixunssfsi+0x30>
 4cc:	b9 2f       	mov	r27, r25
 4ce:	99 27       	eor	r25, r25
 4d0:	b7 51       	subi	r27, 0x17	; 23
 4d2:	b0 f0       	brcs	.+44     	; 0x500 <__fixunssfsi+0x3e>
 4d4:	e1 f0       	breq	.+56     	; 0x50e <__fixunssfsi+0x4c>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	1a f0       	brmi	.+6      	; 0x4e6 <__fixunssfsi+0x24>
 4e0:	ba 95       	dec	r27
 4e2:	c9 f7       	brne	.-14     	; 0x4d6 <__fixunssfsi+0x14>
 4e4:	14 c0       	rjmp	.+40     	; 0x50e <__fixunssfsi+0x4c>
 4e6:	b1 30       	cpi	r27, 0x01	; 1
 4e8:	91 f0       	breq	.+36     	; 0x50e <__fixunssfsi+0x4c>
 4ea:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_zero>
 4ee:	b1 e0       	ldi	r27, 0x01	; 1
 4f0:	08 95       	ret
 4f2:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_zero>
 4f6:	67 2f       	mov	r22, r23
 4f8:	78 2f       	mov	r23, r24
 4fa:	88 27       	eor	r24, r24
 4fc:	b8 5f       	subi	r27, 0xF8	; 248
 4fe:	39 f0       	breq	.+14     	; 0x50e <__fixunssfsi+0x4c>
 500:	b9 3f       	cpi	r27, 0xF9	; 249
 502:	cc f3       	brlt	.-14     	; 0x4f6 <__fixunssfsi+0x34>
 504:	86 95       	lsr	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b3 95       	inc	r27
 50c:	d9 f7       	brne	.-10     	; 0x504 <__fixunssfsi+0x42>
 50e:	3e f4       	brtc	.+14     	; 0x51e <__fixunssfsi+0x5c>
 510:	90 95       	com	r25
 512:	80 95       	com	r24
 514:	70 95       	com	r23
 516:	61 95       	neg	r22
 518:	7f 4f       	sbci	r23, 0xFF	; 255
 51a:	8f 4f       	sbci	r24, 0xFF	; 255
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	08 95       	ret

00000520 <__floatunsisf>:
 520:	e8 94       	clt
 522:	09 c0       	rjmp	.+18     	; 0x536 <__floatsisf+0x12>

00000524 <__floatsisf>:
 524:	97 fb       	bst	r25, 7
 526:	3e f4       	brtc	.+14     	; 0x536 <__floatsisf+0x12>
 528:	90 95       	com	r25
 52a:	80 95       	com	r24
 52c:	70 95       	com	r23
 52e:	61 95       	neg	r22
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	8f 4f       	sbci	r24, 0xFF	; 255
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	99 23       	and	r25, r25
 538:	a9 f0       	breq	.+42     	; 0x564 <__floatsisf+0x40>
 53a:	f9 2f       	mov	r31, r25
 53c:	96 e9       	ldi	r25, 0x96	; 150
 53e:	bb 27       	eor	r27, r27
 540:	93 95       	inc	r25
 542:	f6 95       	lsr	r31
 544:	87 95       	ror	r24
 546:	77 95       	ror	r23
 548:	67 95       	ror	r22
 54a:	b7 95       	ror	r27
 54c:	f1 11       	cpse	r31, r1
 54e:	f8 cf       	rjmp	.-16     	; 0x540 <__floatsisf+0x1c>
 550:	fa f4       	brpl	.+62     	; 0x590 <__floatsisf+0x6c>
 552:	bb 0f       	add	r27, r27
 554:	11 f4       	brne	.+4      	; 0x55a <__floatsisf+0x36>
 556:	60 ff       	sbrs	r22, 0
 558:	1b c0       	rjmp	.+54     	; 0x590 <__floatsisf+0x6c>
 55a:	6f 5f       	subi	r22, 0xFF	; 255
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	8f 4f       	sbci	r24, 0xFF	; 255
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	16 c0       	rjmp	.+44     	; 0x590 <__floatsisf+0x6c>
 564:	88 23       	and	r24, r24
 566:	11 f0       	breq	.+4      	; 0x56c <__floatsisf+0x48>
 568:	96 e9       	ldi	r25, 0x96	; 150
 56a:	11 c0       	rjmp	.+34     	; 0x58e <__floatsisf+0x6a>
 56c:	77 23       	and	r23, r23
 56e:	21 f0       	breq	.+8      	; 0x578 <__floatsisf+0x54>
 570:	9e e8       	ldi	r25, 0x8E	; 142
 572:	87 2f       	mov	r24, r23
 574:	76 2f       	mov	r23, r22
 576:	05 c0       	rjmp	.+10     	; 0x582 <__floatsisf+0x5e>
 578:	66 23       	and	r22, r22
 57a:	71 f0       	breq	.+28     	; 0x598 <__floatsisf+0x74>
 57c:	96 e8       	ldi	r25, 0x86	; 134
 57e:	86 2f       	mov	r24, r22
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	2a f0       	brmi	.+10     	; 0x590 <__floatsisf+0x6c>
 586:	9a 95       	dec	r25
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	da f7       	brpl	.-10     	; 0x586 <__floatsisf+0x62>
 590:	88 0f       	add	r24, r24
 592:	96 95       	lsr	r25
 594:	87 95       	ror	r24
 596:	97 f9       	bld	r25, 7
 598:	08 95       	ret

0000059a <__fp_cmp>:
 59a:	99 0f       	add	r25, r25
 59c:	00 08       	sbc	r0, r0
 59e:	55 0f       	add	r21, r21
 5a0:	aa 0b       	sbc	r26, r26
 5a2:	e0 e8       	ldi	r30, 0x80	; 128
 5a4:	fe ef       	ldi	r31, 0xFE	; 254
 5a6:	16 16       	cp	r1, r22
 5a8:	17 06       	cpc	r1, r23
 5aa:	e8 07       	cpc	r30, r24
 5ac:	f9 07       	cpc	r31, r25
 5ae:	c0 f0       	brcs	.+48     	; 0x5e0 <__fp_cmp+0x46>
 5b0:	12 16       	cp	r1, r18
 5b2:	13 06       	cpc	r1, r19
 5b4:	e4 07       	cpc	r30, r20
 5b6:	f5 07       	cpc	r31, r21
 5b8:	98 f0       	brcs	.+38     	; 0x5e0 <__fp_cmp+0x46>
 5ba:	62 1b       	sub	r22, r18
 5bc:	73 0b       	sbc	r23, r19
 5be:	84 0b       	sbc	r24, r20
 5c0:	95 0b       	sbc	r25, r21
 5c2:	39 f4       	brne	.+14     	; 0x5d2 <__fp_cmp+0x38>
 5c4:	0a 26       	eor	r0, r26
 5c6:	61 f0       	breq	.+24     	; 0x5e0 <__fp_cmp+0x46>
 5c8:	23 2b       	or	r18, r19
 5ca:	24 2b       	or	r18, r20
 5cc:	25 2b       	or	r18, r21
 5ce:	21 f4       	brne	.+8      	; 0x5d8 <__fp_cmp+0x3e>
 5d0:	08 95       	ret
 5d2:	0a 26       	eor	r0, r26
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <__fp_cmp+0x3e>
 5d6:	a1 40       	sbci	r26, 0x01	; 1
 5d8:	a6 95       	lsr	r26
 5da:	8f ef       	ldi	r24, 0xFF	; 255
 5dc:	81 1d       	adc	r24, r1
 5de:	81 1d       	adc	r24, r1
 5e0:	08 95       	ret

000005e2 <__fp_inf>:
 5e2:	97 f9       	bld	r25, 7
 5e4:	9f 67       	ori	r25, 0x7F	; 127
 5e6:	80 e8       	ldi	r24, 0x80	; 128
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	08 95       	ret

000005ee <__fp_nan>:
 5ee:	9f ef       	ldi	r25, 0xFF	; 255
 5f0:	80 ec       	ldi	r24, 0xC0	; 192
 5f2:	08 95       	ret

000005f4 <__fp_pscA>:
 5f4:	00 24       	eor	r0, r0
 5f6:	0a 94       	dec	r0
 5f8:	16 16       	cp	r1, r22
 5fa:	17 06       	cpc	r1, r23
 5fc:	18 06       	cpc	r1, r24
 5fe:	09 06       	cpc	r0, r25
 600:	08 95       	ret

00000602 <__fp_pscB>:
 602:	00 24       	eor	r0, r0
 604:	0a 94       	dec	r0
 606:	12 16       	cp	r1, r18
 608:	13 06       	cpc	r1, r19
 60a:	14 06       	cpc	r1, r20
 60c:	05 06       	cpc	r0, r21
 60e:	08 95       	ret

00000610 <__fp_round>:
 610:	09 2e       	mov	r0, r25
 612:	03 94       	inc	r0
 614:	00 0c       	add	r0, r0
 616:	11 f4       	brne	.+4      	; 0x61c <__fp_round+0xc>
 618:	88 23       	and	r24, r24
 61a:	52 f0       	brmi	.+20     	; 0x630 <__fp_round+0x20>
 61c:	bb 0f       	add	r27, r27
 61e:	40 f4       	brcc	.+16     	; 0x630 <__fp_round+0x20>
 620:	bf 2b       	or	r27, r31
 622:	11 f4       	brne	.+4      	; 0x628 <__fp_round+0x18>
 624:	60 ff       	sbrs	r22, 0
 626:	04 c0       	rjmp	.+8      	; 0x630 <__fp_round+0x20>
 628:	6f 5f       	subi	r22, 0xFF	; 255
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	8f 4f       	sbci	r24, 0xFF	; 255
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	08 95       	ret

00000632 <__fp_split3>:
 632:	57 fd       	sbrc	r21, 7
 634:	90 58       	subi	r25, 0x80	; 128
 636:	44 0f       	add	r20, r20
 638:	55 1f       	adc	r21, r21
 63a:	59 f0       	breq	.+22     	; 0x652 <__fp_splitA+0x10>
 63c:	5f 3f       	cpi	r21, 0xFF	; 255
 63e:	71 f0       	breq	.+28     	; 0x65c <__fp_splitA+0x1a>
 640:	47 95       	ror	r20

00000642 <__fp_splitA>:
 642:	88 0f       	add	r24, r24
 644:	97 fb       	bst	r25, 7
 646:	99 1f       	adc	r25, r25
 648:	61 f0       	breq	.+24     	; 0x662 <__fp_splitA+0x20>
 64a:	9f 3f       	cpi	r25, 0xFF	; 255
 64c:	79 f0       	breq	.+30     	; 0x66c <__fp_splitA+0x2a>
 64e:	87 95       	ror	r24
 650:	08 95       	ret
 652:	12 16       	cp	r1, r18
 654:	13 06       	cpc	r1, r19
 656:	14 06       	cpc	r1, r20
 658:	55 1f       	adc	r21, r21
 65a:	f2 cf       	rjmp	.-28     	; 0x640 <__fp_split3+0xe>
 65c:	46 95       	lsr	r20
 65e:	f1 df       	rcall	.-30     	; 0x642 <__fp_splitA>
 660:	08 c0       	rjmp	.+16     	; 0x672 <__fp_splitA+0x30>
 662:	16 16       	cp	r1, r22
 664:	17 06       	cpc	r1, r23
 666:	18 06       	cpc	r1, r24
 668:	99 1f       	adc	r25, r25
 66a:	f1 cf       	rjmp	.-30     	; 0x64e <__fp_splitA+0xc>
 66c:	86 95       	lsr	r24
 66e:	71 05       	cpc	r23, r1
 670:	61 05       	cpc	r22, r1
 672:	08 94       	sec
 674:	08 95       	ret

00000676 <__fp_zero>:
 676:	e8 94       	clt

00000678 <__fp_szero>:
 678:	bb 27       	eor	r27, r27
 67a:	66 27       	eor	r22, r22
 67c:	77 27       	eor	r23, r23
 67e:	cb 01       	movw	r24, r22
 680:	97 f9       	bld	r25, 7
 682:	08 95       	ret

00000684 <__mulsf3>:
 684:	0e 94 55 03 	call	0x6aa	; 0x6aa <__mulsf3x>
 688:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_round>
 68c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fp_pscA>
 690:	38 f0       	brcs	.+14     	; 0x6a0 <__mulsf3+0x1c>
 692:	0e 94 01 03 	call	0x602	; 0x602 <__fp_pscB>
 696:	20 f0       	brcs	.+8      	; 0x6a0 <__mulsf3+0x1c>
 698:	95 23       	and	r25, r21
 69a:	11 f0       	breq	.+4      	; 0x6a0 <__mulsf3+0x1c>
 69c:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_inf>
 6a0:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__fp_nan>
 6a4:	11 24       	eor	r1, r1
 6a6:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_szero>

000006aa <__mulsf3x>:
 6aa:	0e 94 19 03 	call	0x632	; 0x632 <__fp_split3>
 6ae:	70 f3       	brcs	.-36     	; 0x68c <__mulsf3+0x8>

000006b0 <__mulsf3_pse>:
 6b0:	95 9f       	mul	r25, r21
 6b2:	c1 f3       	breq	.-16     	; 0x6a4 <__mulsf3+0x20>
 6b4:	95 0f       	add	r25, r21
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	55 1f       	adc	r21, r21
 6ba:	62 9f       	mul	r22, r18
 6bc:	f0 01       	movw	r30, r0
 6be:	72 9f       	mul	r23, r18
 6c0:	bb 27       	eor	r27, r27
 6c2:	f0 0d       	add	r31, r0
 6c4:	b1 1d       	adc	r27, r1
 6c6:	63 9f       	mul	r22, r19
 6c8:	aa 27       	eor	r26, r26
 6ca:	f0 0d       	add	r31, r0
 6cc:	b1 1d       	adc	r27, r1
 6ce:	aa 1f       	adc	r26, r26
 6d0:	64 9f       	mul	r22, r20
 6d2:	66 27       	eor	r22, r22
 6d4:	b0 0d       	add	r27, r0
 6d6:	a1 1d       	adc	r26, r1
 6d8:	66 1f       	adc	r22, r22
 6da:	82 9f       	mul	r24, r18
 6dc:	22 27       	eor	r18, r18
 6de:	b0 0d       	add	r27, r0
 6e0:	a1 1d       	adc	r26, r1
 6e2:	62 1f       	adc	r22, r18
 6e4:	73 9f       	mul	r23, r19
 6e6:	b0 0d       	add	r27, r0
 6e8:	a1 1d       	adc	r26, r1
 6ea:	62 1f       	adc	r22, r18
 6ec:	83 9f       	mul	r24, r19
 6ee:	a0 0d       	add	r26, r0
 6f0:	61 1d       	adc	r22, r1
 6f2:	22 1f       	adc	r18, r18
 6f4:	74 9f       	mul	r23, r20
 6f6:	33 27       	eor	r19, r19
 6f8:	a0 0d       	add	r26, r0
 6fa:	61 1d       	adc	r22, r1
 6fc:	23 1f       	adc	r18, r19
 6fe:	84 9f       	mul	r24, r20
 700:	60 0d       	add	r22, r0
 702:	21 1d       	adc	r18, r1
 704:	82 2f       	mov	r24, r18
 706:	76 2f       	mov	r23, r22
 708:	6a 2f       	mov	r22, r26
 70a:	11 24       	eor	r1, r1
 70c:	9f 57       	subi	r25, 0x7F	; 127
 70e:	50 40       	sbci	r21, 0x00	; 0
 710:	9a f0       	brmi	.+38     	; 0x738 <__mulsf3_pse+0x88>
 712:	f1 f0       	breq	.+60     	; 0x750 <__mulsf3_pse+0xa0>
 714:	88 23       	and	r24, r24
 716:	4a f0       	brmi	.+18     	; 0x72a <__mulsf3_pse+0x7a>
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	bb 1f       	adc	r27, r27
 71e:	66 1f       	adc	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	88 1f       	adc	r24, r24
 724:	91 50       	subi	r25, 0x01	; 1
 726:	50 40       	sbci	r21, 0x00	; 0
 728:	a9 f7       	brne	.-22     	; 0x714 <__mulsf3_pse+0x64>
 72a:	9e 3f       	cpi	r25, 0xFE	; 254
 72c:	51 05       	cpc	r21, r1
 72e:	80 f0       	brcs	.+32     	; 0x750 <__mulsf3_pse+0xa0>
 730:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_inf>
 734:	0c 94 3c 03 	jmp	0x678	; 0x678 <__fp_szero>
 738:	5f 3f       	cpi	r21, 0xFF	; 255
 73a:	e4 f3       	brlt	.-8      	; 0x734 <__mulsf3_pse+0x84>
 73c:	98 3e       	cpi	r25, 0xE8	; 232
 73e:	d4 f3       	brlt	.-12     	; 0x734 <__mulsf3_pse+0x84>
 740:	86 95       	lsr	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b7 95       	ror	r27
 748:	f7 95       	ror	r31
 74a:	e7 95       	ror	r30
 74c:	9f 5f       	subi	r25, 0xFF	; 255
 74e:	c1 f7       	brne	.-16     	; 0x740 <__mulsf3_pse+0x90>
 750:	fe 2b       	or	r31, r30
 752:	88 0f       	add	r24, r24
 754:	91 1d       	adc	r25, r1
 756:	96 95       	lsr	r25
 758:	87 95       	ror	r24
 75a:	97 f9       	bld	r25, 7
 75c:	08 95       	ret

0000075e <__divmodhi4>:
 75e:	97 fb       	bst	r25, 7
 760:	07 2e       	mov	r0, r23
 762:	16 f4       	brtc	.+4      	; 0x768 <__divmodhi4+0xa>
 764:	00 94       	com	r0
 766:	07 d0       	rcall	.+14     	; 0x776 <__divmodhi4_neg1>
 768:	77 fd       	sbrc	r23, 7
 76a:	09 d0       	rcall	.+18     	; 0x77e <__divmodhi4_neg2>
 76c:	0e 94 c3 03 	call	0x786	; 0x786 <__udivmodhi4>
 770:	07 fc       	sbrc	r0, 7
 772:	05 d0       	rcall	.+10     	; 0x77e <__divmodhi4_neg2>
 774:	3e f4       	brtc	.+14     	; 0x784 <__divmodhi4_exit>

00000776 <__divmodhi4_neg1>:
 776:	90 95       	com	r25
 778:	81 95       	neg	r24
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	08 95       	ret

0000077e <__divmodhi4_neg2>:
 77e:	70 95       	com	r23
 780:	61 95       	neg	r22
 782:	7f 4f       	sbci	r23, 0xFF	; 255

00000784 <__divmodhi4_exit>:
 784:	08 95       	ret

00000786 <__udivmodhi4>:
 786:	aa 1b       	sub	r26, r26
 788:	bb 1b       	sub	r27, r27
 78a:	51 e1       	ldi	r21, 0x11	; 17
 78c:	07 c0       	rjmp	.+14     	; 0x79c <__udivmodhi4_ep>

0000078e <__udivmodhi4_loop>:
 78e:	aa 1f       	adc	r26, r26
 790:	bb 1f       	adc	r27, r27
 792:	a6 17       	cp	r26, r22
 794:	b7 07       	cpc	r27, r23
 796:	10 f0       	brcs	.+4      	; 0x79c <__udivmodhi4_ep>
 798:	a6 1b       	sub	r26, r22
 79a:	b7 0b       	sbc	r27, r23

0000079c <__udivmodhi4_ep>:
 79c:	88 1f       	adc	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	5a 95       	dec	r21
 7a2:	a9 f7       	brne	.-22     	; 0x78e <__udivmodhi4_loop>
 7a4:	80 95       	com	r24
 7a6:	90 95       	com	r25
 7a8:	bc 01       	movw	r22, r24
 7aa:	cd 01       	movw	r24, r26
 7ac:	08 95       	ret

000007ae <_exit>:
 7ae:	f8 94       	cli

000007b0 <__stop_program>:
 7b0:	ff cf       	rjmp	.-2      	; 0x7b0 <__stop_program>
