
Magnetic_Door_Opener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ad  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ea  00000000  00000000  00000985  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cc  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000133c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5d 00 	call	0xba	; 0xba <main>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_init>:
 *  in Atmega 328P
 */
void ADC_init(void)
{
	// Use connect AREF to ACCC (reference voltage select)
	ADMUX &= ~(1<<REFS1); ADMUX |= (1<<REFS0);
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	80 83       	st	Z, r24
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	
	// set prescale to 128 (125 kHz)
	ADCSRA |= (1<<ADPS1) | (1<< ADPS0); ADCSRA &= ~(1<<ADPS2);
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	83 60       	ori	r24, 0x03	; 3
  98:	80 83       	st	Z, r24
  9a:	80 81       	ld	r24, Z
  9c:	8b 7f       	andi	r24, 0xFB	; 251
  9e:	80 83       	st	Z, r24
	
	// enable ADC
	//TODO: This could be power hungry since the ADC is enabled when ADC isnt being used   
	ADCSRA |= (1<<ADEN);
  a0:	80 81       	ld	r24, Z
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <ADC_convert>:
 *	returns the ADC value as a 16 bit integer.
 */
uint16_t ADC_convert(uint8_t channel)
{	
	// select channel to convert
	ADMUX = channel;
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	
	// start conversion
	ADCSRA |= (1<<ADSC); 
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	
	// wait until conversion finishes
	while(((1<<ADSC)|(ADCSRA<<ADSC)) != 0);
  b6:	80 81       	ld	r24, Z
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <ADC_convert+0xe>

000000ba <main>:


int main(void)
{	
	
	ADC_init();
  ba:	0e 94 40 00 	call	0x80	; 0x80 <ADC_init>
    while (1) 
    {
		uint16_t adc =  ADC_convert(_PC0);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_convert>
  c4:	fc cf       	rjmp	.-8      	; 0xbe <main+0x4>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
