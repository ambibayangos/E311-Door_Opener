
Magnetic_Door_Opener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000788  0000081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080012a  0080012a  00000846  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000846  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000878  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca1  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  00001639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d8  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d6  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a8  00000000  00000000  00002cee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 17 02 	call	0x42e	; 0x42e <main>
  9e:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
 *  in Atmega 328P
 */
void ADC_init(void)
{
	// Use connect AREF to ACCC (reference voltage select)
	ADMUX &= ~(1<<REFS1); ADMUX |= (1<<REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	
	// set prescale to 128 (125 kHz)
	ADCSRA |= (1<<ADPS1) | (1<< ADPS0); ADCSRA &= ~(1<<ADPS2);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	80 83       	st	Z, r24
	
	// enable ADC
	//TODO: This could be power hungry since the ADC is enabled when ADC isnt being used   
	ADCSRA |= (1<<ADEN);
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <ADC_convert>:
	
	return result;
	*/
	
	// Set the channel we wish to convert
	ADMUX |= channel;
  ce:	ec e7       	ldi	r30, 0x7C	; 124
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	89 2b       	or	r24, r25
  d6:	80 83       	st	Z, r24
	
	// Start the conversion
	ADCSRA |= (1 << ADSC);
  d8:	ea e7       	ldi	r30, 0x7A	; 122
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
	
	// Wait for the conversion to finsih
	while ((ADCSRA & (1 << ADIF)) == 0);
  e2:	80 81       	ld	r24, Z
  e4:	84 ff       	sbrs	r24, 4
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <ADC_convert+0x14>
	
	// Read out the ADC counts
	uint16_t adc_count = ADC;//(ADCL << 0) | (ADCH << 8);
  e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	return adc_count;
}
  f0:	08 95       	ret

000000f2 <COUNTER_16bit_init>:
 *
 */ 
void COUNTER_16bit_init(void)
{
	// Set to CTC mode
	TCCR1B |= (1<<WGM12);
  f2:	e1 e8       	ldi	r30, 0x81	; 129
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24
	
	//Enable ISR when count matches OCR1 value
	TIMSK1 |= (1<<OCIE1A);
  fc:	af e6       	ldi	r26, 0x6F	; 111
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	8c 91       	ld	r24, X
 102:	82 60       	ori	r24, 0x02	; 2
 104:	8c 93       	st	X, r24
	
	// Initial Value to count to
	OCR1A = 20;
 106:	84 e1       	ldi	r24, 0x14	; 20
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 10e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	// Set prescaller to 1024 and start counting
	TCCR1B |= (1<<CS12) | (1<<CS10);
 112:	80 81       	ld	r24, Z
 114:	85 60       	ori	r24, 0x05	; 5
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <GPIO_init>:
 * This function initializes all pins to Vcc
 */ 
void GPIO_init(void)
{
	// Set all pins to output
	DDRD = 0xFF; DDRC = 0xFF; DDRB = 0xFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	8a b9       	out	0x0a, r24	; 10
 11e:	87 b9       	out	0x07, r24	; 7
 120:	84 b9       	out	0x04, r24	; 4
	
	// Set all pins to High
	PORTD = 0xFF; PORTC = 0xFF; PORTB = 0xFF;
 122:	8b b9       	out	0x0b, r24	; 11
 124:	88 b9       	out	0x08, r24	; 8
 126:	85 b9       	out	0x05, r24	; 5
 128:	08 95       	ret

0000012a <UART_init>:
 * This function initializes the UART
 * 
 */
void UART_init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr>>8);
 12a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
 12e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 132:	88 e1       	ldi	r24, 0x18	; 24
 134:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (3<<UCSZ00);
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 13e:	08 95       	ret

00000140 <UART_transmit_char>:
 * This function transmit a character serially via UART
 * 
 */
void UART_transmit_char(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));
 140:	e0 ec       	ldi	r30, 0xC0	; 192
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	95 ff       	sbrs	r25, 5
 148:	fd cf       	rjmp	.-6      	; 0x144 <UART_transmit_char+0x4>
	UDR0 = data;
 14a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 14e:	08 95       	ret

00000150 <UART_transmit_string>:
/*
 * This function transmit a string serially via UART
 * 
 */
void UART_transmit_string(char *str)
{
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	8c 01       	movw	r16, r24
 15e:	7c 01       	movw	r14, r24
	int i;
	for(i = 0; i < strlen(str); i++) {
 160:	c0 e0       	ldi	r28, 0x00	; 0
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	06 c0       	rjmp	.+12     	; 0x172 <UART_transmit_string+0x22>
		UART_transmit_char(str[i]);
 166:	f7 01       	movw	r30, r14
 168:	81 91       	ld	r24, Z+
 16a:	7f 01       	movw	r14, r30
 16c:	0e 94 a0 00 	call	0x140	; 0x140 <UART_transmit_char>
 * 
 */
void UART_transmit_string(char *str)
{
	int i;
	for(i = 0; i < strlen(str); i++) {
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	f8 01       	movw	r30, r16
 174:	01 90       	ld	r0, Z+
 176:	00 20       	and	r0, r0
 178:	e9 f7       	brne	.-6      	; 0x174 <UART_transmit_string+0x24>
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	e0 1b       	sub	r30, r16
 17e:	f1 0b       	sbc	r31, r17
 180:	ce 17       	cp	r28, r30
 182:	df 07       	cpc	r29, r31
 184:	80 f3       	brcs	.-32     	; 0x166 <UART_transmit_string+0x16>
		UART_transmit_char(str[i]);
	}
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	08 95       	ret

00000194 <uart_transmit_byte>:
 * This function transmits a byte serially via UART
 */
void uart_transmit_byte(uint8_t byte)
{
	// Wait for the UART data register empty flag
	while ((UCSR0A & 0x20) == 0) {
 194:	e0 ec       	ldi	r30, 0xC0	; 192
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	90 81       	ld	r25, Z
 19a:	95 ff       	sbrs	r25, 5
 19c:	fd cf       	rjmp	.-6      	; 0x198 <uart_transmit_byte+0x4>
		;
	}
	
	// Put the byte to be sent into the data register
	UDR0 = byte;
 19e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1a2:	08 95       	ret

000001a4 <UART_transmit>:

/* 
 * This function transmits an array of byte serially via UART
 */
void UART_transmit(uint8_t* byte_array, uint32_t byte_array_length)
{
 1a4:	8f 92       	push	r8
 1a6:	9f 92       	push	r9
 1a8:	af 92       	push	r10
 1aa:	bf 92       	push	r11
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	// Loop through each byte
	for (uint32_t i = 0; i < byte_array_length; i++) {
 1b8:	41 15       	cp	r20, r1
 1ba:	51 05       	cpc	r21, r1
 1bc:	61 05       	cpc	r22, r1
 1be:	71 05       	cpc	r23, r1
 1c0:	a1 f0       	breq	.+40     	; 0x1ea <UART_transmit+0x46>
 1c2:	4a 01       	movw	r8, r20
 1c4:	5b 01       	movw	r10, r22
 1c6:	c8 2f       	mov	r28, r24
 1c8:	d9 2f       	mov	r29, r25
 1ca:	c1 2c       	mov	r12, r1
 1cc:	d1 2c       	mov	r13, r1
 1ce:	76 01       	movw	r14, r12
		// Transmit it via the UART
		uart_transmit_byte(byte_array[i]);
 1d0:	89 91       	ld	r24, Y+
 1d2:	0e 94 ca 00 	call	0x194	; 0x194 <uart_transmit_byte>
 * This function transmits an array of byte serially via UART
 */
void UART_transmit(uint8_t* byte_array, uint32_t byte_array_length)
{
	// Loop through each byte
	for (uint32_t i = 0; i < byte_array_length; i++) {
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	c8 1a       	sub	r12, r24
 1da:	d8 0a       	sbc	r13, r24
 1dc:	e8 0a       	sbc	r14, r24
 1de:	f8 0a       	sbc	r15, r24
 1e0:	8c 14       	cp	r8, r12
 1e2:	9d 04       	cpc	r9, r13
 1e4:	ae 04       	cpc	r10, r14
 1e6:	bf 04       	cpc	r11, r15
 1e8:	99 f7       	brne	.-26     	; 0x1d0 <UART_transmit+0x2c>
		// Transmit it via the UART
		uart_transmit_byte(byte_array[i]);
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	df 90       	pop	r13
 1f4:	cf 90       	pop	r12
 1f6:	bf 90       	pop	r11
 1f8:	af 90       	pop	r10
 1fa:	9f 90       	pop	r9
 1fc:	8f 90       	pop	r8
 1fe:	08 95       	ret

00000200 <int2str>:
 * e.g int a = 123
 * becomes b[3] = {"1","2","3"} 
 */

uint32_t int2str(uint16_t number, uint8_t* buffer)
{
 200:	cf 92       	push	r12
 202:	df 92       	push	r13
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15
 208:	ac 01       	movw	r20, r24
	uint32_t i = 0;
	
	if(number == 0) buffer[0] = 0;
 20a:	89 2b       	or	r24, r25
 20c:	31 f4       	brne	.+12     	; 0x21a <int2str+0x1a>
 20e:	fb 01       	movw	r30, r22
 210:	10 82       	st	Z, r1
 212:	c1 2c       	mov	r12, r1
 214:	d1 2c       	mov	r13, r1
 216:	76 01       	movw	r14, r12
 218:	32 c0       	rjmp	.+100    	; 0x27e <int2str+0x7e>
 21a:	fb 01       	movw	r30, r22
 21c:	c1 2c       	mov	r12, r1
 21e:	d1 2c       	mov	r13, r1
 220:	76 01       	movw	r14, r12
	while(number != 0)
	{
		buffer[i] = (number%10) + 48;
 222:	9a 01       	movw	r18, r20
 224:	ad ec       	ldi	r26, 0xCD	; 205
 226:	bc ec       	ldi	r27, 0xCC	; 204
 228:	0e 94 9f 03 	call	0x73e	; 0x73e <__umulhisi3>
 22c:	96 95       	lsr	r25
 22e:	87 95       	ror	r24
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	9c 01       	movw	r18, r24
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	82 0f       	add	r24, r18
 24c:	93 1f       	adc	r25, r19
 24e:	9a 01       	movw	r18, r20
 250:	28 1b       	sub	r18, r24
 252:	39 0b       	sbc	r19, r25
 254:	c9 01       	movw	r24, r18
 256:	80 5d       	subi	r24, 0xD0	; 208
 258:	81 93       	st	Z+, r24
		number = number/10;
 25a:	9a 01       	movw	r18, r20
 25c:	0e 94 9f 03 	call	0x73e	; 0x73e <__umulhisi3>
 260:	ac 01       	movw	r20, r24
 262:	56 95       	lsr	r21
 264:	47 95       	ror	r20
 266:	56 95       	lsr	r21
 268:	47 95       	ror	r20
 26a:	56 95       	lsr	r21
 26c:	47 95       	ror	r20
		i++;
 26e:	3f ef       	ldi	r19, 0xFF	; 255
 270:	c3 1a       	sub	r12, r19
 272:	d3 0a       	sbc	r13, r19
 274:	e3 0a       	sbc	r14, r19
 276:	f3 0a       	sbc	r15, r19
uint32_t int2str(uint16_t number, uint8_t* buffer)
{
	uint32_t i = 0;
	
	if(number == 0) buffer[0] = 0;
	while(number != 0)
 278:	41 15       	cp	r20, r1
 27a:	51 05       	cpc	r21, r1
 27c:	91 f6       	brne	.-92     	; 0x222 <int2str+0x22>
	}
	*/
	
	
	return i;
 27e:	c7 01       	movw	r24, r14
 280:	b6 01       	movw	r22, r12
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	df 90       	pop	r13
 288:	cf 90       	pop	r12
 28a:	08 95       	ret

0000028c <UART_transmit_number>:

/* 
 * This function transmits a number via uart
 */
void UART_transmit_number(uint16_t data)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	2a 97       	sbiw	r28, 0x0a	; 10
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte_array[10];
 	uint32_t byte_array_length = int2str(data,byte_array);
 2a0:	be 01       	movw	r22, r28
 2a2:	6f 5f       	subi	r22, 0xFF	; 255
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	0e 94 00 01 	call	0x200	; 0x200 <int2str>
 2aa:	ab 01       	movw	r20, r22
 2ac:	bc 01       	movw	r22, r24
	UART_transmit(byte_array,byte_array_length);
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <UART_transmit>
}
 2b6:	2a 96       	adiw	r28, 0x0a	; 10
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <__vector_11>:
int c = 1;
float duty[9] = {0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9};
int count = 0;
int  d_idx = 0;
ISR(TIMER1_COMPA_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	4f 93       	push	r20
 2d8:	5f 93       	push	r21
 2da:	6f 93       	push	r22
 2dc:	7f 93       	push	r23
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31
	if(c == 0)
 2ea:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <c>
 2ee:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <c+0x1>
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <__vector_11+0x30>
 2f6:	50 c0       	rjmp	.+160    	; 0x398 <__vector_11+0xd0>
	{
		PORTD &= ~((1<<DDD2) | (1<<DDD3) | (1<<DDD4) | (1<<DDD5));
 2f8:	8b b1       	in	r24, 0x0b	; 11
 2fa:	83 7c       	andi	r24, 0xC3	; 195
 2fc:	8b b9       	out	0x0b, r24	; 11
		OCR1A = 38*(1-duty[d_idx]);
 2fe:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 302:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__data_end+0x1>
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	e0 50       	subi	r30, 0x00	; 0
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	20 81       	ld	r18, Z
 314:	31 81       	ldd	r19, Z+1	; 0x01
 316:	42 81       	ldd	r20, Z+2	; 0x02
 318:	53 81       	ldd	r21, Z+3	; 0x03
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	9f e3       	ldi	r25, 0x3F	; 63
 322:	0e 94 31 02 	call	0x462	; 0x462 <__subsf3>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	48 e1       	ldi	r20, 0x18	; 24
 32c:	52 e4       	ldi	r21, 0x42	; 66
 32e:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 332:	0e 94 9e 02 	call	0x53c	; 0x53c <__fixunssfsi>
 336:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 33a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		c = 1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <c+0x1>
 346:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <c>
		count++;
 34a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <count>
 34e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <count+0x1>
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <count+0x1>
 358:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <count>
		UART_transmit_number(duty[d_idx]*100);
 35c:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 360:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__data_end+0x1>
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	e0 50       	subi	r30, 0x00	; 0
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	48 ec       	ldi	r20, 0xC8	; 200
 376:	52 e4       	ldi	r21, 0x42	; 66
 378:	60 81       	ld	r22, Z
 37a:	71 81       	ldd	r23, Z+1	; 0x01
 37c:	82 81       	ldd	r24, Z+2	; 0x02
 37e:	93 81       	ldd	r25, Z+3	; 0x03
 380:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 384:	0e 94 9e 02 	call	0x53c	; 0x53c <__fixunssfsi>
 388:	cb 01       	movw	r24, r22
 38a:	0e 94 46 01 	call	0x28c	; 0x28c <UART_transmit_number>
		UART_transmit_string("\n\r");
 38e:	86 e2       	ldi	r24, 0x26	; 38
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 a8 00 	call	0x150	; 0x150 <UART_transmit_string>
 396:	23 c0       	rjmp	.+70     	; 0x3de <__vector_11+0x116>
	}
	else if(c == 1)
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	09 f5       	brne	.+66     	; 0x3de <__vector_11+0x116>
	{
		PORTD |= (1<<DDD2) | (1<<DDD3) | (1<<DDD4) | (1<<DDD5);
 39c:	8b b1       	in	r24, 0x0b	; 11
 39e:	8c 63       	ori	r24, 0x3C	; 60
 3a0:	8b b9       	out	0x0b, r24	; 11
		OCR1A = 38*duty[d_idx];
 3a2:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
 3a6:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__data_end+0x1>
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	e0 50       	subi	r30, 0x00	; 0
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	48 e1       	ldi	r20, 0x18	; 24
 3bc:	52 e4       	ldi	r21, 0x42	; 66
 3be:	60 81       	ld	r22, Z
 3c0:	71 81       	ldd	r23, Z+1	; 0x01
 3c2:	82 81       	ldd	r24, Z+2	; 0x02
 3c4:	93 81       	ldd	r25, Z+3	; 0x03
 3c6:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 3ca:	0e 94 9e 02 	call	0x53c	; 0x53c <__fixunssfsi>
 3ce:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 3d2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		c = 0;
 3d6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <c+0x1>
 3da:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <c>
	}
	
	if(count == 5)
 3de:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <count>
 3e2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <count+0x1>
 3e6:	05 97       	sbiw	r24, 0x05	; 5
 3e8:	89 f4       	brne	.+34     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{	
		count = 0;
 3ea:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <count+0x1>
 3ee:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <count>
		d_idx = (++d_idx)%9;
 3f2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 3f6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	69 e0       	ldi	r22, 0x09	; 9
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0e 94 8b 03 	call	0x716	; 0x716 <__divmodhi4>
 404:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 408:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
		
	}
	
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <main>:


int main(void)
{	
	
	ADC_init();
 42e:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	COUNTER_16bit_init();
 432:	0e 94 79 00 	call	0xf2	; 0xf2 <COUNTER_16bit_init>
	GPIO_init();
 436:	0e 94 8d 00 	call	0x11a	; 0x11a <GPIO_init>
	UART_init(MYUBRR);
 43a:	83 e3       	ldi	r24, 0x33	; 51
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 95 00 	call	0x12a	; 0x12a <UART_init>
	sei(); // enable global interupt 
 442:	78 94       	sei
	
	uint16_t adc =  ADC_convert(_PC0);
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
	UART_transmit_number(adc);
 44a:	0e 94 46 01 	call	0x28c	; 0x28c <UART_transmit_number>
	UART_transmit_string("\n\r");
 44e:	86 e2       	ldi	r24, 0x26	; 38
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 a8 00 	call	0x150	; 0x150 <UART_transmit_string>
	adc =  ADC_convert(_PC1);
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
	UART_transmit_number(adc);
 45c:	0e 94 46 01 	call	0x28c	; 0x28c <UART_transmit_number>
 460:	ff cf       	rjmp	.-2      	; 0x460 <main+0x32>

00000462 <__subsf3>:
 462:	50 58       	subi	r21, 0x80	; 128

00000464 <__addsf3>:
 464:	bb 27       	eor	r27, r27
 466:	aa 27       	eor	r26, r26
 468:	0e 94 49 02 	call	0x492	; 0x492 <__addsf3x>
 46c:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_round>
 470:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_pscA>
 474:	38 f0       	brcs	.+14     	; 0x484 <__addsf3+0x20>
 476:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscB>
 47a:	20 f0       	brcs	.+8      	; 0x484 <__addsf3+0x20>
 47c:	39 f4       	brne	.+14     	; 0x48c <__addsf3+0x28>
 47e:	9f 3f       	cpi	r25, 0xFF	; 255
 480:	19 f4       	brne	.+6      	; 0x488 <__addsf3+0x24>
 482:	26 f4       	brtc	.+8      	; 0x48c <__addsf3+0x28>
 484:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_nan>
 488:	0e f4       	brtc	.+2      	; 0x48c <__addsf3+0x28>
 48a:	e0 95       	com	r30
 48c:	e7 fb       	bst	r30, 7
 48e:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>

00000492 <__addsf3x>:
 492:	e9 2f       	mov	r30, r25
 494:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 498:	58 f3       	brcs	.-42     	; 0x470 <__addsf3+0xc>
 49a:	ba 17       	cp	r27, r26
 49c:	62 07       	cpc	r22, r18
 49e:	73 07       	cpc	r23, r19
 4a0:	84 07       	cpc	r24, r20
 4a2:	95 07       	cpc	r25, r21
 4a4:	20 f0       	brcs	.+8      	; 0x4ae <__addsf3x+0x1c>
 4a6:	79 f4       	brne	.+30     	; 0x4c6 <__addsf3x+0x34>
 4a8:	a6 f5       	brtc	.+104    	; 0x512 <__addsf3x+0x80>
 4aa:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_zero>
 4ae:	0e f4       	brtc	.+2      	; 0x4b2 <__addsf3x+0x20>
 4b0:	e0 95       	com	r30
 4b2:	0b 2e       	mov	r0, r27
 4b4:	ba 2f       	mov	r27, r26
 4b6:	a0 2d       	mov	r26, r0
 4b8:	0b 01       	movw	r0, r22
 4ba:	b9 01       	movw	r22, r18
 4bc:	90 01       	movw	r18, r0
 4be:	0c 01       	movw	r0, r24
 4c0:	ca 01       	movw	r24, r20
 4c2:	a0 01       	movw	r20, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	ff 27       	eor	r31, r31
 4c8:	59 1b       	sub	r21, r25
 4ca:	99 f0       	breq	.+38     	; 0x4f2 <__addsf3x+0x60>
 4cc:	59 3f       	cpi	r21, 0xF9	; 249
 4ce:	50 f4       	brcc	.+20     	; 0x4e4 <__addsf3x+0x52>
 4d0:	50 3e       	cpi	r21, 0xE0	; 224
 4d2:	68 f1       	brcs	.+90     	; 0x52e <__addsf3x+0x9c>
 4d4:	1a 16       	cp	r1, r26
 4d6:	f0 40       	sbci	r31, 0x00	; 0
 4d8:	a2 2f       	mov	r26, r18
 4da:	23 2f       	mov	r18, r19
 4dc:	34 2f       	mov	r19, r20
 4de:	44 27       	eor	r20, r20
 4e0:	58 5f       	subi	r21, 0xF8	; 248
 4e2:	f3 cf       	rjmp	.-26     	; 0x4ca <__addsf3x+0x38>
 4e4:	46 95       	lsr	r20
 4e6:	37 95       	ror	r19
 4e8:	27 95       	ror	r18
 4ea:	a7 95       	ror	r26
 4ec:	f0 40       	sbci	r31, 0x00	; 0
 4ee:	53 95       	inc	r21
 4f0:	c9 f7       	brne	.-14     	; 0x4e4 <__addsf3x+0x52>
 4f2:	7e f4       	brtc	.+30     	; 0x512 <__addsf3x+0x80>
 4f4:	1f 16       	cp	r1, r31
 4f6:	ba 0b       	sbc	r27, r26
 4f8:	62 0b       	sbc	r22, r18
 4fa:	73 0b       	sbc	r23, r19
 4fc:	84 0b       	sbc	r24, r20
 4fe:	ba f0       	brmi	.+46     	; 0x52e <__addsf3x+0x9c>
 500:	91 50       	subi	r25, 0x01	; 1
 502:	a1 f0       	breq	.+40     	; 0x52c <__addsf3x+0x9a>
 504:	ff 0f       	add	r31, r31
 506:	bb 1f       	adc	r27, r27
 508:	66 1f       	adc	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	c2 f7       	brpl	.-16     	; 0x500 <__addsf3x+0x6e>
 510:	0e c0       	rjmp	.+28     	; 0x52e <__addsf3x+0x9c>
 512:	ba 0f       	add	r27, r26
 514:	62 1f       	adc	r22, r18
 516:	73 1f       	adc	r23, r19
 518:	84 1f       	adc	r24, r20
 51a:	48 f4       	brcc	.+18     	; 0x52e <__addsf3x+0x9c>
 51c:	87 95       	ror	r24
 51e:	77 95       	ror	r23
 520:	67 95       	ror	r22
 522:	b7 95       	ror	r27
 524:	f7 95       	ror	r31
 526:	9e 3f       	cpi	r25, 0xFE	; 254
 528:	08 f0       	brcs	.+2      	; 0x52c <__addsf3x+0x9a>
 52a:	b0 cf       	rjmp	.-160    	; 0x48c <__addsf3+0x28>
 52c:	93 95       	inc	r25
 52e:	88 0f       	add	r24, r24
 530:	08 f0       	brcs	.+2      	; 0x534 <__addsf3x+0xa2>
 532:	99 27       	eor	r25, r25
 534:	ee 0f       	add	r30, r30
 536:	97 95       	ror	r25
 538:	87 95       	ror	r24
 53a:	08 95       	ret

0000053c <__fixunssfsi>:
 53c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fp_splitA>
 540:	88 f0       	brcs	.+34     	; 0x564 <__fixunssfsi+0x28>
 542:	9f 57       	subi	r25, 0x7F	; 127
 544:	98 f0       	brcs	.+38     	; 0x56c <__fixunssfsi+0x30>
 546:	b9 2f       	mov	r27, r25
 548:	99 27       	eor	r25, r25
 54a:	b7 51       	subi	r27, 0x17	; 23
 54c:	b0 f0       	brcs	.+44     	; 0x57a <__fixunssfsi+0x3e>
 54e:	e1 f0       	breq	.+56     	; 0x588 <__fixunssfsi+0x4c>
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	1a f0       	brmi	.+6      	; 0x560 <__fixunssfsi+0x24>
 55a:	ba 95       	dec	r27
 55c:	c9 f7       	brne	.-14     	; 0x550 <__fixunssfsi+0x14>
 55e:	14 c0       	rjmp	.+40     	; 0x588 <__fixunssfsi+0x4c>
 560:	b1 30       	cpi	r27, 0x01	; 1
 562:	91 f0       	breq	.+36     	; 0x588 <__fixunssfsi+0x4c>
 564:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_zero>
 568:	b1 e0       	ldi	r27, 0x01	; 1
 56a:	08 95       	ret
 56c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_zero>
 570:	67 2f       	mov	r22, r23
 572:	78 2f       	mov	r23, r24
 574:	88 27       	eor	r24, r24
 576:	b8 5f       	subi	r27, 0xF8	; 248
 578:	39 f0       	breq	.+14     	; 0x588 <__fixunssfsi+0x4c>
 57a:	b9 3f       	cpi	r27, 0xF9	; 249
 57c:	cc f3       	brlt	.-14     	; 0x570 <__fixunssfsi+0x34>
 57e:	86 95       	lsr	r24
 580:	77 95       	ror	r23
 582:	67 95       	ror	r22
 584:	b3 95       	inc	r27
 586:	d9 f7       	brne	.-10     	; 0x57e <__fixunssfsi+0x42>
 588:	3e f4       	brtc	.+14     	; 0x598 <__fixunssfsi+0x5c>
 58a:	90 95       	com	r25
 58c:	80 95       	com	r24
 58e:	70 95       	com	r23
 590:	61 95       	neg	r22
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	8f 4f       	sbci	r24, 0xFF	; 255
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	08 95       	ret

0000059a <__fp_inf>:
 59a:	97 f9       	bld	r25, 7
 59c:	9f 67       	ori	r25, 0x7F	; 127
 59e:	80 e8       	ldi	r24, 0x80	; 128
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	08 95       	ret

000005a6 <__fp_nan>:
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	08 95       	ret

000005ac <__fp_pscA>:
 5ac:	00 24       	eor	r0, r0
 5ae:	0a 94       	dec	r0
 5b0:	16 16       	cp	r1, r22
 5b2:	17 06       	cpc	r1, r23
 5b4:	18 06       	cpc	r1, r24
 5b6:	09 06       	cpc	r0, r25
 5b8:	08 95       	ret

000005ba <__fp_pscB>:
 5ba:	00 24       	eor	r0, r0
 5bc:	0a 94       	dec	r0
 5be:	12 16       	cp	r1, r18
 5c0:	13 06       	cpc	r1, r19
 5c2:	14 06       	cpc	r1, r20
 5c4:	05 06       	cpc	r0, r21
 5c6:	08 95       	ret

000005c8 <__fp_round>:
 5c8:	09 2e       	mov	r0, r25
 5ca:	03 94       	inc	r0
 5cc:	00 0c       	add	r0, r0
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <__fp_round+0xc>
 5d0:	88 23       	and	r24, r24
 5d2:	52 f0       	brmi	.+20     	; 0x5e8 <__fp_round+0x20>
 5d4:	bb 0f       	add	r27, r27
 5d6:	40 f4       	brcc	.+16     	; 0x5e8 <__fp_round+0x20>
 5d8:	bf 2b       	or	r27, r31
 5da:	11 f4       	brne	.+4      	; 0x5e0 <__fp_round+0x18>
 5dc:	60 ff       	sbrs	r22, 0
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__fp_round+0x20>
 5e0:	6f 5f       	subi	r22, 0xFF	; 255
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	08 95       	ret

000005ea <__fp_split3>:
 5ea:	57 fd       	sbrc	r21, 7
 5ec:	90 58       	subi	r25, 0x80	; 128
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	59 f0       	breq	.+22     	; 0x60a <__fp_splitA+0x10>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	71 f0       	breq	.+28     	; 0x614 <__fp_splitA+0x1a>
 5f8:	47 95       	ror	r20

000005fa <__fp_splitA>:
 5fa:	88 0f       	add	r24, r24
 5fc:	97 fb       	bst	r25, 7
 5fe:	99 1f       	adc	r25, r25
 600:	61 f0       	breq	.+24     	; 0x61a <__fp_splitA+0x20>
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	79 f0       	breq	.+30     	; 0x624 <__fp_splitA+0x2a>
 606:	87 95       	ror	r24
 608:	08 95       	ret
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	14 06       	cpc	r1, r20
 610:	55 1f       	adc	r21, r21
 612:	f2 cf       	rjmp	.-28     	; 0x5f8 <__fp_split3+0xe>
 614:	46 95       	lsr	r20
 616:	f1 df       	rcall	.-30     	; 0x5fa <__fp_splitA>
 618:	08 c0       	rjmp	.+16     	; 0x62a <__fp_splitA+0x30>
 61a:	16 16       	cp	r1, r22
 61c:	17 06       	cpc	r1, r23
 61e:	18 06       	cpc	r1, r24
 620:	99 1f       	adc	r25, r25
 622:	f1 cf       	rjmp	.-30     	; 0x606 <__fp_splitA+0xc>
 624:	86 95       	lsr	r24
 626:	71 05       	cpc	r23, r1
 628:	61 05       	cpc	r22, r1
 62a:	08 94       	sec
 62c:	08 95       	ret

0000062e <__fp_zero>:
 62e:	e8 94       	clt

00000630 <__fp_szero>:
 630:	bb 27       	eor	r27, r27
 632:	66 27       	eor	r22, r22
 634:	77 27       	eor	r23, r23
 636:	cb 01       	movw	r24, r22
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__mulsf3>:
 63c:	0e 94 31 03 	call	0x662	; 0x662 <__mulsf3x>
 640:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_round>
 644:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_pscA>
 648:	38 f0       	brcs	.+14     	; 0x658 <__mulsf3+0x1c>
 64a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscB>
 64e:	20 f0       	brcs	.+8      	; 0x658 <__mulsf3+0x1c>
 650:	95 23       	and	r25, r21
 652:	11 f0       	breq	.+4      	; 0x658 <__mulsf3+0x1c>
 654:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>
 658:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_nan>
 65c:	11 24       	eor	r1, r1
 65e:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>

00000662 <__mulsf3x>:
 662:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_split3>
 666:	70 f3       	brcs	.-36     	; 0x644 <__mulsf3+0x8>

00000668 <__mulsf3_pse>:
 668:	95 9f       	mul	r25, r21
 66a:	c1 f3       	breq	.-16     	; 0x65c <__mulsf3+0x20>
 66c:	95 0f       	add	r25, r21
 66e:	50 e0       	ldi	r21, 0x00	; 0
 670:	55 1f       	adc	r21, r21
 672:	62 9f       	mul	r22, r18
 674:	f0 01       	movw	r30, r0
 676:	72 9f       	mul	r23, r18
 678:	bb 27       	eor	r27, r27
 67a:	f0 0d       	add	r31, r0
 67c:	b1 1d       	adc	r27, r1
 67e:	63 9f       	mul	r22, r19
 680:	aa 27       	eor	r26, r26
 682:	f0 0d       	add	r31, r0
 684:	b1 1d       	adc	r27, r1
 686:	aa 1f       	adc	r26, r26
 688:	64 9f       	mul	r22, r20
 68a:	66 27       	eor	r22, r22
 68c:	b0 0d       	add	r27, r0
 68e:	a1 1d       	adc	r26, r1
 690:	66 1f       	adc	r22, r22
 692:	82 9f       	mul	r24, r18
 694:	22 27       	eor	r18, r18
 696:	b0 0d       	add	r27, r0
 698:	a1 1d       	adc	r26, r1
 69a:	62 1f       	adc	r22, r18
 69c:	73 9f       	mul	r23, r19
 69e:	b0 0d       	add	r27, r0
 6a0:	a1 1d       	adc	r26, r1
 6a2:	62 1f       	adc	r22, r18
 6a4:	83 9f       	mul	r24, r19
 6a6:	a0 0d       	add	r26, r0
 6a8:	61 1d       	adc	r22, r1
 6aa:	22 1f       	adc	r18, r18
 6ac:	74 9f       	mul	r23, r20
 6ae:	33 27       	eor	r19, r19
 6b0:	a0 0d       	add	r26, r0
 6b2:	61 1d       	adc	r22, r1
 6b4:	23 1f       	adc	r18, r19
 6b6:	84 9f       	mul	r24, r20
 6b8:	60 0d       	add	r22, r0
 6ba:	21 1d       	adc	r18, r1
 6bc:	82 2f       	mov	r24, r18
 6be:	76 2f       	mov	r23, r22
 6c0:	6a 2f       	mov	r22, r26
 6c2:	11 24       	eor	r1, r1
 6c4:	9f 57       	subi	r25, 0x7F	; 127
 6c6:	50 40       	sbci	r21, 0x00	; 0
 6c8:	9a f0       	brmi	.+38     	; 0x6f0 <__mulsf3_pse+0x88>
 6ca:	f1 f0       	breq	.+60     	; 0x708 <__mulsf3_pse+0xa0>
 6cc:	88 23       	and	r24, r24
 6ce:	4a f0       	brmi	.+18     	; 0x6e2 <__mulsf3_pse+0x7a>
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	bb 1f       	adc	r27, r27
 6d6:	66 1f       	adc	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	91 50       	subi	r25, 0x01	; 1
 6de:	50 40       	sbci	r21, 0x00	; 0
 6e0:	a9 f7       	brne	.-22     	; 0x6cc <__mulsf3_pse+0x64>
 6e2:	9e 3f       	cpi	r25, 0xFE	; 254
 6e4:	51 05       	cpc	r21, r1
 6e6:	80 f0       	brcs	.+32     	; 0x708 <__mulsf3_pse+0xa0>
 6e8:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__fp_inf>
 6ec:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>
 6f0:	5f 3f       	cpi	r21, 0xFF	; 255
 6f2:	e4 f3       	brlt	.-8      	; 0x6ec <__mulsf3_pse+0x84>
 6f4:	98 3e       	cpi	r25, 0xE8	; 232
 6f6:	d4 f3       	brlt	.-12     	; 0x6ec <__mulsf3_pse+0x84>
 6f8:	86 95       	lsr	r24
 6fa:	77 95       	ror	r23
 6fc:	67 95       	ror	r22
 6fe:	b7 95       	ror	r27
 700:	f7 95       	ror	r31
 702:	e7 95       	ror	r30
 704:	9f 5f       	subi	r25, 0xFF	; 255
 706:	c1 f7       	brne	.-16     	; 0x6f8 <__mulsf3_pse+0x90>
 708:	fe 2b       	or	r31, r30
 70a:	88 0f       	add	r24, r24
 70c:	91 1d       	adc	r25, r1
 70e:	96 95       	lsr	r25
 710:	87 95       	ror	r24
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret

00000716 <__divmodhi4>:
 716:	97 fb       	bst	r25, 7
 718:	07 2e       	mov	r0, r23
 71a:	16 f4       	brtc	.+4      	; 0x720 <__divmodhi4+0xa>
 71c:	00 94       	com	r0
 71e:	07 d0       	rcall	.+14     	; 0x72e <__divmodhi4_neg1>
 720:	77 fd       	sbrc	r23, 7
 722:	09 d0       	rcall	.+18     	; 0x736 <__divmodhi4_neg2>
 724:	0e 94 ae 03 	call	0x75c	; 0x75c <__udivmodhi4>
 728:	07 fc       	sbrc	r0, 7
 72a:	05 d0       	rcall	.+10     	; 0x736 <__divmodhi4_neg2>
 72c:	3e f4       	brtc	.+14     	; 0x73c <__divmodhi4_exit>

0000072e <__divmodhi4_neg1>:
 72e:	90 95       	com	r25
 730:	81 95       	neg	r24
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	08 95       	ret

00000736 <__divmodhi4_neg2>:
 736:	70 95       	com	r23
 738:	61 95       	neg	r22
 73a:	7f 4f       	sbci	r23, 0xFF	; 255

0000073c <__divmodhi4_exit>:
 73c:	08 95       	ret

0000073e <__umulhisi3>:
 73e:	a2 9f       	mul	r26, r18
 740:	b0 01       	movw	r22, r0
 742:	b3 9f       	mul	r27, r19
 744:	c0 01       	movw	r24, r0
 746:	a3 9f       	mul	r26, r19
 748:	70 0d       	add	r23, r0
 74a:	81 1d       	adc	r24, r1
 74c:	11 24       	eor	r1, r1
 74e:	91 1d       	adc	r25, r1
 750:	b2 9f       	mul	r27, r18
 752:	70 0d       	add	r23, r0
 754:	81 1d       	adc	r24, r1
 756:	11 24       	eor	r1, r1
 758:	91 1d       	adc	r25, r1
 75a:	08 95       	ret

0000075c <__udivmodhi4>:
 75c:	aa 1b       	sub	r26, r26
 75e:	bb 1b       	sub	r27, r27
 760:	51 e1       	ldi	r21, 0x11	; 17
 762:	07 c0       	rjmp	.+14     	; 0x772 <__udivmodhi4_ep>

00000764 <__udivmodhi4_loop>:
 764:	aa 1f       	adc	r26, r26
 766:	bb 1f       	adc	r27, r27
 768:	a6 17       	cp	r26, r22
 76a:	b7 07       	cpc	r27, r23
 76c:	10 f0       	brcs	.+4      	; 0x772 <__udivmodhi4_ep>
 76e:	a6 1b       	sub	r26, r22
 770:	b7 0b       	sbc	r27, r23

00000772 <__udivmodhi4_ep>:
 772:	88 1f       	adc	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	5a 95       	dec	r21
 778:	a9 f7       	brne	.-22     	; 0x764 <__udivmodhi4_loop>
 77a:	80 95       	com	r24
 77c:	90 95       	com	r25
 77e:	bc 01       	movw	r22, r24
 780:	cd 01       	movw	r24, r26
 782:	08 95       	ret

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
