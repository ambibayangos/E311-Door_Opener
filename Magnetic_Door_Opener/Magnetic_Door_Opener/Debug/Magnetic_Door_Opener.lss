
Magnetic_Door_Opener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000010cc  00001160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  00800106  00800106  00001166  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152f  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0b  00000000  00000000  000028a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d11  00000000  00000000  000033b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  000040c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f0  00000000  00000000  00004504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009bb  00000000  00000000  00004df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000057af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 6d 05 	jmp	0xada	; 0xada <__vector_1>
       8:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 30       	cpi	r26, 0x06	; 6
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a6 e0       	ldi	r26, 0x06	; 6
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 34       	cpi	r26, 0x40	; 64
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <main>
      9e:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
 *  in Atmega 328P
 */
void ADC_init(void)
{
	// Use connect AREF to ACCC (reference voltage select)
	ADMUX &= ~(1<<REFS1); ADMUX |= (1<<REFS0);
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	8f 77       	andi	r24, 0x7F	; 127
      ae:	80 83       	st	Z, r24
      b0:	80 81       	ld	r24, Z
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	80 83       	st	Z, r24
	
	// set prescale to 128 (125 kHz)
	ADCSRA |= (1<<ADPS1) | (1<< ADPS0); ADCSRA &= ~(1<<ADPS2);
      b6:	ea e7       	ldi	r30, 0x7A	; 122
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	83 60       	ori	r24, 0x03	; 3
      be:	80 83       	st	Z, r24
      c0:	80 81       	ld	r24, Z
      c2:	8b 7f       	andi	r24, 0xFB	; 251
      c4:	80 83       	st	Z, r24
	
	// enable ADC
	//TODO: This could be power hungry since the ADC is enabled when ADC isnt being used   
	ADCSRA |= (1<<ADEN);
      c6:	80 81       	ld	r24, Z
      c8:	80 68       	ori	r24, 0x80	; 128
      ca:	80 83       	st	Z, r24
      cc:	08 95       	ret

000000ce <ADC_convert>:
 *	returns the ADC value as a 16 bit integer.
 */
uint16_t ADC_convert(uint8_t channel)
{	
	
	if(channel == _PC0)
      ce:	81 11       	cpse	r24, r1
      d0:	06 c0       	rjmp	.+12     	; 0xde <ADC_convert+0x10>
	{
		ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0)); // sample to PC0 (coil voltage - current polarity is opening force)
      d2:	ec e7       	ldi	r30, 0x7C	; 124
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 81       	ld	r24, Z
      d8:	80 7f       	andi	r24, 0xF0	; 240
      da:	80 83       	st	Z, r24
      dc:	15 c0       	rjmp	.+42     	; 0x108 <ADC_convert+0x3a>
	}
	else if(channel == _PC1)
      de:	81 30       	cpi	r24, 0x01	; 1
      e0:	49 f4       	brne	.+18     	; 0xf4 <ADC_convert+0x26>
	{
		ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)); 	ADMUX |= (1<<MUX0);  // sample to PC1 (coil voltage - current polarity is closing force)
      e2:	ec e7       	ldi	r30, 0x7C	; 124
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	81 7f       	andi	r24, 0xF1	; 241
      ea:	80 83       	st	Z, r24
      ec:	80 81       	ld	r24, Z
      ee:	81 60       	ori	r24, 0x01	; 1
      f0:	80 83       	st	Z, r24
      f2:	0a c0       	rjmp	.+20     	; 0x108 <ADC_convert+0x3a>
	}
	else if(channel == _PC2)
      f4:	82 30       	cpi	r24, 0x02	; 2
      f6:	41 f4       	brne	.+16     	; 0x108 <ADC_convert+0x3a>
	{
		ADMUX |= (1<<MUX1); ADMUX &= ~((1<<MUX0) | (1<<MUX2) | (1<<MUX3));  // sample to PC2 (touch sensor output pin)
      f8:	ec e7       	ldi	r30, 0x7C	; 124
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	82 60       	ori	r24, 0x02	; 2
     100:	80 83       	st	Z, r24
     102:	80 81       	ld	r24, Z
     104:	82 7f       	andi	r24, 0xF2	; 242
     106:	80 83       	st	Z, r24
	}
	
	// Start the conversion
	ADCSRA |= (1 << ADSC);
     108:	ea e7       	ldi	r30, 0x7A	; 122
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 81       	ld	r24, Z
     10e:	80 64       	ori	r24, 0x40	; 64
     110:	80 83       	st	Z, r24
	
	// Wait for the conversion to finish
	while ((ADCSRA & (1 << ADIF)) == 0);
     112:	80 81       	ld	r24, Z
     114:	84 ff       	sbrs	r24, 4
     116:	fd cf       	rjmp	.-6      	; 0x112 <ADC_convert+0x44>
	
	// Read out the ADC counts
	uint16_t adc_count = ADC;//(ADCL << 0) | (ADCH << 8);
     118:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     11c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	return adc_count;
}
     120:	08 95       	ret

00000122 <get_doorstate>:
 */ 
int get_doorstate(uint16_t adc)
{
	float value = (adc*5.0)/ADC_REF;
	
	value = (value/DOOR_SENSING_CIRCUIT_GAIN)/SHUNT; // calculate coil current
     122:	bc 01       	movw	r22, r24
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 09 07 	call	0xe12	; 0xe12 <__floatunsisf>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	40 ea       	ldi	r20, 0xA0	; 160
     132:	50 e4       	ldi	r21, 0x40	; 64
     134:	0e 94 c0 07 	call	0xf80	; 0xf80 <__mulsf3>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e8       	ldi	r20, 0x80	; 128
     13e:	5a e3       	ldi	r21, 0x3A	; 58
     140:	0e 94 c0 07 	call	0xf80	; 0xf80 <__mulsf3>
     144:	23 ec       	ldi	r18, 0xC3	; 195
     146:	35 ef       	ldi	r19, 0xF5	; 245
     148:	48 e4       	ldi	r20, 0x48	; 72
     14a:	50 e4       	ldi	r21, 0x40	; 64
     14c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__divsf3>
	
	if (value >= DOOR_THRESHOLD_CURRENT)
     150:	9b 01       	movw	r18, r22
     152:	ac 01       	movw	r20, r24
     154:	0e 94 f7 05 	call	0xbee	; 0xbee <__addsf3>
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e8       	ldi	r20, 0x80	; 128
     15e:	5f e3       	ldi	r21, 0x3F	; 63
     160:	0e 94 bb 07 	call	0xf76	; 0xf76 <__gesf2>
	{	
		return Door_Opened; 
	}
	else
	{	
		return Door_Closed; 
     164:	08 2e       	mov	r0, r24
     166:	00 0c       	add	r0, r0
     168:	99 0b       	sbc	r25, r25
     16a:	80 95       	com	r24
     16c:	90 95       	com	r25
     16e:	88 27       	eor	r24, r24
     170:	99 0f       	add	r25, r25
     172:	88 1f       	adc	r24, r24
     174:	99 27       	eor	r25, r25
	}

     176:	01 96       	adiw	r24, 0x01	; 1
     178:	08 95       	ret

0000017a <FSM_start>:
/*
 *  This function represents the FSM that controls the current driver 
 *  as
 */ 
void FSM_start(void)
{	
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	00 d0       	rcall	.+0      	; 0x180 <FSM_start+0x6>
     180:	00 d0       	rcall	.+0      	; 0x182 <FSM_start+0x8>
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
	uint8_t half_Duty_Produced = 0;
	Current_FSM_state = Initialisation_State; // Initialize current state to Initialization state
     186:	84 e0       	ldi	r24, 0x04	; 4
     188:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Current_FSM_state>
	Door_State = Uknown; // Door state is unknown when programme just started
     18c:	83 e0       	ldi	r24, 0x03	; 3
     18e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Door_State>
	Sample_Coil_Current = 0;
     192:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Sample_Coil_Current>
	Sample_touch_circuit = 0;
     196:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Sample_touch_circuit>
	closing_force_routine_initialized = 0;
     19a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <closing_force_routine_initialized+0x1>
     19e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <closing_force_routine_initialized>
	wait_touch_routine_initialized = 0;
     1a2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <wait_touch_routine_initialized+0x1>
     1a6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <wait_touch_routine_initialized>
	opening_force_routine_initialized = 0;
     1aa:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opening_force_routine_initialized+0x1>
     1ae:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opening_force_routine_initialized>
	pmw_delay_flag = 1;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <pmw_delay_flag+0x1>
     1ba:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <pmw_delay_flag>
	int sample_touch_flag = 0;
	int first_time_touch_value = 0;
     1be:	1a 82       	std	Y+2, r1	; 0x02
     1c0:	19 82       	std	Y+1, r1	; 0x01
	Sample_touch_circuit = 0;
	closing_force_routine_initialized = 0;
	wait_touch_routine_initialized = 0;
	opening_force_routine_initialized = 0;
	pmw_delay_flag = 1;
	int sample_touch_flag = 0;
     1c2:	1c 82       	std	Y+4, r1	; 0x04
     1c4:	1b 82       	std	Y+3, r1	; 0x03
 *  This function represents the FSM that controls the current driver 
 *  as
 */ 
void FSM_start(void)
{	
	uint8_t half_Duty_Produced = 0;
     1c6:	21 2c       	mov	r2, r1
					// start a 60 sec timer (time frame for the door opening process)
					//START_OPENING_CURRENT_TIMER();
					Coil_Current_Polarity_State = Opening_Force_Current; // change polarity of current
					// provide the duty cycles that will be cycled through (Duty = 0.1 to 0.9)
					duty[0] = 0.1;duty[1] = 0.2;duty[2] = 0.3;duty[3] = 0.4;
					duty[4] = 0.5;duty[5] = 0.6;duty[6] = 0.7;duty[7] = 0.8;duty[8] = 0.9;
     1c8:	0f 2e       	mov	r0, r31
     1ca:	c1 2c       	mov	r12, r1
     1cc:	d1 2c       	mov	r13, r1
     1ce:	e1 2c       	mov	r14, r1
     1d0:	ff e3       	ldi	r31, 0x3F	; 63
     1d2:	ff 2e       	mov	r15, r31
     1d4:	f0 2d       	mov	r31, r0
     1d6:	0f 2e       	mov	r0, r31
     1d8:	fa e9       	ldi	r31, 0x9A	; 154
     1da:	8f 2e       	mov	r8, r31
     1dc:	f9 e9       	ldi	r31, 0x99	; 153
     1de:	9f 2e       	mov	r9, r31
     1e0:	f9 e1       	ldi	r31, 0x19	; 25
     1e2:	af 2e       	mov	r10, r31
     1e4:	ff e3       	ldi	r31, 0x3F	; 63
     1e6:	bf 2e       	mov	r11, r31
     1e8:	f0 2d       	mov	r31, r0
     1ea:	0f 2e       	mov	r0, r31
     1ec:	f3 e3       	ldi	r31, 0x33	; 51
     1ee:	4f 2e       	mov	r4, r31
     1f0:	54 2c       	mov	r5, r4
     1f2:	64 2c       	mov	r6, r4
     1f4:	ff e3       	ldi	r31, 0x3F	; 63
     1f6:	7f 2e       	mov	r7, r31
     1f8:	f0 2d       	mov	r31, r0
					// restart pwm generation on the coil
					START_8bit_COUNTER2(); 
					// initialize "Generate_Opening_Force_State" state once
					opening_force_routine_initialized = 1;
     1fa:	01 e0       	ldi	r16, 0x01	; 1
     1fc:	10 e0       	ldi	r17, 0x00	; 0
					
				}
			
				break;
			default:
				Current_FSM_state = Initialisation_State;
     1fe:	68 94       	set
     200:	33 24       	eor	r3, r3
     202:	32 f8       	bld	r3, 2
     204:	02 c0       	rjmp	.+4      	; 0x20a <FSM_start+0x90>
							Current_FSM_state = Generate_Opening_Force_State;
							// Enables the "Generate_Opening_Force_State" state to re-initialize
							opening_force_routine_initialized = 0;
						}
						
						sample_touch_flag = 1;
     206:	1c 83       	std	Y+4, r17	; 0x04
     208:	0b 83       	std	Y+3, r16	; 0x03
	{	
		//UART_transmit_number(Current_FSM_state);
		//UART_transmit_string("\n\r");
		//UART_transmit_string("\n\r");
	
		switch(Current_FSM_state)
     20a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Current_FSM_state>
     20e:	82 30       	cpi	r24, 0x02	; 2
     210:	09 f4       	brne	.+2      	; 0x214 <FSM_start+0x9a>
     212:	49 c1       	rjmp	.+658    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     214:	20 f4       	brcc	.+8      	; 0x21e <FSM_start+0xa4>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	09 f4       	brne	.+2      	; 0x21c <FSM_start+0xa2>
     21a:	71 c0       	rjmp	.+226    	; 0x2fe <FSM_start+0x184>
     21c:	cc c1       	rjmp	.+920    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     21e:	83 30       	cpi	r24, 0x03	; 3
     220:	09 f4       	brne	.+2      	; 0x224 <FSM_start+0xaa>
     222:	f5 c0       	rjmp	.+490    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     224:	84 30       	cpi	r24, 0x04	; 4
     226:	09 f0       	breq	.+2      	; 0x22a <FSM_start+0xb0>
     228:	c6 c1       	rjmp	.+908    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
		{
			case Initialisation_State:
					
				if(!half_Duty_Produced)
     22a:	21 10       	cpse	r2, r1
     22c:	4d c0       	rjmp	.+154    	; 0x2c8 <FSM_start+0x14e>
				{	
					 // initialize duty cycle to 50% for sensing
					duty[0] = 0.5;duty[1] = 0.5;duty[2] = 0.5;duty[3] = 0.5;
     22e:	ac e1       	ldi	r26, 0x1C	; 28
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	cd 92       	st	X+, r12
     234:	dd 92       	st	X+, r13
     236:	ed 92       	st	X+, r14
     238:	fc 92       	st	X, r15
     23a:	13 97       	sbiw	r26, 0x03	; 3
     23c:	c0 92 20 01 	sts	0x0120, r12	; 0x800120 <duty+0x4>
     240:	d0 92 21 01 	sts	0x0121, r13	; 0x800121 <duty+0x5>
     244:	e0 92 22 01 	sts	0x0122, r14	; 0x800122 <duty+0x6>
     248:	f0 92 23 01 	sts	0x0123, r15	; 0x800123 <duty+0x7>
     24c:	c0 92 24 01 	sts	0x0124, r12	; 0x800124 <duty+0x8>
     250:	d0 92 25 01 	sts	0x0125, r13	; 0x800125 <duty+0x9>
     254:	e0 92 26 01 	sts	0x0126, r14	; 0x800126 <duty+0xa>
     258:	f0 92 27 01 	sts	0x0127, r15	; 0x800127 <duty+0xb>
     25c:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <duty+0xc>
     260:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <duty+0xd>
     264:	e0 92 2a 01 	sts	0x012A, r14	; 0x80012a <duty+0xe>
     268:	f0 92 2b 01 	sts	0x012B, r15	; 0x80012b <duty+0xf>
					duty[4] = 0.5;duty[5] = 0.5;duty[6] = 0.5;duty[7] = 0.5;duty[8] = 0.5;
     26c:	c0 92 2c 01 	sts	0x012C, r12	; 0x80012c <duty+0x10>
     270:	d0 92 2d 01 	sts	0x012D, r13	; 0x80012d <duty+0x11>
     274:	e0 92 2e 01 	sts	0x012E, r14	; 0x80012e <duty+0x12>
     278:	f0 92 2f 01 	sts	0x012F, r15	; 0x80012f <duty+0x13>
     27c:	c0 92 30 01 	sts	0x0130, r12	; 0x800130 <duty+0x14>
     280:	d0 92 31 01 	sts	0x0131, r13	; 0x800131 <duty+0x15>
     284:	e0 92 32 01 	sts	0x0132, r14	; 0x800132 <duty+0x16>
     288:	f0 92 33 01 	sts	0x0133, r15	; 0x800133 <duty+0x17>
     28c:	c0 92 34 01 	sts	0x0134, r12	; 0x800134 <duty+0x18>
     290:	d0 92 35 01 	sts	0x0135, r13	; 0x800135 <duty+0x19>
     294:	e0 92 36 01 	sts	0x0136, r14	; 0x800136 <duty+0x1a>
     298:	f0 92 37 01 	sts	0x0137, r15	; 0x800137 <duty+0x1b>
     29c:	c0 92 38 01 	sts	0x0138, r12	; 0x800138 <duty+0x1c>
     2a0:	d0 92 39 01 	sts	0x0139, r13	; 0x800139 <duty+0x1d>
     2a4:	e0 92 3a 01 	sts	0x013A, r14	; 0x80013a <duty+0x1e>
     2a8:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <duty+0x1f>
     2ac:	c0 92 3c 01 	sts	0x013C, r12	; 0x80013c <duty+0x20>
     2b0:	d0 92 3d 01 	sts	0x013D, r13	; 0x80013d <duty+0x21>
     2b4:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <duty+0x22>
     2b8:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <duty+0x23>
					Coil_Current_Polarity_State = Opening_Force_Current; // generate a opening force
     2bc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Coil_Current_Polarity_State>
					START_8bit_COUNTER2(); // STARTS THE PWM
     2c0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <START_8bit_COUNTER2>
					half_Duty_Produced = 1;
     2c4:	22 24       	eor	r2, r2
     2c6:	23 94       	inc	r2
				}
				
				if(Sample_Coil_Current)  // sample coil at 50% duty cycle
     2c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Sample_Coil_Current>
     2cc:	88 23       	and	r24, r24
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <FSM_start+0x158>
     2d0:	9c cf       	rjmp	.-200    	; 0x20a <FSM_start+0x90>
				{	
					Sample_Coil_Current = 0;
     2d2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Sample_Coil_Current>
					uint16_t adc = ADC_convert(_PC0);
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
					Door_State = get_doorstate(adc); // decide if the door is open or not
     2dc:	0e 94 91 00 	call	0x122	; 0x122 <get_doorstate>
     2e0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Door_State>
					
					if (Door_State==Door_Closed)
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	21 f4       	brne	.+8      	; 0x2f0 <FSM_start+0x176>
					{	
						// Move to "WaitTouch_State" state 				
						Current_FSM_state= 	WaitTouch_State;					
     2e8:	83 e0       	ldi	r24, 0x03	; 3
     2ea:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Current_FSM_state>
     2ee:	8d cf       	rjmp	.-230    	; 0x20a <FSM_start+0x90>
					}
					
					else if (Door_State==Door_Opened)
     2f0:	82 30       	cpi	r24, 0x02	; 2
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <FSM_start+0x17c>
     2f4:	8a cf       	rjmp	.-236    	; 0x20a <FSM_start+0x90>
					{	
						// Move to "Generate_Closing_Force_State" state
						Current_FSM_state = Generate_Closing_Force_State;
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <Current_FSM_state>
     2fc:	86 cf       	rjmp	.-244    	; 0x20a <FSM_start+0x90>
				break;
			
			case Generate_Closing_Force_State:
					
					
					if(!closing_force_routine_initialized)
     2fe:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <closing_force_routine_initialized>
     302:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <closing_force_routine_initialized+0x1>
     306:	89 2b       	or	r24, r25
     308:	09 f0       	breq	.+2      	; 0x30c <FSM_start+0x192>
     30a:	68 c0       	rjmp	.+208    	; 0x3dc <FSM_start+0x262>
					{
						STOP_8bit_COUNTER2(); // stops the coil pwm generator
     30c:	0e 94 06 03 	call	0x60c	; 0x60c <STOP_8bit_COUNTER2>
						Coil_Current_Polarity_State = Closing_Force_Current;
     310:	e1 e0       	ldi	r30, 0x01	; 1
     312:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <Coil_Current_Polarity_State>
						//initialize duty cycle to 50% for sensing
						duty[0] = 0.5;duty[1] = 0.6;duty[2] = 0.7;duty[3] = 0.8;
     316:	ac e1       	ldi	r26, 0x1C	; 28
     318:	b1 e0       	ldi	r27, 0x01	; 1
     31a:	cd 92       	st	X+, r12
     31c:	dd 92       	st	X+, r13
     31e:	ed 92       	st	X+, r14
     320:	fc 92       	st	X, r15
     322:	13 97       	sbiw	r26, 0x03	; 3
     324:	80 92 20 01 	sts	0x0120, r8	; 0x800120 <duty+0x4>
     328:	90 92 21 01 	sts	0x0121, r9	; 0x800121 <duty+0x5>
     32c:	a0 92 22 01 	sts	0x0122, r10	; 0x800122 <duty+0x6>
     330:	b0 92 23 01 	sts	0x0123, r11	; 0x800123 <duty+0x7>
     334:	40 92 24 01 	sts	0x0124, r4	; 0x800124 <duty+0x8>
     338:	50 92 25 01 	sts	0x0125, r5	; 0x800125 <duty+0x9>
     33c:	60 92 26 01 	sts	0x0126, r6	; 0x800126 <duty+0xa>
     340:	70 92 27 01 	sts	0x0127, r7	; 0x800127 <duty+0xb>
     344:	8d ec       	ldi	r24, 0xCD	; 205
     346:	9c ec       	ldi	r25, 0xCC	; 204
     348:	ac e4       	ldi	r26, 0x4C	; 76
     34a:	bf e3       	ldi	r27, 0x3F	; 63
     34c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <duty+0xc>
     350:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <duty+0xd>
     354:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <duty+0xe>
     358:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <duty+0xf>
						duty[4] = 0.9;duty[5] = 0.5;duty[6] = 0.5;duty[7] = 0.5;duty[8] = 0.5;
     35c:	86 e6       	ldi	r24, 0x66	; 102
     35e:	96 e6       	ldi	r25, 0x66	; 102
     360:	a6 e6       	ldi	r26, 0x66	; 102
     362:	bf e3       	ldi	r27, 0x3F	; 63
     364:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <duty+0x10>
     368:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <duty+0x11>
     36c:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <duty+0x12>
     370:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <duty+0x13>
     374:	c0 92 30 01 	sts	0x0130, r12	; 0x800130 <duty+0x14>
     378:	d0 92 31 01 	sts	0x0131, r13	; 0x800131 <duty+0x15>
     37c:	e0 92 32 01 	sts	0x0132, r14	; 0x800132 <duty+0x16>
     380:	f0 92 33 01 	sts	0x0133, r15	; 0x800133 <duty+0x17>
     384:	c0 92 34 01 	sts	0x0134, r12	; 0x800134 <duty+0x18>
     388:	d0 92 35 01 	sts	0x0135, r13	; 0x800135 <duty+0x19>
     38c:	e0 92 36 01 	sts	0x0136, r14	; 0x800136 <duty+0x1a>
     390:	f0 92 37 01 	sts	0x0137, r15	; 0x800137 <duty+0x1b>
     394:	c0 92 38 01 	sts	0x0138, r12	; 0x800138 <duty+0x1c>
     398:	d0 92 39 01 	sts	0x0139, r13	; 0x800139 <duty+0x1d>
     39c:	e0 92 3a 01 	sts	0x013A, r14	; 0x80013a <duty+0x1e>
     3a0:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <duty+0x1f>
     3a4:	c0 92 3c 01 	sts	0x013C, r12	; 0x80013c <duty+0x20>
     3a8:	d0 92 3d 01 	sts	0x013D, r13	; 0x80013d <duty+0x21>
     3ac:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <duty+0x22>
     3b0:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <duty+0x23>
						// Start initilize timer to provide 3 sec delay
						PWM_DELAY_init();
     3b4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <PWM_DELAY_init>
						// start 3 sec delay timer
						START_PWM_DELAY();
     3b8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <START_PWM_DELAY>
						// enable 30 sec block
						pmw_delay_flag = 1;
     3bc:	10 93 10 01 	sts	0x0110, r17	; 0x800110 <pmw_delay_flag+0x1>
     3c0:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <pmw_delay_flag>
						// do not provide closing force until 30 elapse
						while (pmw_delay_flag);
     3c4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pmw_delay_flag>
     3c8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <pmw_delay_flag+0x1>
     3cc:	89 2b       	or	r24, r25
     3ce:	d1 f7       	brne	.-12     	; 0x3c4 <FSM_start+0x24a>
						// restart/start the coil pwm generator
						START_8bit_COUNTER2();
     3d0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <START_8bit_COUNTER2>
							
						//  Initialize "Generate_Closing_Force_State" state once
						closing_force_routine_initialized = 1;
     3d4:	10 93 1a 01 	sts	0x011A, r17	; 0x80011a <closing_force_routine_initialized+0x1>
     3d8:	00 93 19 01 	sts	0x0119, r16	; 0x800119 <closing_force_routine_initialized>
					}
						
						
					if(Sample_Coil_Current)
     3dc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Sample_Coil_Current>
     3e0:	88 23       	and	r24, r24
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <FSM_start+0x26c>
     3e4:	12 cf       	rjmp	.-476    	; 0x20a <FSM_start+0x90>
					{
						Sample_Coil_Current = 0;
     3e6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Sample_Coil_Current>
						uint16_t adc_closing_current = ADC_convert(_PC0);
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
						Door_State = get_doorstate(adc_closing_current); // decide if the door is open or not
     3f0:	0e 94 91 00 	call	0x122	; 0x122 <get_doorstate>
     3f4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Door_State>
							
						if (Door_State==Door_Closed)
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	09 f0       	breq	.+2      	; 0x3fe <FSM_start+0x284>
     3fc:	06 cf       	rjmp	.-500    	; 0x20a <FSM_start+0x90>
						{
							// Move to "WaitTouch_State" state
							Current_FSM_state= 	WaitTouch_State;
     3fe:	83 e0       	ldi	r24, 0x03	; 3
     400:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Current_FSM_state>
							// Enables the "WaitTouch_State" to re-initialize
							wait_touch_routine_initialized = 0;
     404:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <wait_touch_routine_initialized+0x1>
     408:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <wait_touch_routine_initialized>
     40c:	fe ce       	rjmp	.-516    	; 0x20a <FSM_start+0x90>
				break;
				
			case WaitTouch_State:
				
				
				if(!wait_touch_routine_initialized)
     40e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <wait_touch_routine_initialized>
     412:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <wait_touch_routine_initialized+0x1>
     416:	89 2b       	or	r24, r25
     418:	51 f4       	brne	.+20     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				{	
					// stop pmw on the coil
					STOP_8bit_COUNTER2();
     41a:	0e 94 06 03 	call	0x60c	; 0x60c <STOP_8bit_COUNTER2>
					// Initialize 16bit timer to fast pwm mode
					COUNTER_16bit_timer1_init();
     41e:	0e 94 2c 03 	call	0x658	; 0x658 <COUNTER_16bit_timer1_init>
					// start the 1KHz pwm generation
					START_16bit_COUNTER1();
     422:	0e 94 48 03 	call	0x690	; 0x690 <START_16bit_COUNTER1>
					// Intialize "WaitTouch_State" only once
					wait_touch_routine_initialized = 1;
     426:	10 93 18 01 	sts	0x0118, r17	; 0x800118 <wait_touch_routine_initialized+0x1>
     42a:	00 93 17 01 	sts	0x0117, r16	; 0x800117 <wait_touch_routine_initialized>
				}
				
				if(Sample_touch_circuit) // Sample touch circuit at falling edge of 1Hz pwm
     42e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Sample_touch_circuit>
     432:	88 23       	and	r24, r24
     434:	09 f4       	brne	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	e9 ce       	rjmp	.-558    	; 0x20a <FSM_start+0x90>
				{	
					Sample_touch_circuit = 0;
     438:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Sample_touch_circuit>
					uint16_t touch_adc = ADC_convert(_PC2); // sample the voltage at the touch sensor
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
					
					if(sample_touch_flag)
     442:	ab 81       	ldd	r26, Y+3	; 0x03
     444:	bc 81       	ldd	r27, Y+4	; 0x04
     446:	ab 2b       	or	r26, r27
     448:	79 f0       	breq	.+30     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
					{
						uint16_t value_prev = ADC_convert(_PC2); // sample the voltage at the touch sensor
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
	closing_force_routine_initialized = 0;
	wait_touch_routine_initialized = 0;
	opening_force_routine_initialized = 0;
	pmw_delay_flag = 1;
	int sample_touch_flag = 0;
	int first_time_touch_value = 0;
     450:	30 2f       	mov	r19, r16
     452:	21 2f       	mov	r18, r17
     454:	81 3d       	cpi	r24, 0xD1	; 209
     456:	93 40       	sbci	r25, 0x03	; 3
     458:	10 f0       	brcs	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	39 83       	std	Y+1, r19	; 0x01
     460:	2a 83       	std	Y+2, r18	; 0x02
						else
						{
							first_time_touch_value = 1; //door touched
						}
						
						sample_touch_flag = 0;
     462:	1c 82       	std	Y+4, r1	; 0x04
     464:	1b 82       	std	Y+3, r1	; 0x03
     466:	d1 ce       	rjmp	.-606    	; 0x20a <FSM_start+0x90>
					}
					else
					{
						uint16_t value_current = ADC_convert(_PC2); // sample the voltage at the touch sensor
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
						else
						{	
							second_time_touch_value = 1; //door touched
						}
						
						if(first_time_touch_value*second_time_touch_value == 1) //door grabbed for at least 1 second
     46e:	98 01       	movw	r18, r16
     470:	81 3d       	cpi	r24, 0xD1	; 209
     472:	93 40       	sbci	r25, 0x03	; 3
     474:	10 f0       	brcs	.+4      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	49 81       	ldd	r20, Y+1	; 0x01
     47c:	5a 81       	ldd	r21, Y+2	; 0x02
     47e:	24 9f       	mul	r18, r20
     480:	c0 01       	movw	r24, r0
     482:	25 9f       	mul	r18, r21
     484:	90 0d       	add	r25, r0
     486:	34 9f       	mul	r19, r20
     488:	90 0d       	add	r25, r0
     48a:	11 24       	eor	r1, r1
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	09 f0       	breq	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	ba ce       	rjmp	.-652    	; 0x206 <FSM_start+0x8c>
						{	
							// Move to "Generate_Opening_Force_State" state
							Current_FSM_state = Generate_Opening_Force_State;
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Current_FSM_state>
							// Enables the "Generate_Opening_Force_State" state to re-initialize
							opening_force_routine_initialized = 0;
     498:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <opening_force_routine_initialized+0x1>
     49c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <opening_force_routine_initialized>
						}
						
						sample_touch_flag = 1;
     4a0:	1c 83       	std	Y+4, r17	; 0x04
     4a2:	0b 83       	std	Y+3, r16	; 0x03
     4a4:	b2 ce       	rjmp	.-668    	; 0x20a <FSM_start+0x90>
				
				break;	
				
			case Generate_Opening_Force_State:
								
				if(!opening_force_routine_initialized)
     4a6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <opening_force_routine_initialized>
     4aa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <opening_force_routine_initialized+0x1>
     4ae:	89 2b       	or	r24, r25
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b2:	68 c0       	rjmp	.+208    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
				{	
					// turn off the fast pwm generator (wait touch pwm)
					STOP_16bit_COUNTER1(); 
     4b4:	0e 94 55 03 	call	0x6aa	; 0x6aa <STOP_16bit_COUNTER1>
					// Configures the 16bit timer to be a 60 sec timer
					//OPENING_CURRENT_TIMER_config();
					// start a 60 sec timer (time frame for the door opening process)
					//START_OPENING_CURRENT_TIMER();
					Coil_Current_Polarity_State = Opening_Force_Current; // change polarity of current
     4b8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <Coil_Current_Polarity_State>
					// provide the duty cycles that will be cycled through (Duty = 0.1 to 0.9)
					duty[0] = 0.1;duty[1] = 0.2;duty[2] = 0.3;duty[3] = 0.4;
     4bc:	8d ec       	ldi	r24, 0xCD	; 205
     4be:	9c ec       	ldi	r25, 0xCC	; 204
     4c0:	ac ec       	ldi	r26, 0xCC	; 204
     4c2:	bd e3       	ldi	r27, 0x3D	; 61
     4c4:	ec e1       	ldi	r30, 0x1C	; 28
     4c6:	f1 e0       	ldi	r31, 0x01	; 1
     4c8:	80 83       	st	Z, r24
     4ca:	91 83       	std	Z+1, r25	; 0x01
     4cc:	a2 83       	std	Z+2, r26	; 0x02
     4ce:	b3 83       	std	Z+3, r27	; 0x03
     4d0:	8d ec       	ldi	r24, 0xCD	; 205
     4d2:	9c ec       	ldi	r25, 0xCC	; 204
     4d4:	ac e4       	ldi	r26, 0x4C	; 76
     4d6:	be e3       	ldi	r27, 0x3E	; 62
     4d8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <duty+0x4>
     4dc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <duty+0x5>
     4e0:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <duty+0x6>
     4e4:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <duty+0x7>
     4e8:	8a e9       	ldi	r24, 0x9A	; 154
     4ea:	99 e9       	ldi	r25, 0x99	; 153
     4ec:	a9 e9       	ldi	r26, 0x99	; 153
     4ee:	be e3       	ldi	r27, 0x3E	; 62
     4f0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <duty+0x8>
     4f4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <duty+0x9>
     4f8:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <duty+0xa>
     4fc:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <duty+0xb>
     500:	8d ec       	ldi	r24, 0xCD	; 205
     502:	9c ec       	ldi	r25, 0xCC	; 204
     504:	ac ec       	ldi	r26, 0xCC	; 204
     506:	be e3       	ldi	r27, 0x3E	; 62
     508:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <duty+0xc>
     50c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <duty+0xd>
     510:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <duty+0xe>
     514:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <duty+0xf>
					duty[4] = 0.5;duty[5] = 0.6;duty[6] = 0.7;duty[7] = 0.8;duty[8] = 0.9;
     518:	c0 92 2c 01 	sts	0x012C, r12	; 0x80012c <duty+0x10>
     51c:	d0 92 2d 01 	sts	0x012D, r13	; 0x80012d <duty+0x11>
     520:	e0 92 2e 01 	sts	0x012E, r14	; 0x80012e <duty+0x12>
     524:	f0 92 2f 01 	sts	0x012F, r15	; 0x80012f <duty+0x13>
     528:	80 92 30 01 	sts	0x0130, r8	; 0x800130 <duty+0x14>
     52c:	90 92 31 01 	sts	0x0131, r9	; 0x800131 <duty+0x15>
     530:	a0 92 32 01 	sts	0x0132, r10	; 0x800132 <duty+0x16>
     534:	b0 92 33 01 	sts	0x0133, r11	; 0x800133 <duty+0x17>
     538:	40 92 34 01 	sts	0x0134, r4	; 0x800134 <duty+0x18>
     53c:	50 92 35 01 	sts	0x0135, r5	; 0x800135 <duty+0x19>
     540:	60 92 36 01 	sts	0x0136, r6	; 0x800136 <duty+0x1a>
     544:	70 92 37 01 	sts	0x0137, r7	; 0x800137 <duty+0x1b>
     548:	8d ec       	ldi	r24, 0xCD	; 205
     54a:	9c ec       	ldi	r25, 0xCC	; 204
     54c:	ac e4       	ldi	r26, 0x4C	; 76
     54e:	bf e3       	ldi	r27, 0x3F	; 63
     550:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <duty+0x1c>
     554:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <duty+0x1d>
     558:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <duty+0x1e>
     55c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <duty+0x1f>
     560:	86 e6       	ldi	r24, 0x66	; 102
     562:	96 e6       	ldi	r25, 0x66	; 102
     564:	a6 e6       	ldi	r26, 0x66	; 102
     566:	bf e3       	ldi	r27, 0x3F	; 63
     568:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <duty+0x20>
     56c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <duty+0x21>
     570:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <duty+0x22>
     574:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <duty+0x23>
					// restart pwm generation on the coil
					START_8bit_COUNTER2(); 
     578:	0e 94 fe 02 	call	0x5fc	; 0x5fc <START_8bit_COUNTER2>
					// initialize "Generate_Opening_Force_State" state once
					opening_force_routine_initialized = 1;
     57c:	10 93 15 01 	sts	0x0115, r17	; 0x800115 <opening_force_routine_initialized+0x1>
     580:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <opening_force_routine_initialized>
				}
				
				if(Sample_Coil_Current)
     584:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Sample_Coil_Current>
     588:	88 23       	and	r24, r24
     58a:	09 f4       	brne	.+2      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     58c:	3e ce       	rjmp	.-900    	; 0x20a <FSM_start+0x90>
				{
					
					Sample_Coil_Current = 0;
     58e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Sample_Coil_Current>
					uint16_t adc_opening_current = ADC_convert(_PC0);
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
					Door_State = get_doorstate(adc_opening_current); // decide if the door is open or not
     598:	0e 94 91 00 	call	0x122	; 0x122 <get_doorstate>
     59c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Door_State>
					
					if (Door_State==Door_Opened)
     5a0:	82 30       	cpi	r24, 0x02	; 2
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5a4:	32 ce       	rjmp	.-924    	; 0x20a <FSM_start+0x90>
					{	
						// Move to "Generate_Closing_Force_State" state to provide closing force
						Current_FSM_state = Generate_Closing_Force_State;
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Current_FSM_state>
						// Enables the "Generate_Closing_Force_State" state to re-initialize
						closing_force_routine_initialized = 0;
     5ac:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <closing_force_routine_initialized+0x1>
     5b0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <closing_force_routine_initialized>
     5b4:	2a ce       	rjmp	.-940    	; 0x20a <FSM_start+0x90>
					
				}
			
				break;
			default:
				Current_FSM_state = Initialisation_State;
     5b6:	30 92 13 01 	sts	0x0113, r3	; 0x800113 <Current_FSM_state>
				break;
     5ba:	27 ce       	rjmp	.-946    	; 0x20a <FSM_start+0x90>

000005bc <COUNTER_8bit_timer2_init>:
 *
 */ 
void COUNTER_8bit_timer2_init(void)
{
	// Set to CTC mode
	TCCR2A |= (1<<WGM21);TCCR2A &= ~(1<<TCCR2A); TCCR2B &= (1<<WGM22);
     5bc:	e0 eb       	ldi	r30, 0xB0	; 176
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	82 60       	ori	r24, 0x02	; 2
     5c4:	80 83       	st	Z, r24
     5c6:	30 81       	ld	r19, Z
     5c8:	20 81       	ld	r18, Z
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <COUNTER_8bit_timer2_init+0x18>
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	3a 95       	dec	r19
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <COUNTER_8bit_timer2_init+0x14>
     5d8:	80 95       	com	r24
     5da:	90 95       	com	r25
     5dc:	82 23       	and	r24, r18
     5de:	80 83       	st	Z, r24
     5e0:	e1 eb       	ldi	r30, 0xB1	; 177
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	88 70       	andi	r24, 0x08	; 8
     5e8:	80 83       	st	Z, r24
	
	//Enable ISR when count matches OCR1 value
	TIMSK2 |= (1<<OCIE2A);
     5ea:	e0 e7       	ldi	r30, 0x70	; 112
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	82 60       	ori	r24, 0x02	; 2
     5f2:	80 83       	st	Z, r24
	
	// Initial Value to count to
	OCR2A = 10;
     5f4:	8a e0       	ldi	r24, 0x0A	; 10
     5f6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     5fa:	08 95       	ret

000005fc <START_8bit_COUNTER2>:
 */ 

void START_8bit_COUNTER2(void)
{		
		// Resets counter value to zero
		TCNT2 = 0;
     5fc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
		// Set prescaller to 1024 and start counting
		TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20);
     600:	e1 eb       	ldi	r30, 0xB1	; 177
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	87 60       	ori	r24, 0x07	; 7
     608:	80 83       	st	Z, r24
     60a:	08 95       	ret

0000060c <STOP_8bit_COUNTER2>:
 * This function stops the 16 bit counter 
 */ 
void STOP_8bit_COUNTER2(void)
{		
		// Disconnect clk from timer (Stop the timer)
		TCCR2B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     60c:	e1 eb       	ldi	r30, 0xB1	; 177
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
     612:	88 7f       	andi	r24, 0xF8	; 248
     614:	80 83       	st	Z, r24
		
		// turn off all coil pwm
		PORTD &= ~((1<<DDD6) | (1<<DDD7) | (1<<DDD4) | (1<<DDD5));
     616:	8b b1       	in	r24, 0x0b	; 11
     618:	8f 70       	andi	r24, 0x0F	; 15
     61a:	8b b9       	out	0x0b, r24	; 11
     61c:	08 95       	ret

0000061e <COUNTER_8bit_timer0_init>:
 * This function initializes the 8 bit timer (Timer0/Counter0)
 */ 
void COUNTER_8bit_timer0_init(void)
{
	// Set to CTC mode
	TCCR0A |= (1<<WGM01); TCCR0A &= ~(1<<WGM00);  TCCR0B &= (1<<WGM02);
     61e:	84 b5       	in	r24, 0x24	; 36
     620:	82 60       	ori	r24, 0x02	; 2
     622:	84 bd       	out	0x24, r24	; 36
     624:	84 b5       	in	r24, 0x24	; 36
     626:	8e 7f       	andi	r24, 0xFE	; 254
     628:	84 bd       	out	0x24, r24	; 36
     62a:	85 b5       	in	r24, 0x25	; 37
     62c:	88 70       	andi	r24, 0x08	; 8
     62e:	85 bd       	out	0x25, r24	; 37

	
	//Enable ISR when count matches OCR1 value
	TIMSK0 |= (1<<OCIE0A);
     630:	ee e6       	ldi	r30, 0x6E	; 110
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	82 60       	ori	r24, 0x02	; 2
     638:	80 83       	st	Z, r24
	
	// Initial Value to count to
	OCR0A = 1;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	87 bd       	out	0x27, r24	; 39
     63e:	08 95       	ret

00000640 <START_8bit_COUNTER0>:
 */ 

void START_8bit_COUNTER0(void)
{		
		// Resets counter value to zero
		TCNT0 = 0;
     640:	16 bc       	out	0x26, r1	; 38
		// Set prescaller to 256 and start counting
		TCCR0B |= (1<<CS02); TCCR0B &= ~((1<<CS01) |(1<<CS00));
     642:	85 b5       	in	r24, 0x25	; 37
     644:	84 60       	ori	r24, 0x04	; 4
     646:	85 bd       	out	0x25, r24	; 37
     648:	85 b5       	in	r24, 0x25	; 37
     64a:	8c 7f       	andi	r24, 0xFC	; 252
     64c:	85 bd       	out	0x25, r24	; 37
     64e:	08 95       	ret

00000650 <STOP_8bit_COUNTER0>:
 * This function stops the 16 bit counter 
 */ 
void STOP_8bit_COUNTER0(void)
{
		// Disconnect clk from timer (Stop the timer)
		TCCR0B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     650:	85 b5       	in	r24, 0x25	; 37
     652:	88 7f       	andi	r24, 0xF8	; 248
     654:	85 bd       	out	0x25, r24	; 37
     656:	08 95       	ret

00000658 <COUNTER_16bit_timer1_init>:
 * This function initializes the 8 bit timer (Timer2/Counter2)
 */ 
void COUNTER_16bit_timer1_init(void)
{
// Set FAST-PWM mode
TCCR1A |= (1<<WGM11) | (1<<WGM10); TCCR1B |= (1<<WGM13) | (1<<WGM12);
     658:	e0 e8       	ldi	r30, 0x80	; 128
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	83 60       	ori	r24, 0x03	; 3
     660:	80 83       	st	Z, r24
     662:	a1 e8       	ldi	r26, 0x81	; 129
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	8c 91       	ld	r24, X
     668:	88 61       	ori	r24, 0x18	; 24
     66a:	8c 93       	st	X, r24

// Set PWM period to 1ms
OCR1A = 5;
     66c:	85 e0       	ldi	r24, 0x05	; 5
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     674:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

// Disable Intrrupt
TIMSK1 &= ~(1<<OCIE1A);
     678:	af e6       	ldi	r26, 0x6F	; 111
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	8c 91       	ld	r24, X
     67e:	8d 7f       	andi	r24, 0xFD	; 253
     680:	8c 93       	st	X, r24

//Set inverinting
TCCR1A |= (1<<COM1A0);  TCCR1A &= ~(1<<COM1A1);
     682:	80 81       	ld	r24, Z
     684:	80 64       	ori	r24, 0x40	; 64
     686:	80 83       	st	Z, r24
     688:	80 81       	ld	r24, Z
     68a:	8f 77       	andi	r24, 0x7F	; 127
     68c:	80 83       	st	Z, r24
     68e:	08 95       	ret

00000690 <START_16bit_COUNTER1>:
 * This function starts the 8 bit counter2 with a prescale of 256
 */ 
void START_16bit_COUNTER1(void)
{	
	// Reset timer value to zero
	TCNT1 = 0;
     690:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     694:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	// Set prescaller to 64 and start timer
	TCCR1B |= (1<<CS11) | (1<<CS10); TCCR1B &= ~(1<<CS12);
     698:	e1 e8       	ldi	r30, 0x81	; 129
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	83 60       	ori	r24, 0x03	; 3
     6a0:	80 83       	st	Z, r24
     6a2:	80 81       	ld	r24, Z
     6a4:	8b 7f       	andi	r24, 0xFB	; 251
     6a6:	80 83       	st	Z, r24
     6a8:	08 95       	ret

000006aa <STOP_16bit_COUNTER1>:
 * This function stops the 8 bit counter2 
 */ 
void STOP_16bit_COUNTER1(void)
{
	// Disconnect the timer clock (stop FAST PWM generation)
	TCCR1B &= ~((1<<CS22) | (1<<CS21) | (1<<CS20));
     6aa:	e1 e8       	ldi	r30, 0x81	; 129
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	88 7f       	andi	r24, 0xF8	; 248
     6b2:	80 83       	st	Z, r24
     6b4:	08 95       	ret

000006b6 <PWM_DELAY_init>:
 */ 
void PWM_DELAY_init(void)
{	
	
	// Set to CTC mode
	TCCR1A &= ~((1<<WGM10) | (1<<WGM11)); TCCR1B &= ~(1<<WGM13); TCCR1B |= (1<<WGM12);
     6b6:	e0 e8       	ldi	r30, 0x80	; 128
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	8c 7f       	andi	r24, 0xFC	; 252
     6be:	80 83       	st	Z, r24
     6c0:	e1 e8       	ldi	r30, 0x81	; 129
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	8f 7e       	andi	r24, 0xEF	; 239
     6c8:	80 83       	st	Z, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	88 60       	ori	r24, 0x08	; 8
     6ce:	80 83       	st	Z, r24
	
	// Trigger ISR when timer is up (Timer matches OCR1A value)
	TIMSK1 |= (1<<OCIE1A);
     6d0:	ef e6       	ldi	r30, 0x6F	; 111
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	80 83       	st	Z, r24
	
	// Set timeout to be 30 sec
	OCR1A = 10000;//23436;
     6da:	80 e1       	ldi	r24, 0x10	; 16
     6dc:	97 e2       	ldi	r25, 0x27	; 39
     6de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     6e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     6e6:	08 95       	ret

000006e8 <START_PWM_DELAY>:
 * This function this function starts a 60 second timer (this timer is the 16bit timer)
 */ 
void START_PWM_DELAY(void)
{	
	// reset timer value
	TCNT1 = 0;
     6e8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     6ec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	// Set prescaller to 1024
	TCCR1B |= (1<<CS12) | (1<<CS10); TCCR1B &= ~(1<<CS11);
     6f0:	e1 e8       	ldi	r30, 0x81	; 129
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	80 81       	ld	r24, Z
     6f6:	85 60       	ori	r24, 0x05	; 5
     6f8:	80 83       	st	Z, r24
     6fa:	80 81       	ld	r24, Z
     6fc:	8d 7f       	andi	r24, 0xFD	; 253
     6fe:	80 83       	st	Z, r24
     700:	08 95       	ret

00000702 <STOP_PWM_DELAY>:
 * This function stops the 60 second timer "OPENING_CURRENT_TIMER" (this timer is the 16bit timer)
 */ 
void STOP_PWM_DELAY(void)
{
	// Disconnect the timer clock (stop FAST PWM generation)
	TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10));
     702:	e1 e8       	ldi	r30, 0x81	; 129
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	88 7f       	andi	r24, 0xF8	; 248
     70a:	80 83       	st	Z, r24
     70c:	08 95       	ret

0000070e <INIT_EXTERNAL_ISR>:
 * This function initialise the external interupt module
 */ 
void INIT_EXTERNAL_ISR(void)
{	
	// Enable external isr on pin PD2
	EIMSK |= (1<<INT0);
     70e:	e8 9a       	sbi	0x1d, 0	; 29
	// trigger ISR on falling edge on PD2
	EICRA |= (1<<ISC01); //EICRA &= ~(1<<ISC00);
     710:	e9 e6       	ldi	r30, 0x69	; 105
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	82 60       	ori	r24, 0x02	; 2
     718:	80 83       	st	Z, r24
	
	// Enable external isr on PD3
	EIMSK |= (1<<INT1);
     71a:	e9 9a       	sbi	0x1d, 1	; 29
	
	// trigger ISR on rising edge on PD3
	EICRA |= (1<<ISC10) | (1<<ISC11);
     71c:	80 81       	ld	r24, Z
     71e:	8c 60       	ori	r24, 0x0C	; 12
     720:	80 83       	st	Z, r24
     722:	08 95       	ret

00000724 <GPIO_init>:
 * This function initializes all pins to Vcc
 */ 
void GPIO_init(void)
{
	// Set all pins to output
	DDRD = 0xFF; DDRC = 0xFF; DDRB = 0xFF;
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	8a b9       	out	0x0a, r24	; 10
     728:	87 b9       	out	0x07, r24	; 7
     72a:	84 b9       	out	0x04, r24	; 4
	
	// Set all pins to High
	PORTD = 0xFF; PORTC = 0xFF; PORTB = 0xFF;
     72c:	8b b9       	out	0x0b, r24	; 11
     72e:	88 b9       	out	0x08, r24	; 8
     730:	85 b9       	out	0x05, r24	; 5
	
	DDRC &= ~(1<<DDC0);  // set PCO input pin
     732:	38 98       	cbi	0x07, 0	; 7
	PORTC &= ~(1<<DDC0); // 
     734:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1<<DDC1); //
     736:	41 98       	cbi	0x08, 1	; 8
	
	DDRC &= ~(1<<DDC0); // set PCO as input pin to sample voltage across coil
     738:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1<<DDC1); // set PC1 as input pin to sample voltage across coil
     73a:	39 98       	cbi	0x07, 1	; 7
	DDRC &= ~(1<<DDC2); // set PC2 as input pin to sample voltage at touch sensor
     73c:	3a 98       	cbi	0x07, 2	; 7
	
	
	DDRD &= ~(1<<DDD2); // set PD2 as input pin to detect falling edge on fast pwm
     73e:	52 98       	cbi	0x0a, 2	; 10
	DDRD &= ~(1<<DDD3); // set PD3 as input pin to detect rising edge on coil pwm
     740:	53 98       	cbi	0x0a, 3	; 10
     742:	08 95       	ret

00000744 <UART_init>:
 * This function initializes the UART
 * 
 */
void UART_init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr>>8);
     744:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
     748:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     74c:	88 e1       	ldi	r24, 0x18	; 24
     74e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (3<<UCSZ00);
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     758:	08 95       	ret

0000075a <UART_transmit_char>:
 * This function transmit a character serially via UART
 * 
 */
void UART_transmit_char(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));
     75a:	e0 ec       	ldi	r30, 0xC0	; 192
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	90 81       	ld	r25, Z
     760:	95 ff       	sbrs	r25, 5
     762:	fd cf       	rjmp	.-6      	; 0x75e <UART_transmit_char+0x4>
	UDR0 = data;
     764:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     768:	08 95       	ret

0000076a <UART_transmit_string>:
/*
 * This function transmit a string serially via UART
 * 
 */
void UART_transmit_string(char *str)
{
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	8c 01       	movw	r16, r24
     778:	7c 01       	movw	r14, r24
	int i;
	for(i = 0; i < strlen(str); i++) {
     77a:	c0 e0       	ldi	r28, 0x00	; 0
     77c:	d0 e0       	ldi	r29, 0x00	; 0
     77e:	06 c0       	rjmp	.+12     	; 0x78c <UART_transmit_string+0x22>
		UART_transmit_char(str[i]);
     780:	f7 01       	movw	r30, r14
     782:	81 91       	ld	r24, Z+
     784:	7f 01       	movw	r14, r30
     786:	0e 94 ad 03 	call	0x75a	; 0x75a <UART_transmit_char>
 * 
 */
void UART_transmit_string(char *str)
{
	int i;
	for(i = 0; i < strlen(str); i++) {
     78a:	21 96       	adiw	r28, 0x01	; 1
     78c:	f8 01       	movw	r30, r16
     78e:	01 90       	ld	r0, Z+
     790:	00 20       	and	r0, r0
     792:	e9 f7       	brne	.-6      	; 0x78e <UART_transmit_string+0x24>
     794:	31 97       	sbiw	r30, 0x01	; 1
     796:	e0 1b       	sub	r30, r16
     798:	f1 0b       	sbc	r31, r17
     79a:	ce 17       	cp	r28, r30
     79c:	df 07       	cpc	r29, r31
     79e:	80 f3       	brcs	.-32     	; 0x780 <UART_transmit_string+0x16>
		UART_transmit_char(str[i]);
	}
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	08 95       	ret

000007ae <uart_transmit_byte>:
 * This function transmits a byte serially via UART
 */
void uart_transmit_byte(uint8_t byte)
{
	// Wait for the UART data register empty flag
	while ((UCSR0A & 0x20) == 0) {
     7ae:	e0 ec       	ldi	r30, 0xC0	; 192
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	90 81       	ld	r25, Z
     7b4:	95 ff       	sbrs	r25, 5
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <uart_transmit_byte+0x4>
		;
	}
	
	// Put the byte to be sent into the data register
	UDR0 = byte;
     7b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     7bc:	08 95       	ret

000007be <UART_transmit>:

/* 
 * This function transmits an array of byte serially via UART
 */
void UART_transmit(uint8_t* byte_array, uint32_t byte_array_length)
{
     7be:	8f 92       	push	r8
     7c0:	9f 92       	push	r9
     7c2:	af 92       	push	r10
     7c4:	bf 92       	push	r11
     7c6:	cf 92       	push	r12
     7c8:	df 92       	push	r13
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
	// Loop through each byte
	for (uint32_t i = 0; i < byte_array_length; i++) {
     7d2:	41 15       	cp	r20, r1
     7d4:	51 05       	cpc	r21, r1
     7d6:	61 05       	cpc	r22, r1
     7d8:	71 05       	cpc	r23, r1
     7da:	a1 f0       	breq	.+40     	; 0x804 <UART_transmit+0x46>
     7dc:	4a 01       	movw	r8, r20
     7de:	5b 01       	movw	r10, r22
     7e0:	c8 2f       	mov	r28, r24
     7e2:	d9 2f       	mov	r29, r25
     7e4:	c1 2c       	mov	r12, r1
     7e6:	d1 2c       	mov	r13, r1
     7e8:	76 01       	movw	r14, r12
		// Transmit it via the UART
		uart_transmit_byte(byte_array[i]);
     7ea:	89 91       	ld	r24, Y+
     7ec:	0e 94 d7 03 	call	0x7ae	; 0x7ae <uart_transmit_byte>
 * This function transmits an array of byte serially via UART
 */
void UART_transmit(uint8_t* byte_array, uint32_t byte_array_length)
{
	// Loop through each byte
	for (uint32_t i = 0; i < byte_array_length; i++) {
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	c8 1a       	sub	r12, r24
     7f4:	d8 0a       	sbc	r13, r24
     7f6:	e8 0a       	sbc	r14, r24
     7f8:	f8 0a       	sbc	r15, r24
     7fa:	8c 14       	cp	r8, r12
     7fc:	9d 04       	cpc	r9, r13
     7fe:	ae 04       	cpc	r10, r14
     800:	bf 04       	cpc	r11, r15
     802:	99 f7       	brne	.-26     	; 0x7ea <UART_transmit+0x2c>
		// Transmit it via the UART
		uart_transmit_byte(byte_array[i]);
	}
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	bf 90       	pop	r11
     812:	af 90       	pop	r10
     814:	9f 90       	pop	r9
     816:	8f 90       	pop	r8
     818:	08 95       	ret

0000081a <int2str>:
 * e.g int a = 123
 * becomes b[3] = {"1","2","3"} 
 */

uint32_t int2str(uint16_t number, uint8_t* buffer)
{
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	ac 01       	movw	r20, r24
	uint32_t i = 0;
	
	if(number == 0) buffer[0] = 0;
     824:	89 2b       	or	r24, r25
     826:	31 f4       	brne	.+12     	; 0x834 <int2str+0x1a>
     828:	fb 01       	movw	r30, r22
     82a:	10 82       	st	Z, r1
     82c:	c1 2c       	mov	r12, r1
     82e:	d1 2c       	mov	r13, r1
     830:	76 01       	movw	r14, r12
     832:	32 c0       	rjmp	.+100    	; 0x898 <int2str+0x7e>
     834:	fb 01       	movw	r30, r22
     836:	c1 2c       	mov	r12, r1
     838:	d1 2c       	mov	r13, r1
     83a:	76 01       	movw	r14, r12
	while(number != 0)
	{
		buffer[i] = (number%10) + 48;
     83c:	9a 01       	movw	r18, r20
     83e:	ad ec       	ldi	r26, 0xCD	; 205
     840:	bc ec       	ldi	r27, 0xCC	; 204
     842:	0e 94 41 08 	call	0x1082	; 0x1082 <__umulhisi3>
     846:	96 95       	lsr	r25
     848:	87 95       	ror	r24
     84a:	96 95       	lsr	r25
     84c:	87 95       	ror	r24
     84e:	96 95       	lsr	r25
     850:	87 95       	ror	r24
     852:	9c 01       	movw	r18, r24
     854:	22 0f       	add	r18, r18
     856:	33 1f       	adc	r19, r19
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	82 0f       	add	r24, r18
     866:	93 1f       	adc	r25, r19
     868:	9a 01       	movw	r18, r20
     86a:	28 1b       	sub	r18, r24
     86c:	39 0b       	sbc	r19, r25
     86e:	c9 01       	movw	r24, r18
     870:	80 5d       	subi	r24, 0xD0	; 208
     872:	81 93       	st	Z+, r24
		number = number/10;
     874:	9a 01       	movw	r18, r20
     876:	0e 94 41 08 	call	0x1082	; 0x1082 <__umulhisi3>
     87a:	ac 01       	movw	r20, r24
     87c:	56 95       	lsr	r21
     87e:	47 95       	ror	r20
     880:	56 95       	lsr	r21
     882:	47 95       	ror	r20
     884:	56 95       	lsr	r21
     886:	47 95       	ror	r20
		i++;
     888:	3f ef       	ldi	r19, 0xFF	; 255
     88a:	c3 1a       	sub	r12, r19
     88c:	d3 0a       	sbc	r13, r19
     88e:	e3 0a       	sbc	r14, r19
     890:	f3 0a       	sbc	r15, r19
uint32_t int2str(uint16_t number, uint8_t* buffer)
{
	uint32_t i = 0;
	
	if(number == 0) buffer[0] = 0;
	while(number != 0)
     892:	41 15       	cp	r20, r1
     894:	51 05       	cpc	r21, r1
     896:	91 f6       	brne	.-92     	; 0x83c <int2str+0x22>
	}
	*/
	
	
	return i;
     898:	c7 01       	movw	r24, r14
     89a:	b6 01       	movw	r22, r12
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret

000008a6 <UART_transmit_number>:

/* 
 * This function transmits a number via uart
 */
void UART_transmit_number(uint16_t data)
{
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	2a 97       	sbiw	r28, 0x0a	; 10
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte_array[10];
 	uint32_t byte_array_length = int2str(data,byte_array);
     8ba:	be 01       	movw	r22, r28
     8bc:	6f 5f       	subi	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	0e 94 0d 04 	call	0x81a	; 0x81a <int2str>
     8c4:	ab 01       	movw	r20, r22
     8c6:	bc 01       	movw	r22, r24
	UART_transmit(byte_array,byte_array_length);
     8c8:	ce 01       	movw	r24, r28
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	0e 94 df 03 	call	0x7be	; 0x7be <UART_transmit>
}
     8d0:	2a 96       	adiw	r28, 0x0a	; 10
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <__vector_7>:
/*
 * This ISR timer creates a PWM and starts the timer(3.2ms) used to measure coil current
 *
 */ 
ISR(TIMER2_COMPA_vect)
{	
     8e2:	1f 92       	push	r1
     8e4:	0f 92       	push	r0
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	2f 93       	push	r18
     8ee:	3f 93       	push	r19
     8f0:	4f 93       	push	r20
     8f2:	5f 93       	push	r21
     8f4:	6f 93       	push	r22
     8f6:	7f 93       	push	r23
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
	
	if(pmw_arbiter == 0) // create a falling edge on pwm
     904:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     908:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	89 f5       	brne	.+98     	; 0x972 <__stack+0x73>
	{			
		PORTD &= ~((1<<DDD6) | (1<<DDD7) | (1<<DDD4) | (1<<DDD5));
     910:	8b b1       	in	r24, 0x0b	; 11
     912:	8f 70       	andi	r24, 0x0F	; 15
     914:	8b b9       	out	0x0b, r24	; 11
		OCR2A = PERIOD_50ms*(1-duty[duty_index]); // changes duty cycle
     916:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <duty_index>
     91a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <duty_index+0x1>
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	e4 5e       	subi	r30, 0xE4	; 228
     928:	fe 4f       	sbci	r31, 0xFE	; 254
     92a:	20 81       	ld	r18, Z
     92c:	31 81       	ldd	r19, Z+1	; 0x01
     92e:	42 81       	ldd	r20, Z+2	; 0x02
     930:	53 81       	ldd	r21, Z+3	; 0x03
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 e8       	ldi	r24, 0x80	; 128
     938:	9f e3       	ldi	r25, 0x3F	; 63
     93a:	0e 94 f6 05 	call	0xbec	; 0xbec <__subsf3>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	4c e1       	ldi	r20, 0x1C	; 28
     944:	52 e4       	ldi	r21, 0x42	; 66
     946:	0e 94 c0 07 	call	0xf80	; 0xf80 <__mulsf3>
     94a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fixunssfsi>
     94e:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		pmw_arbiter = 1; // create rising edge on pwm on next 16 bit timer match
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     95a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		period_count++;
     95e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <period_count>
     962:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <period_count+0x1>
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <period_count+0x1>
     96c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <period_count>
     970:	34 c0       	rjmp	.+104    	; 0x9da <__stack+0xdb>
	}
	else if(pmw_arbiter == 1) // create a rising edge on pwm
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	91 f5       	brne	.+100    	; 0x9da <__stack+0xdb>
	{	
		
		if(Coil_Current_Polarity_State == Opening_Force_Current) 
     976:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Coil_Current_Polarity_State>
     97a:	81 11       	cpse	r24, r1
     97c:	0d c0       	rjmp	.+26     	; 0x998 <__stack+0x99>
		{	
			opening_current_timer_count++;
     97e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <opening_current_timer_count>
     982:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <opening_current_timer_count+0x1>
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <opening_current_timer_count+0x1>
     98c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <opening_current_timer_count>
			PORTD |= (1<<DDD6) | (1<<DDD7); // set pwm pins for opening current gate drivers
     990:	8b b1       	in	r24, 0x0b	; 11
     992:	80 6c       	ori	r24, 0xC0	; 192
     994:	8b b9       	out	0x0b, r24	; 11
     996:	05 c0       	rjmp	.+10     	; 0x9a2 <__stack+0xa3>
		}
		else if(Coil_Current_Polarity_State == Closing_Force_Current) 
     998:	81 30       	cpi	r24, 0x01	; 1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__stack+0xa3>
		{	
			PORTD |=  (1<<DDD4) | (1<<DDD5); // set pwm pins for closing current gate drivers
     99c:	8b b1       	in	r24, 0x0b	; 11
     99e:	80 63       	ori	r24, 0x30	; 48
     9a0:	8b b9       	out	0x0b, r24	; 11
		}

		OCR2A = PERIOD_50ms*duty[duty_index]; // changes duty cycle
     9a2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <duty_index>
     9a6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <duty_index+0x1>
     9aa:	ee 0f       	add	r30, r30
     9ac:	ff 1f       	adc	r31, r31
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	e4 5e       	subi	r30, 0xE4	; 228
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	4c e1       	ldi	r20, 0x1C	; 28
     9bc:	52 e4       	ldi	r21, 0x42	; 66
     9be:	60 81       	ld	r22, Z
     9c0:	71 81       	ldd	r23, Z+1	; 0x01
     9c2:	82 81       	ldd	r24, Z+2	; 0x02
     9c4:	93 81       	ldd	r25, Z+3	; 0x03
     9c6:	0e 94 c0 07 	call	0xf80	; 0xf80 <__mulsf3>
     9ca:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__fixunssfsi>
     9ce:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		pmw_arbiter = 0; // create a falling edge on next 16bit timer match 
     9d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     9d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
	
	if(period_count == 10) // wait 10 period count before changing into new duty cycle
     9da:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <period_count>
     9de:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <period_count+0x1>
     9e2:	0a 97       	sbiw	r24, 0x0a	; 10
     9e4:	39 f5       	brne	.+78     	; 0xa34 <__stack+0x135>
	{	
		period_count = 0; //reset period count
     9e6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <period_count+0x1>
     9ea:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <period_count>
		duty_index = ++duty_index%9; // cycles through pwm duty cycles repeatedly
     9ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <duty_index>
     9f2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <duty_index+0x1>
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	69 e0       	ldi	r22, 0x09	; 9
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	0e 94 2d 08 	call	0x105a	; 0x105a <__divmodhi4>
     a00:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <duty_index+0x1>
     a04:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <duty_index>
		
		
		if(duty[duty_index] == 0.5)
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	fc 01       	movw	r30, r24
     a12:	e4 5e       	subi	r30, 0xE4	; 228
     a14:	fe 4f       	sbci	r31, 0xFE	; 254
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	60 81       	ld	r22, Z
     a20:	71 81       	ldd	r23, Z+1	; 0x01
     a22:	82 81       	ldd	r24, Z+2	; 0x02
     a24:	93 81       	ldd	r25, Z+3	; 0x03
     a26:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__cmpsf2>
     a2a:	81 11       	cpse	r24, r1
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <__stack+0x133>
		{
		 // Enable external isr on PD3
		 EIMSK |= (1<<INT1);
     a2e:	e9 9a       	sbi	0x1d, 1	; 29
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <__stack+0x135>
		}
		else
		{			
		 // Disable external isr on PD3
		  EIMSK &= ~(1<<INT1);
     a32:	e9 98       	cbi	0x1d, 1	; 29
		}
	
	}
	
	if(opening_current_timer_count == 100)
     a34:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <opening_current_timer_count>
     a38:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <opening_current_timer_count+0x1>
     a3c:	84 36       	cpi	r24, 0x64	; 100
     a3e:	91 05       	cpc	r25, r1
     a40:	59 f4       	brne	.+22     	; 0xa58 <__stack+0x159>
	{
		Current_FSM_state = WaitTouch_State;
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Current_FSM_state>
		wait_touch_routine_initialized = 0;
     a48:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <wait_touch_routine_initialized+0x1>
     a4c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <wait_touch_routine_initialized>
		opening_current_timer_count = 0;
     a50:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <opening_current_timer_count+0x1>
     a54:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <opening_current_timer_count>
	}
	
}
     a58:	ff 91       	pop	r31
     a5a:	ef 91       	pop	r30
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	7f 91       	pop	r23
     a66:	6f 91       	pop	r22
     a68:	5f 91       	pop	r21
     a6a:	4f 91       	pop	r20
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	1f 90       	pop	r1
     a78:	18 95       	reti

00000a7a <__vector_14>:
/*
 * This ISR timer counts 3.2 ms to start sampling coil current
 * it sets a flag to sample the current
 */ 
ISR(TIMER0_COMPA_vect)
{	
     a7a:	1f 92       	push	r1
     a7c:	0f 92       	push	r0
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	0f 92       	push	r0
     a82:	11 24       	eor	r1, r1
     a84:	2f 93       	push	r18
     a86:	3f 93       	push	r19
     a88:	4f 93       	push	r20
     a8a:	5f 93       	push	r21
     a8c:	6f 93       	push	r22
     a8e:	7f 93       	push	r23
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	af 93       	push	r26
     a96:	bf 93       	push	r27
     a98:	ef 93       	push	r30
     a9a:	ff 93       	push	r31
		Sample_Coil_Current = 1; // set flag to initialize current sampling
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Sample_Coil_Current>
		int adc = ADC_convert(_PC0);
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 67 00 	call	0xce	; 0xce <ADC_convert>
		UART_transmit_number(adc);
     aa8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <UART_transmit_number>
		UART_transmit_string("\n\r");
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0e 94 b5 03 	call	0x76a	; 0x76a <UART_transmit_string>
		STOP_8bit_COUNTER0(); // stop timer0 to prevent sampling coil current at other times	
     ab4:	0e 94 28 03 	call	0x650	; 0x650 <STOP_8bit_COUNTER0>
}
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <__vector_1>:


ISR(INT0_vect)
{	
     ada:	1f 92       	push	r1
     adc:	0f 92       	push	r0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	0f 92       	push	r0
     ae2:	11 24       	eor	r1, r1
     ae4:	2f 93       	push	r18
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
	if(fast_pwm_period_count == 1000) // wait 1 sec for before sampling the touch circuit again
     aea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     aee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
     af2:	88 3e       	cpi	r24, 0xE8	; 232
     af4:	93 40       	sbci	r25, 0x03	; 3
     af6:	39 f4       	brne	.+14     	; 0xb06 <__vector_1+0x2c>
	{
		Sample_touch_circuit = 1; // set flag to initialize the sampling process
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Sample_touch_circuit>
		fast_pwm_period_count  = 0;
     afe:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
     b02:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
	}
		
	fast_pwm_period_count++;	
     b06:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     b0a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     b14:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
     b18:	9f 91       	pop	r25
     b1a:	8f 91       	pop	r24
     b1c:	2f 91       	pop	r18
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <__vector_2>:


ISR(INT1_vect)
{	
     b28:	1f 92       	push	r1
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	0f 92       	push	r0
     b30:	11 24       	eor	r1, r1
     b32:	2f 93       	push	r18
     b34:	3f 93       	push	r19
     b36:	4f 93       	push	r20
     b38:	5f 93       	push	r21
     b3a:	6f 93       	push	r22
     b3c:	7f 93       	push	r23
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
     b42:	af 93       	push	r26
     b44:	bf 93       	push	r27
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
	// start a 3.2 ms timer
	START_8bit_COUNTER0();
     b4a:	0e 94 20 03 	call	0x640	; 0x640 <START_8bit_COUNTER0>
}
     b4e:	ff 91       	pop	r31
     b50:	ef 91       	pop	r30
     b52:	bf 91       	pop	r27
     b54:	af 91       	pop	r26
     b56:	9f 91       	pop	r25
     b58:	8f 91       	pop	r24
     b5a:	7f 91       	pop	r23
     b5c:	6f 91       	pop	r22
     b5e:	5f 91       	pop	r21
     b60:	4f 91       	pop	r20
     b62:	3f 91       	pop	r19
     b64:	2f 91       	pop	r18
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <__vector_11>:




ISR(TIMER1_COMPA_vect)
{	
     b70:	1f 92       	push	r1
     b72:	0f 92       	push	r0
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	0f 92       	push	r0
     b78:	11 24       	eor	r1, r1
     b7a:	2f 93       	push	r18
     b7c:	3f 93       	push	r19
     b7e:	4f 93       	push	r20
     b80:	5f 93       	push	r21
     b82:	6f 93       	push	r22
     b84:	7f 93       	push	r23
     b86:	8f 93       	push	r24
     b88:	9f 93       	push	r25
     b8a:	af 93       	push	r26
     b8c:	bf 93       	push	r27
     b8e:	ef 93       	push	r30
     b90:	ff 93       	push	r31
	// signal generate closing force
	pmw_delay_flag = 0; 
     b92:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <pmw_delay_flag+0x1>
     b96:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <pmw_delay_flag>
	// stop the delay timer
	STOP_PWM_DELAY();
     b9a:	0e 94 81 03 	call	0x702	; 0x702 <STOP_PWM_DELAY>
}
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	0f 90       	pop	r0
     bbc:	1f 90       	pop	r1
     bbe:	18 95       	reti

00000bc0 <main>:


int main(void)
{	
	// Initializes the drivers
	ADC_init();
     bc0:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	COUNTER_8bit_timer2_init();
     bc4:	0e 94 de 02 	call	0x5bc	; 0x5bc <COUNTER_8bit_timer2_init>
	COUNTER_8bit_timer0_init();
     bc8:	0e 94 0f 03 	call	0x61e	; 0x61e <COUNTER_8bit_timer0_init>
	COUNTER_16bit_timer1_init();
     bcc:	0e 94 2c 03 	call	0x658	; 0x658 <COUNTER_16bit_timer1_init>
	GPIO_init();
     bd0:	0e 94 92 03 	call	0x724	; 0x724 <GPIO_init>
	UART_init(MYUBRR);
     bd4:	83 e3       	ldi	r24, 0x33	; 51
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 a2 03 	call	0x744	; 0x744 <UART_init>
	INIT_EXTERNAL_ISR();
     bdc:	0e 94 87 03 	call	0x70e	; 0x70e <INIT_EXTERNAL_ISR>
	sei(); // enable global interupt 
     be0:	78 94       	sei
	
	// Start and loop the programme
	FSM_start();
     be2:	0e 94 bd 00 	call	0x17a	; 0x17a <FSM_start>
}
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	08 95       	ret

00000bec <__subsf3>:
     bec:	50 58       	subi	r21, 0x80	; 128

00000bee <__addsf3>:
     bee:	bb 27       	eor	r27, r27
     bf0:	aa 27       	eor	r26, r26
     bf2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__addsf3x>
     bf6:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_round>
     bfa:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_pscA>
     bfe:	38 f0       	brcs	.+14     	; 0xc0e <__addsf3+0x20>
     c00:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscB>
     c04:	20 f0       	brcs	.+8      	; 0xc0e <__addsf3+0x20>
     c06:	39 f4       	brne	.+14     	; 0xc16 <__addsf3+0x28>
     c08:	9f 3f       	cpi	r25, 0xFF	; 255
     c0a:	19 f4       	brne	.+6      	; 0xc12 <__addsf3+0x24>
     c0c:	26 f4       	brtc	.+8      	; 0xc16 <__addsf3+0x28>
     c0e:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__fp_nan>
     c12:	0e f4       	brtc	.+2      	; 0xc16 <__addsf3+0x28>
     c14:	e0 95       	com	r30
     c16:	e7 fb       	bst	r30, 7
     c18:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_inf>

00000c1c <__addsf3x>:
     c1c:	e9 2f       	mov	r30, r25
     c1e:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_split3>
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__addsf3+0xc>
     c24:	ba 17       	cp	r27, r26
     c26:	62 07       	cpc	r22, r18
     c28:	73 07       	cpc	r23, r19
     c2a:	84 07       	cpc	r24, r20
     c2c:	95 07       	cpc	r25, r21
     c2e:	20 f0       	brcs	.+8      	; 0xc38 <__addsf3x+0x1c>
     c30:	79 f4       	brne	.+30     	; 0xc50 <__addsf3x+0x34>
     c32:	a6 f5       	brtc	.+104    	; 0xc9c <__addsf3x+0x80>
     c34:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_zero>
     c38:	0e f4       	brtc	.+2      	; 0xc3c <__addsf3x+0x20>
     c3a:	e0 95       	com	r30
     c3c:	0b 2e       	mov	r0, r27
     c3e:	ba 2f       	mov	r27, r26
     c40:	a0 2d       	mov	r26, r0
     c42:	0b 01       	movw	r0, r22
     c44:	b9 01       	movw	r22, r18
     c46:	90 01       	movw	r18, r0
     c48:	0c 01       	movw	r0, r24
     c4a:	ca 01       	movw	r24, r20
     c4c:	a0 01       	movw	r20, r0
     c4e:	11 24       	eor	r1, r1
     c50:	ff 27       	eor	r31, r31
     c52:	59 1b       	sub	r21, r25
     c54:	99 f0       	breq	.+38     	; 0xc7c <__addsf3x+0x60>
     c56:	59 3f       	cpi	r21, 0xF9	; 249
     c58:	50 f4       	brcc	.+20     	; 0xc6e <__addsf3x+0x52>
     c5a:	50 3e       	cpi	r21, 0xE0	; 224
     c5c:	68 f1       	brcs	.+90     	; 0xcb8 <__addsf3x+0x9c>
     c5e:	1a 16       	cp	r1, r26
     c60:	f0 40       	sbci	r31, 0x00	; 0
     c62:	a2 2f       	mov	r26, r18
     c64:	23 2f       	mov	r18, r19
     c66:	34 2f       	mov	r19, r20
     c68:	44 27       	eor	r20, r20
     c6a:	58 5f       	subi	r21, 0xF8	; 248
     c6c:	f3 cf       	rjmp	.-26     	; 0xc54 <__addsf3x+0x38>
     c6e:	46 95       	lsr	r20
     c70:	37 95       	ror	r19
     c72:	27 95       	ror	r18
     c74:	a7 95       	ror	r26
     c76:	f0 40       	sbci	r31, 0x00	; 0
     c78:	53 95       	inc	r21
     c7a:	c9 f7       	brne	.-14     	; 0xc6e <__addsf3x+0x52>
     c7c:	7e f4       	brtc	.+30     	; 0xc9c <__addsf3x+0x80>
     c7e:	1f 16       	cp	r1, r31
     c80:	ba 0b       	sbc	r27, r26
     c82:	62 0b       	sbc	r22, r18
     c84:	73 0b       	sbc	r23, r19
     c86:	84 0b       	sbc	r24, r20
     c88:	ba f0       	brmi	.+46     	; 0xcb8 <__addsf3x+0x9c>
     c8a:	91 50       	subi	r25, 0x01	; 1
     c8c:	a1 f0       	breq	.+40     	; 0xcb6 <__addsf3x+0x9a>
     c8e:	ff 0f       	add	r31, r31
     c90:	bb 1f       	adc	r27, r27
     c92:	66 1f       	adc	r22, r22
     c94:	77 1f       	adc	r23, r23
     c96:	88 1f       	adc	r24, r24
     c98:	c2 f7       	brpl	.-16     	; 0xc8a <__addsf3x+0x6e>
     c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <__addsf3x+0x9c>
     c9c:	ba 0f       	add	r27, r26
     c9e:	62 1f       	adc	r22, r18
     ca0:	73 1f       	adc	r23, r19
     ca2:	84 1f       	adc	r24, r20
     ca4:	48 f4       	brcc	.+18     	; 0xcb8 <__addsf3x+0x9c>
     ca6:	87 95       	ror	r24
     ca8:	77 95       	ror	r23
     caa:	67 95       	ror	r22
     cac:	b7 95       	ror	r27
     cae:	f7 95       	ror	r31
     cb0:	9e 3f       	cpi	r25, 0xFE	; 254
     cb2:	08 f0       	brcs	.+2      	; 0xcb6 <__addsf3x+0x9a>
     cb4:	b0 cf       	rjmp	.-160    	; 0xc16 <__addsf3+0x28>
     cb6:	93 95       	inc	r25
     cb8:	88 0f       	add	r24, r24
     cba:	08 f0       	brcs	.+2      	; 0xcbe <__addsf3x+0xa2>
     cbc:	99 27       	eor	r25, r25
     cbe:	ee 0f       	add	r30, r30
     cc0:	97 95       	ror	r25
     cc2:	87 95       	ror	r24
     cc4:	08 95       	ret

00000cc6 <__cmpsf2>:
     cc6:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_cmp>
     cca:	08 f4       	brcc	.+2      	; 0xcce <__cmpsf2+0x8>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	08 95       	ret

00000cd0 <__divsf3>:
     cd0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__divsf3x>
     cd4:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_round>
     cd8:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscB>
     cdc:	58 f0       	brcs	.+22     	; 0xcf4 <__divsf3+0x24>
     cde:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_pscA>
     ce2:	40 f0       	brcs	.+16     	; 0xcf4 <__divsf3+0x24>
     ce4:	29 f4       	brne	.+10     	; 0xcf0 <__divsf3+0x20>
     ce6:	5f 3f       	cpi	r21, 0xFF	; 255
     ce8:	29 f0       	breq	.+10     	; 0xcf4 <__divsf3+0x24>
     cea:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_inf>
     cee:	51 11       	cpse	r21, r1
     cf0:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_szero>
     cf4:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__fp_nan>

00000cf8 <__divsf3x>:
     cf8:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_split3>
     cfc:	68 f3       	brcs	.-38     	; 0xcd8 <__divsf3+0x8>

00000cfe <__divsf3_pse>:
     cfe:	99 23       	and	r25, r25
     d00:	b1 f3       	breq	.-20     	; 0xcee <__divsf3+0x1e>
     d02:	55 23       	and	r21, r21
     d04:	91 f3       	breq	.-28     	; 0xcea <__divsf3+0x1a>
     d06:	95 1b       	sub	r25, r21
     d08:	55 0b       	sbc	r21, r21
     d0a:	bb 27       	eor	r27, r27
     d0c:	aa 27       	eor	r26, r26
     d0e:	62 17       	cp	r22, r18
     d10:	73 07       	cpc	r23, r19
     d12:	84 07       	cpc	r24, r20
     d14:	38 f0       	brcs	.+14     	; 0xd24 <__divsf3_pse+0x26>
     d16:	9f 5f       	subi	r25, 0xFF	; 255
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	44 1f       	adc	r20, r20
     d20:	aa 1f       	adc	r26, r26
     d22:	a9 f3       	breq	.-22     	; 0xd0e <__divsf3_pse+0x10>
     d24:	35 d0       	rcall	.+106    	; 0xd90 <__divsf3_pse+0x92>
     d26:	0e 2e       	mov	r0, r30
     d28:	3a f0       	brmi	.+14     	; 0xd38 <__divsf3_pse+0x3a>
     d2a:	e0 e8       	ldi	r30, 0x80	; 128
     d2c:	32 d0       	rcall	.+100    	; 0xd92 <__divsf3_pse+0x94>
     d2e:	91 50       	subi	r25, 0x01	; 1
     d30:	50 40       	sbci	r21, 0x00	; 0
     d32:	e6 95       	lsr	r30
     d34:	00 1c       	adc	r0, r0
     d36:	ca f7       	brpl	.-14     	; 0xd2a <__divsf3_pse+0x2c>
     d38:	2b d0       	rcall	.+86     	; 0xd90 <__divsf3_pse+0x92>
     d3a:	fe 2f       	mov	r31, r30
     d3c:	29 d0       	rcall	.+82     	; 0xd90 <__divsf3_pse+0x92>
     d3e:	66 0f       	add	r22, r22
     d40:	77 1f       	adc	r23, r23
     d42:	88 1f       	adc	r24, r24
     d44:	bb 1f       	adc	r27, r27
     d46:	26 17       	cp	r18, r22
     d48:	37 07       	cpc	r19, r23
     d4a:	48 07       	cpc	r20, r24
     d4c:	ab 07       	cpc	r26, r27
     d4e:	b0 e8       	ldi	r27, 0x80	; 128
     d50:	09 f0       	breq	.+2      	; 0xd54 <__divsf3_pse+0x56>
     d52:	bb 0b       	sbc	r27, r27
     d54:	80 2d       	mov	r24, r0
     d56:	bf 01       	movw	r22, r30
     d58:	ff 27       	eor	r31, r31
     d5a:	93 58       	subi	r25, 0x83	; 131
     d5c:	5f 4f       	sbci	r21, 0xFF	; 255
     d5e:	3a f0       	brmi	.+14     	; 0xd6e <__divsf3_pse+0x70>
     d60:	9e 3f       	cpi	r25, 0xFE	; 254
     d62:	51 05       	cpc	r21, r1
     d64:	78 f0       	brcs	.+30     	; 0xd84 <__divsf3_pse+0x86>
     d66:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_inf>
     d6a:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_szero>
     d6e:	5f 3f       	cpi	r21, 0xFF	; 255
     d70:	e4 f3       	brlt	.-8      	; 0xd6a <__divsf3_pse+0x6c>
     d72:	98 3e       	cpi	r25, 0xE8	; 232
     d74:	d4 f3       	brlt	.-12     	; 0xd6a <__divsf3_pse+0x6c>
     d76:	86 95       	lsr	r24
     d78:	77 95       	ror	r23
     d7a:	67 95       	ror	r22
     d7c:	b7 95       	ror	r27
     d7e:	f7 95       	ror	r31
     d80:	9f 5f       	subi	r25, 0xFF	; 255
     d82:	c9 f7       	brne	.-14     	; 0xd76 <__divsf3_pse+0x78>
     d84:	88 0f       	add	r24, r24
     d86:	91 1d       	adc	r25, r1
     d88:	96 95       	lsr	r25
     d8a:	87 95       	ror	r24
     d8c:	97 f9       	bld	r25, 7
     d8e:	08 95       	ret
     d90:	e1 e0       	ldi	r30, 0x01	; 1
     d92:	66 0f       	add	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	88 1f       	adc	r24, r24
     d98:	bb 1f       	adc	r27, r27
     d9a:	62 17       	cp	r22, r18
     d9c:	73 07       	cpc	r23, r19
     d9e:	84 07       	cpc	r24, r20
     da0:	ba 07       	cpc	r27, r26
     da2:	20 f0       	brcs	.+8      	; 0xdac <__divsf3_pse+0xae>
     da4:	62 1b       	sub	r22, r18
     da6:	73 0b       	sbc	r23, r19
     da8:	84 0b       	sbc	r24, r20
     daa:	ba 0b       	sbc	r27, r26
     dac:	ee 1f       	adc	r30, r30
     dae:	88 f7       	brcc	.-30     	; 0xd92 <__divsf3_pse+0x94>
     db0:	e0 95       	com	r30
     db2:	08 95       	ret

00000db4 <__fixunssfsi>:
     db4:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_splitA>
     db8:	88 f0       	brcs	.+34     	; 0xddc <__fixunssfsi+0x28>
     dba:	9f 57       	subi	r25, 0x7F	; 127
     dbc:	98 f0       	brcs	.+38     	; 0xde4 <__fixunssfsi+0x30>
     dbe:	b9 2f       	mov	r27, r25
     dc0:	99 27       	eor	r25, r25
     dc2:	b7 51       	subi	r27, 0x17	; 23
     dc4:	b0 f0       	brcs	.+44     	; 0xdf2 <__fixunssfsi+0x3e>
     dc6:	e1 f0       	breq	.+56     	; 0xe00 <__fixunssfsi+0x4c>
     dc8:	66 0f       	add	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	88 1f       	adc	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	1a f0       	brmi	.+6      	; 0xdd8 <__fixunssfsi+0x24>
     dd2:	ba 95       	dec	r27
     dd4:	c9 f7       	brne	.-14     	; 0xdc8 <__fixunssfsi+0x14>
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <__fixunssfsi+0x4c>
     dd8:	b1 30       	cpi	r27, 0x01	; 1
     dda:	91 f0       	breq	.+36     	; 0xe00 <__fixunssfsi+0x4c>
     ddc:	0e 94 b4 07 	call	0xf68	; 0xf68 <__fp_zero>
     de0:	b1 e0       	ldi	r27, 0x01	; 1
     de2:	08 95       	ret
     de4:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_zero>
     de8:	67 2f       	mov	r22, r23
     dea:	78 2f       	mov	r23, r24
     dec:	88 27       	eor	r24, r24
     dee:	b8 5f       	subi	r27, 0xF8	; 248
     df0:	39 f0       	breq	.+14     	; 0xe00 <__fixunssfsi+0x4c>
     df2:	b9 3f       	cpi	r27, 0xF9	; 249
     df4:	cc f3       	brlt	.-14     	; 0xde8 <__fixunssfsi+0x34>
     df6:	86 95       	lsr	r24
     df8:	77 95       	ror	r23
     dfa:	67 95       	ror	r22
     dfc:	b3 95       	inc	r27
     dfe:	d9 f7       	brne	.-10     	; 0xdf6 <__fixunssfsi+0x42>
     e00:	3e f4       	brtc	.+14     	; 0xe10 <__fixunssfsi+0x5c>
     e02:	90 95       	com	r25
     e04:	80 95       	com	r24
     e06:	70 95       	com	r23
     e08:	61 95       	neg	r22
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	8f 4f       	sbci	r24, 0xFF	; 255
     e0e:	9f 4f       	sbci	r25, 0xFF	; 255
     e10:	08 95       	ret

00000e12 <__floatunsisf>:
     e12:	e8 94       	clt
     e14:	09 c0       	rjmp	.+18     	; 0xe28 <__floatsisf+0x12>

00000e16 <__floatsisf>:
     e16:	97 fb       	bst	r25, 7
     e18:	3e f4       	brtc	.+14     	; 0xe28 <__floatsisf+0x12>
     e1a:	90 95       	com	r25
     e1c:	80 95       	com	r24
     e1e:	70 95       	com	r23
     e20:	61 95       	neg	r22
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	8f 4f       	sbci	r24, 0xFF	; 255
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	99 23       	and	r25, r25
     e2a:	a9 f0       	breq	.+42     	; 0xe56 <__floatsisf+0x40>
     e2c:	f9 2f       	mov	r31, r25
     e2e:	96 e9       	ldi	r25, 0x96	; 150
     e30:	bb 27       	eor	r27, r27
     e32:	93 95       	inc	r25
     e34:	f6 95       	lsr	r31
     e36:	87 95       	ror	r24
     e38:	77 95       	ror	r23
     e3a:	67 95       	ror	r22
     e3c:	b7 95       	ror	r27
     e3e:	f1 11       	cpse	r31, r1
     e40:	f8 cf       	rjmp	.-16     	; 0xe32 <__floatsisf+0x1c>
     e42:	fa f4       	brpl	.+62     	; 0xe82 <__floatsisf+0x6c>
     e44:	bb 0f       	add	r27, r27
     e46:	11 f4       	brne	.+4      	; 0xe4c <__floatsisf+0x36>
     e48:	60 ff       	sbrs	r22, 0
     e4a:	1b c0       	rjmp	.+54     	; 0xe82 <__floatsisf+0x6c>
     e4c:	6f 5f       	subi	r22, 0xFF	; 255
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	8f 4f       	sbci	r24, 0xFF	; 255
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	16 c0       	rjmp	.+44     	; 0xe82 <__floatsisf+0x6c>
     e56:	88 23       	and	r24, r24
     e58:	11 f0       	breq	.+4      	; 0xe5e <__floatsisf+0x48>
     e5a:	96 e9       	ldi	r25, 0x96	; 150
     e5c:	11 c0       	rjmp	.+34     	; 0xe80 <__floatsisf+0x6a>
     e5e:	77 23       	and	r23, r23
     e60:	21 f0       	breq	.+8      	; 0xe6a <__floatsisf+0x54>
     e62:	9e e8       	ldi	r25, 0x8E	; 142
     e64:	87 2f       	mov	r24, r23
     e66:	76 2f       	mov	r23, r22
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <__floatsisf+0x5e>
     e6a:	66 23       	and	r22, r22
     e6c:	71 f0       	breq	.+28     	; 0xe8a <__floatsisf+0x74>
     e6e:	96 e8       	ldi	r25, 0x86	; 134
     e70:	86 2f       	mov	r24, r22
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	2a f0       	brmi	.+10     	; 0xe82 <__floatsisf+0x6c>
     e78:	9a 95       	dec	r25
     e7a:	66 0f       	add	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	88 1f       	adc	r24, r24
     e80:	da f7       	brpl	.-10     	; 0xe78 <__floatsisf+0x62>
     e82:	88 0f       	add	r24, r24
     e84:	96 95       	lsr	r25
     e86:	87 95       	ror	r24
     e88:	97 f9       	bld	r25, 7
     e8a:	08 95       	ret

00000e8c <__fp_cmp>:
     e8c:	99 0f       	add	r25, r25
     e8e:	00 08       	sbc	r0, r0
     e90:	55 0f       	add	r21, r21
     e92:	aa 0b       	sbc	r26, r26
     e94:	e0 e8       	ldi	r30, 0x80	; 128
     e96:	fe ef       	ldi	r31, 0xFE	; 254
     e98:	16 16       	cp	r1, r22
     e9a:	17 06       	cpc	r1, r23
     e9c:	e8 07       	cpc	r30, r24
     e9e:	f9 07       	cpc	r31, r25
     ea0:	c0 f0       	brcs	.+48     	; 0xed2 <__fp_cmp+0x46>
     ea2:	12 16       	cp	r1, r18
     ea4:	13 06       	cpc	r1, r19
     ea6:	e4 07       	cpc	r30, r20
     ea8:	f5 07       	cpc	r31, r21
     eaa:	98 f0       	brcs	.+38     	; 0xed2 <__fp_cmp+0x46>
     eac:	62 1b       	sub	r22, r18
     eae:	73 0b       	sbc	r23, r19
     eb0:	84 0b       	sbc	r24, r20
     eb2:	95 0b       	sbc	r25, r21
     eb4:	39 f4       	brne	.+14     	; 0xec4 <__fp_cmp+0x38>
     eb6:	0a 26       	eor	r0, r26
     eb8:	61 f0       	breq	.+24     	; 0xed2 <__fp_cmp+0x46>
     eba:	23 2b       	or	r18, r19
     ebc:	24 2b       	or	r18, r20
     ebe:	25 2b       	or	r18, r21
     ec0:	21 f4       	brne	.+8      	; 0xeca <__fp_cmp+0x3e>
     ec2:	08 95       	ret
     ec4:	0a 26       	eor	r0, r26
     ec6:	09 f4       	brne	.+2      	; 0xeca <__fp_cmp+0x3e>
     ec8:	a1 40       	sbci	r26, 0x01	; 1
     eca:	a6 95       	lsr	r26
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	81 1d       	adc	r24, r1
     ed0:	81 1d       	adc	r24, r1
     ed2:	08 95       	ret

00000ed4 <__fp_inf>:
     ed4:	97 f9       	bld	r25, 7
     ed6:	9f 67       	ori	r25, 0x7F	; 127
     ed8:	80 e8       	ldi	r24, 0x80	; 128
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	08 95       	ret

00000ee0 <__fp_nan>:
     ee0:	9f ef       	ldi	r25, 0xFF	; 255
     ee2:	80 ec       	ldi	r24, 0xC0	; 192
     ee4:	08 95       	ret

00000ee6 <__fp_pscA>:
     ee6:	00 24       	eor	r0, r0
     ee8:	0a 94       	dec	r0
     eea:	16 16       	cp	r1, r22
     eec:	17 06       	cpc	r1, r23
     eee:	18 06       	cpc	r1, r24
     ef0:	09 06       	cpc	r0, r25
     ef2:	08 95       	ret

00000ef4 <__fp_pscB>:
     ef4:	00 24       	eor	r0, r0
     ef6:	0a 94       	dec	r0
     ef8:	12 16       	cp	r1, r18
     efa:	13 06       	cpc	r1, r19
     efc:	14 06       	cpc	r1, r20
     efe:	05 06       	cpc	r0, r21
     f00:	08 95       	ret

00000f02 <__fp_round>:
     f02:	09 2e       	mov	r0, r25
     f04:	03 94       	inc	r0
     f06:	00 0c       	add	r0, r0
     f08:	11 f4       	brne	.+4      	; 0xf0e <__fp_round+0xc>
     f0a:	88 23       	and	r24, r24
     f0c:	52 f0       	brmi	.+20     	; 0xf22 <__fp_round+0x20>
     f0e:	bb 0f       	add	r27, r27
     f10:	40 f4       	brcc	.+16     	; 0xf22 <__fp_round+0x20>
     f12:	bf 2b       	or	r27, r31
     f14:	11 f4       	brne	.+4      	; 0xf1a <__fp_round+0x18>
     f16:	60 ff       	sbrs	r22, 0
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <__fp_round+0x20>
     f1a:	6f 5f       	subi	r22, 0xFF	; 255
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	8f 4f       	sbci	r24, 0xFF	; 255
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	08 95       	ret

00000f24 <__fp_split3>:
     f24:	57 fd       	sbrc	r21, 7
     f26:	90 58       	subi	r25, 0x80	; 128
     f28:	44 0f       	add	r20, r20
     f2a:	55 1f       	adc	r21, r21
     f2c:	59 f0       	breq	.+22     	; 0xf44 <__fp_splitA+0x10>
     f2e:	5f 3f       	cpi	r21, 0xFF	; 255
     f30:	71 f0       	breq	.+28     	; 0xf4e <__fp_splitA+0x1a>
     f32:	47 95       	ror	r20

00000f34 <__fp_splitA>:
     f34:	88 0f       	add	r24, r24
     f36:	97 fb       	bst	r25, 7
     f38:	99 1f       	adc	r25, r25
     f3a:	61 f0       	breq	.+24     	; 0xf54 <__fp_splitA+0x20>
     f3c:	9f 3f       	cpi	r25, 0xFF	; 255
     f3e:	79 f0       	breq	.+30     	; 0xf5e <__fp_splitA+0x2a>
     f40:	87 95       	ror	r24
     f42:	08 95       	ret
     f44:	12 16       	cp	r1, r18
     f46:	13 06       	cpc	r1, r19
     f48:	14 06       	cpc	r1, r20
     f4a:	55 1f       	adc	r21, r21
     f4c:	f2 cf       	rjmp	.-28     	; 0xf32 <__fp_split3+0xe>
     f4e:	46 95       	lsr	r20
     f50:	f1 df       	rcall	.-30     	; 0xf34 <__fp_splitA>
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <__fp_splitA+0x30>
     f54:	16 16       	cp	r1, r22
     f56:	17 06       	cpc	r1, r23
     f58:	18 06       	cpc	r1, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	f1 cf       	rjmp	.-30     	; 0xf40 <__fp_splitA+0xc>
     f5e:	86 95       	lsr	r24
     f60:	71 05       	cpc	r23, r1
     f62:	61 05       	cpc	r22, r1
     f64:	08 94       	sec
     f66:	08 95       	ret

00000f68 <__fp_zero>:
     f68:	e8 94       	clt

00000f6a <__fp_szero>:
     f6a:	bb 27       	eor	r27, r27
     f6c:	66 27       	eor	r22, r22
     f6e:	77 27       	eor	r23, r23
     f70:	cb 01       	movw	r24, r22
     f72:	97 f9       	bld	r25, 7
     f74:	08 95       	ret

00000f76 <__gesf2>:
     f76:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_cmp>
     f7a:	08 f4       	brcc	.+2      	; 0xf7e <__gesf2+0x8>
     f7c:	8f ef       	ldi	r24, 0xFF	; 255
     f7e:	08 95       	ret

00000f80 <__mulsf3>:
     f80:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__mulsf3x>
     f84:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__fp_round>
     f88:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_pscA>
     f8c:	38 f0       	brcs	.+14     	; 0xf9c <__mulsf3+0x1c>
     f8e:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscB>
     f92:	20 f0       	brcs	.+8      	; 0xf9c <__mulsf3+0x1c>
     f94:	95 23       	and	r25, r21
     f96:	11 f0       	breq	.+4      	; 0xf9c <__mulsf3+0x1c>
     f98:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_inf>
     f9c:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__fp_nan>
     fa0:	11 24       	eor	r1, r1
     fa2:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_szero>

00000fa6 <__mulsf3x>:
     fa6:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_split3>
     faa:	70 f3       	brcs	.-36     	; 0xf88 <__mulsf3+0x8>

00000fac <__mulsf3_pse>:
     fac:	95 9f       	mul	r25, r21
     fae:	c1 f3       	breq	.-16     	; 0xfa0 <__mulsf3+0x20>
     fb0:	95 0f       	add	r25, r21
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	55 1f       	adc	r21, r21
     fb6:	62 9f       	mul	r22, r18
     fb8:	f0 01       	movw	r30, r0
     fba:	72 9f       	mul	r23, r18
     fbc:	bb 27       	eor	r27, r27
     fbe:	f0 0d       	add	r31, r0
     fc0:	b1 1d       	adc	r27, r1
     fc2:	63 9f       	mul	r22, r19
     fc4:	aa 27       	eor	r26, r26
     fc6:	f0 0d       	add	r31, r0
     fc8:	b1 1d       	adc	r27, r1
     fca:	aa 1f       	adc	r26, r26
     fcc:	64 9f       	mul	r22, r20
     fce:	66 27       	eor	r22, r22
     fd0:	b0 0d       	add	r27, r0
     fd2:	a1 1d       	adc	r26, r1
     fd4:	66 1f       	adc	r22, r22
     fd6:	82 9f       	mul	r24, r18
     fd8:	22 27       	eor	r18, r18
     fda:	b0 0d       	add	r27, r0
     fdc:	a1 1d       	adc	r26, r1
     fde:	62 1f       	adc	r22, r18
     fe0:	73 9f       	mul	r23, r19
     fe2:	b0 0d       	add	r27, r0
     fe4:	a1 1d       	adc	r26, r1
     fe6:	62 1f       	adc	r22, r18
     fe8:	83 9f       	mul	r24, r19
     fea:	a0 0d       	add	r26, r0
     fec:	61 1d       	adc	r22, r1
     fee:	22 1f       	adc	r18, r18
     ff0:	74 9f       	mul	r23, r20
     ff2:	33 27       	eor	r19, r19
     ff4:	a0 0d       	add	r26, r0
     ff6:	61 1d       	adc	r22, r1
     ff8:	23 1f       	adc	r18, r19
     ffa:	84 9f       	mul	r24, r20
     ffc:	60 0d       	add	r22, r0
     ffe:	21 1d       	adc	r18, r1
    1000:	82 2f       	mov	r24, r18
    1002:	76 2f       	mov	r23, r22
    1004:	6a 2f       	mov	r22, r26
    1006:	11 24       	eor	r1, r1
    1008:	9f 57       	subi	r25, 0x7F	; 127
    100a:	50 40       	sbci	r21, 0x00	; 0
    100c:	9a f0       	brmi	.+38     	; 0x1034 <__mulsf3_pse+0x88>
    100e:	f1 f0       	breq	.+60     	; 0x104c <__mulsf3_pse+0xa0>
    1010:	88 23       	and	r24, r24
    1012:	4a f0       	brmi	.+18     	; 0x1026 <__mulsf3_pse+0x7a>
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	bb 1f       	adc	r27, r27
    101a:	66 1f       	adc	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	88 1f       	adc	r24, r24
    1020:	91 50       	subi	r25, 0x01	; 1
    1022:	50 40       	sbci	r21, 0x00	; 0
    1024:	a9 f7       	brne	.-22     	; 0x1010 <__mulsf3_pse+0x64>
    1026:	9e 3f       	cpi	r25, 0xFE	; 254
    1028:	51 05       	cpc	r21, r1
    102a:	80 f0       	brcs	.+32     	; 0x104c <__mulsf3_pse+0xa0>
    102c:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_inf>
    1030:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_szero>
    1034:	5f 3f       	cpi	r21, 0xFF	; 255
    1036:	e4 f3       	brlt	.-8      	; 0x1030 <__mulsf3_pse+0x84>
    1038:	98 3e       	cpi	r25, 0xE8	; 232
    103a:	d4 f3       	brlt	.-12     	; 0x1030 <__mulsf3_pse+0x84>
    103c:	86 95       	lsr	r24
    103e:	77 95       	ror	r23
    1040:	67 95       	ror	r22
    1042:	b7 95       	ror	r27
    1044:	f7 95       	ror	r31
    1046:	e7 95       	ror	r30
    1048:	9f 5f       	subi	r25, 0xFF	; 255
    104a:	c1 f7       	brne	.-16     	; 0x103c <__mulsf3_pse+0x90>
    104c:	fe 2b       	or	r31, r30
    104e:	88 0f       	add	r24, r24
    1050:	91 1d       	adc	r25, r1
    1052:	96 95       	lsr	r25
    1054:	87 95       	ror	r24
    1056:	97 f9       	bld	r25, 7
    1058:	08 95       	ret

0000105a <__divmodhi4>:
    105a:	97 fb       	bst	r25, 7
    105c:	07 2e       	mov	r0, r23
    105e:	16 f4       	brtc	.+4      	; 0x1064 <__divmodhi4+0xa>
    1060:	00 94       	com	r0
    1062:	07 d0       	rcall	.+14     	; 0x1072 <__divmodhi4_neg1>
    1064:	77 fd       	sbrc	r23, 7
    1066:	09 d0       	rcall	.+18     	; 0x107a <__divmodhi4_neg2>
    1068:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__udivmodhi4>
    106c:	07 fc       	sbrc	r0, 7
    106e:	05 d0       	rcall	.+10     	; 0x107a <__divmodhi4_neg2>
    1070:	3e f4       	brtc	.+14     	; 0x1080 <__divmodhi4_exit>

00001072 <__divmodhi4_neg1>:
    1072:	90 95       	com	r25
    1074:	81 95       	neg	r24
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	08 95       	ret

0000107a <__divmodhi4_neg2>:
    107a:	70 95       	com	r23
    107c:	61 95       	neg	r22
    107e:	7f 4f       	sbci	r23, 0xFF	; 255

00001080 <__divmodhi4_exit>:
    1080:	08 95       	ret

00001082 <__umulhisi3>:
    1082:	a2 9f       	mul	r26, r18
    1084:	b0 01       	movw	r22, r0
    1086:	b3 9f       	mul	r27, r19
    1088:	c0 01       	movw	r24, r0
    108a:	a3 9f       	mul	r26, r19
    108c:	70 0d       	add	r23, r0
    108e:	81 1d       	adc	r24, r1
    1090:	11 24       	eor	r1, r1
    1092:	91 1d       	adc	r25, r1
    1094:	b2 9f       	mul	r27, r18
    1096:	70 0d       	add	r23, r0
    1098:	81 1d       	adc	r24, r1
    109a:	11 24       	eor	r1, r1
    109c:	91 1d       	adc	r25, r1
    109e:	08 95       	ret

000010a0 <__udivmodhi4>:
    10a0:	aa 1b       	sub	r26, r26
    10a2:	bb 1b       	sub	r27, r27
    10a4:	51 e1       	ldi	r21, 0x11	; 17
    10a6:	07 c0       	rjmp	.+14     	; 0x10b6 <__udivmodhi4_ep>

000010a8 <__udivmodhi4_loop>:
    10a8:	aa 1f       	adc	r26, r26
    10aa:	bb 1f       	adc	r27, r27
    10ac:	a6 17       	cp	r26, r22
    10ae:	b7 07       	cpc	r27, r23
    10b0:	10 f0       	brcs	.+4      	; 0x10b6 <__udivmodhi4_ep>
    10b2:	a6 1b       	sub	r26, r22
    10b4:	b7 0b       	sbc	r27, r23

000010b6 <__udivmodhi4_ep>:
    10b6:	88 1f       	adc	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	5a 95       	dec	r21
    10bc:	a9 f7       	brne	.-22     	; 0x10a8 <__udivmodhi4_loop>
    10be:	80 95       	com	r24
    10c0:	90 95       	com	r25
    10c2:	bc 01       	movw	r22, r24
    10c4:	cd 01       	movw	r24, r26
    10c6:	08 95       	ret

000010c8 <_exit>:
    10c8:	f8 94       	cli

000010ca <__stop_program>:
    10ca:	ff cf       	rjmp	.-2      	; 0x10ca <__stop_program>
